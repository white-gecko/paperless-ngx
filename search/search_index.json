{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Paperless-ngx is a community-supported open-source document management system that transforms your physical documents into a searchable online archive so you can keep, well, less paper.</p> <p>Get started Demo</p> <p> </p>"},{"location":"#why-this-exists","title":"Why This Exists","text":"<p>Paper is a nightmare. Environmental issues aside, there's no excuse for it in the 21st century. It takes up space, collects dust, doesn't support any form of a search feature, indexing is tedious, it's heavy and prone to damage &amp; loss.</p> <p>This software is designed to make \"going paperless\" easier. No more worrying about finding stuff again, feed documents right from the post box into the scanner and then shred them. Perhaps you might find it useful too.</p>"},{"location":"#paperless-a-history","title":"Paperless, a history","text":"<p>Paperless is a simple Django application running in two parts: a Consumer (the thing that does the indexing) and the Web server (the part that lets you search &amp; download already-indexed documents). If you want to learn more about its functions keep on reading after the installation section.</p> <p>Paperless-ngx is a document management system that transforms your physical documents into a searchable online archive so you can keep, well, less paper.</p> <p>Paperless-ngx forked from paperless-ng to continue the great work and distribute responsibility of supporting and advancing the project among a team of people.</p> <p>NG stands for both Angular (the framework used for the Frontend) and next-gen. Publishing this project under a different name also avoids confusion between paperless and paperless-ngx.</p> <p>If you want to learn about what's different in paperless-ngx from Paperless, check out these resources in the documentation:</p> <ul> <li>Some screenshots of the new UI are available.</li> <li>Read this section if you want to learn about how paperless automates all   tagging using machine learning.</li> <li>Paperless now comes with a proper email consumer that's fully tested and production ready.</li> <li>Paperless creates searchable PDF/A documents from whatever you put into the consumption directory. This means   that you can select text in image-only documents coming from your scanner.</li> <li>See this note about GnuPG encryption in paperless-ngx.</li> <li>Paperless is now integrated with a   task processing queue that tells you at a glance when and why something is not working.</li> <li>The changelog contains a detailed list of all changes in paperless-ngx.</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":"<p>This is what Paperless-ngx looks like.</p> <p>The dashboard shows customizable views on your document and allows document uploads:</p> <p></p> <p>The document list provides three different styles to scroll through your documents:</p> <p></p> <p></p> <p></p> <p>Paperless-ngx also supports dark mode:</p> <p></p> <p>Extensive filtering mechanisms:</p> <p></p> <p>Bulk editing of document tags, correspondents, etc.:</p> <p></p> <p>Side-by-side editing of documents:</p> <p></p> <p>Tag editing. This looks about the same for correspondents and document types.</p> <p></p> <p>Searching provides auto complete and highlights the results.</p> <p></p> <p></p> <p>Fancy mail filters!</p> <p></p> <p>Mobile devices are supported.</p> <p></p>"},{"location":"#support","title":"Support","text":"<p>Community support is available via GitHub Discussions and the Matrix chat room.</p>"},{"location":"#feature-requests","title":"Feature Requests","text":"<p>Feature requests can be submitted via GitHub Discussions where you can search for existing ideas, add your own and vote for the ones you care about.</p>"},{"location":"#bugs","title":"Bugs","text":"<p>For bugs please open an issue or start a discussion if you have questions.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>People interested in continuing the work on paperless-ngx are encouraged to reach out on GitHub or the Matrix chat room. If you would like to contribute to the project on an ongoing basis there are multiple teams (frontend, ci/cd, etc) that could use your help so please reach out!</p>"},{"location":"#translation","title":"Translation","text":"<p>Paperless-ngx is available in many languages that are coordinated on Crowdin. If you want to help out by translating paperless-ngx into your language, please head over to https://crwd.in/paperless-ngx, and thank you!</p>"},{"location":"#scanners-software","title":"Scanners &amp; Software","text":"<p>Paperless-ngx is compatible with many different scanners and scanning tools. A user-maintained list of scanners and other software is available on the wiki.</p>"},{"location":"administration/","title":"Administration","text":""},{"location":"administration/#backup","title":"Making backups","text":"<p>Multiple options exist for making backups of your paperless instance, depending on how you installed paperless.</p> <p>Before making backups, make sure that paperless is not running.</p> <p>Options available to any installation of paperless:</p> <ul> <li>Use the document exporter. The document exporter exports all your documents,   thumbnails and metadata to a specific folder. You may import your   documents into a fresh instance of paperless again or store your   documents in another DMS with this export.</li> <li>The document exporter is also able to update an already existing   export. Therefore, incremental backups with <code>rsync</code> are entirely   possible.</li> </ul> <p>Caution</p> <p>You cannot import the export generated with one version of paperless in a different version of paperless. The export contains an exact image of the database, and migrations may change the database layout.</p> <p>Options available to docker installations:</p> <ul> <li>Backup the docker volumes. These usually reside within   <code>/var/lib/docker/volumes</code> on the host and you need to be root in   order to access them.</li> </ul> <p>Paperless uses 4 volumes:</p> <ul> <li><code>paperless_media</code>: This is where your documents are stored.</li> <li><code>paperless_data</code>: This is where auxillary data is stored. This     folder also contains the SQLite database, if you use it.</li> <li><code>paperless_pgdata</code>: Exists only if you use PostgreSQL and     contains the database.</li> <li><code>paperless_dbdata</code>: Exists only if you use MariaDB and contains     the database.</li> </ul> <p>Options available to bare-metal and non-docker installations:</p> <ul> <li>Backup the entire paperless folder. This ensures that if your   paperless instance crashes at some point or your disk fails, you can   simply copy the folder back into place and it works.</li> </ul> <p>When using PostgreSQL or MariaDB, you'll also have to backup the   database.</p>"},{"location":"administration/#migrating-restoring","title":"Restoring","text":""},{"location":"administration/#updating","title":"Updating Paperless","text":""},{"location":"administration/#docker-updating","title":"Docker Route","text":"<p>If a new release of paperless-ngx is available, upgrading depends on how you installed paperless-ngx in the first place. The releases are available at the release page.</p> <p>First of all, ensure that paperless is stopped.</p> <pre><code>$ cd /path/to/paperless\n$ docker-compose down\n</code></pre> <p>After that, make a backup.</p> <ol> <li>If you pull the image from the docker hub, all you need to do is:</li> </ol> <pre><code>$ docker-compose pull\n$ docker-compose up\n</code></pre> <p>The docker-compose files refer to the <code>latest</code> version, which is    always the latest stable release.</p> <ol> <li>If you built the image yourself, do the following:</li> </ol> <pre><code>$ git pull\n$ docker-compose build\n$ docker-compose up\n</code></pre> <p>Running <code>docker-compose up</code> will also apply any new database migrations. If you see everything working, press CTRL+C once to gracefully stop paperless. Then you can start paperless-ngx with <code>-d</code> to have it run in the background.</p> <p>Note</p> <p>In version 0.9.14, the update process was changed. In 0.9.13 and earlier, the docker-compose files specified exact versions and pull won't automatically update to newer versions. In order to enable updates as described above, either get the new <code>docker-compose.yml</code> file from here or edit the <code>docker-compose.yml</code> file, find the line that says</p> <pre><code>image: ghcr.io/paperless-ngx/paperless-ngx:0.9.x\n</code></pre> <p>and replace the version with <code>latest</code>:</p> <pre><code>image: ghcr.io/paperless-ngx/paperless-ngx:latest\n</code></pre> <p>Note</p> <p>In version 1.7.1 and onwards, the Docker image can now be pinned to a release series. This is often combined with automatic updaters such as Watchtower to allow safer unattended upgrading to new bugfix releases only. It is still recommended to always review release notes before upgrading. To pin your install to a release series, edit the <code>docker-compose.yml</code> find the line that says</p> <pre><code>image: ghcr.io/paperless-ngx/paperless-ngx:latest\n</code></pre> <p>and replace the version with the series you want to track, for example:</p> <pre><code>image: ghcr.io/paperless-ngx/paperless-ngx:1.7\n</code></pre>"},{"location":"administration/#bare-metal-updating","title":"Bare Metal Route","text":"<p>After grabbing the new release and unpacking the contents, do the following:</p> <ol> <li> <p>Update dependencies. New paperless version may require additional     dependencies. The dependencies required are listed in the section     about     bare metal installations.</p> </li> <li> <p>Update python requirements. Keep in mind to activate your virtual     environment before that, if you use one.</p> <pre><code>$ pip install -r requirements.txt\n</code></pre> </li> <li> <p>Migrate the database.</p> <pre><code>$ cd src\n$ python3 manage.py migrate # (1)\n</code></pre> <ol> <li>Including <code>sudo -Hu &lt;paperless_user&gt;</code> may be required</li> </ol> <p>This might not actually do anything. Not every new paperless version comes with new database migrations.</p> </li> </ol>"},{"location":"administration/#downgrade-paperless","title":"Downgrading Paperless","text":"<p>Downgrades are possible. However, some updates also contain database migrations (these change the layout of the database and may move data). In order to move back from a version that applied database migrations, you'll have to revert the database migration before downgrading, and then downgrade paperless.</p> <p>This table lists the compatible versions for each database migration number.</p> Migration number Version range 1011 1.0.0 1012 1.1.0 - 1.2.1 1014 1.3.0 - 1.3.1 1016 1.3.2 - current <p>Execute the following management command to migrate your database:</p> <pre><code>$ python3 manage.py migrate documents &lt;migration number&gt;\n</code></pre> <p>Note</p> <p>Some migrations cannot be undone. The command will issue errors if that happens.</p>"},{"location":"administration/#management-commands","title":"Management utilities","text":"<p>Paperless comes with some management commands that perform various maintenance tasks on your paperless instance. You can invoke these commands in the following way:</p> <p>With docker-compose, while paperless is running:</p> <pre><code>$ cd /path/to/paperless\n$ docker-compose exec webserver &lt;command&gt; &lt;arguments&gt;\n</code></pre> <p>With docker, while paperless is running:</p> <pre><code>$ docker exec -it &lt;container-name&gt; &lt;command&gt; &lt;arguments&gt;\n</code></pre> <p>Bare metal:</p> <pre><code>$ cd /path/to/paperless/src\n$ python3 manage.py &lt;command&gt; &lt;arguments&gt; # (1)\n</code></pre> <ol> <li>Including <code>sudo -Hu &lt;paperless_user&gt;</code> may be required</li> </ol> <p>All commands have built-in help, which can be accessed by executing them with the argument <code>--help</code>.</p>"},{"location":"administration/#exporter","title":"Document exporter","text":"<p>The document exporter exports all your data from paperless into a folder for backup or migration to another DMS.</p> <p>If you use the document exporter within a cronjob to backup your data you might use the <code>-T</code> flag behind exec to suppress \"The input device is not a TTY\" errors. For example: <code>docker-compose exec -T webserver document_exporter ../export</code></p> <pre><code>document_exporter target [-c] [-d] [-f] [-na] [-nt] [-p] [-sm] [-z]\n\noptional arguments:\n-c, --compare-checksums\n-d, --delete\n-f, --use-filename-format\n-na, --no-archive\n-nt, --no-thumbnail\n-p, --use-folder-prefix\n-sm, --split-manifest\n-z  --zip\n</code></pre> <p><code>target</code> is a folder to which the data gets written. This includes documents, thumbnails and a <code>manifest.json</code> file. The manifest contains all metadata from the database (correspondents, tags, etc).</p> <p>When you use the provided docker compose script, specify <code>../export</code> as the target. This path inside the container is automatically mounted on your host on the folder <code>export</code>.</p> <p>If the target directory already exists and contains files, paperless will assume that the contents of the export directory are a previous export and will attempt to update the previous export. Paperless will only export changed and added files. Paperless determines whether a file has changed by inspecting the file attributes \"date/time modified\" and \"size\". If that does not work out for you, specify <code>-c</code> or <code>--compare-checksums</code> and paperless will attempt to compare file checksums instead. This is slower.</p> <p>Paperless will not remove any existing files in the export directory. If you want paperless to also remove files that do not belong to the current export such as files from deleted documents, specify <code>-d</code> or <code>--delete</code>. Be careful when pointing paperless to a directory that already contains other files.</p> <p>The filenames generated by this command follow the format <code>[date created] [correspondent] [title].[extension]</code>. If you want paperless to use <code>PAPERLESS_FILENAME_FORMAT</code> for exported filenames instead, specify <code>-f</code> or <code>--use-filename-format</code>.</p> <p>If <code>-na</code> or <code>--no-archive</code> is provided, no archive files will be exported, only the original files.</p> <p>If <code>-nt</code> or <code>--no-thumbnail</code> is provided, thumbnail files will not be exported.</p> <p>Note</p> <p>When using the <code>-na</code>/<code>--no-archive</code> or <code>-nt</code>/<code>--no-thumbnail</code> options the exporter will not output these files for backup.  After importing, the sanity checker will warn about missing thumbnails and archive files until they are regenerated with <code>document_thumbnails</code> or <code>document_archiver</code>. It can make sense to omit these files from backup as their content and checksum can change (new archiver algorithm) and may then cause additional used space in a deduplicated backup.</p> <p>If <code>-p</code> or <code>--use-folder-prefix</code> is provided, files will be exported in dedicated folders according to their nature: <code>archive</code>, <code>originals</code>, <code>thumbnails</code> or <code>json</code></p> <p>If <code>-sm</code> or <code>--split-manifest</code> is provided, information about document will be placed in individual json files, instead of a single JSON file. The main manifest.json will still contain application wide information (e.g. tags, correspondent, documenttype, etc)</p> <p>If <code>-z</code> or <code>--zip</code> is provided, the export will be a zipfile in the target directory, named according to the current date.</p> <p>Warning</p> <p>If exporting with the file name format, there may be errors due to your operating system's maximum path lengths.  Try adjusting the export target or consider not using the filename format.</p>"},{"location":"administration/#importer","title":"Document importer","text":"<p>The document importer takes the export produced by the Document exporter and imports it into paperless.</p> <p>The importer works just like the exporter. You point it at a directory, and the script does the rest of the work:</p> <pre><code>document_importer source\n</code></pre> <p>When you use the provided docker compose script, put the export inside the <code>export</code> folder in your paperless source directory. Specify <code>../export</code> as the <code>source</code>.</p> <p>Note</p> <p>Importing from a previous version of Paperless may work, but for best results it is suggested to match the versions.</p>"},{"location":"administration/#retagger","title":"Document retagger","text":"<p>Say you've imported a few hundred documents and now want to introduce a tag or set up a new correspondent, and apply its matching to all of the currently-imported docs. This problem is common enough that there are tools for it.</p> <pre><code>document_retagger [-h] [-c] [-T] [-t] [-i] [--use-first] [-f]\n\noptional arguments:\n-c, --correspondent\n-T, --tags\n-t, --document_type\n-s, --storage_path\n-i, --inbox-only\n--use-first\n-f, --overwrite\n</code></pre> <p>Run this after changing or adding matching rules. It'll loop over all of the documents in your database and attempt to match documents according to the new rules.</p> <p>Specify any combination of <code>-c</code>, <code>-T</code>, <code>-t</code> and <code>-s</code> to have the retagger perform matching of the specified metadata type. If you don't specify any of these options, the document retagger won't do anything.</p> <p>Specify <code>-i</code> to have the document retagger work on documents tagged with inbox tags only. This is useful when you don't want to mess with your already processed documents.</p> <p>When multiple document types or correspondents match a single document, the retagger won't assign these to the document. Specify <code>--use-first</code> to override this behavior and just use the first correspondent or type it finds. This option does not apply to tags, since any amount of tags can be applied to a document.</p> <p>Finally, <code>-f</code> specifies that you wish to overwrite already assigned correspondents, types and/or tags. The default behavior is to not assign correspondents and types to documents that have this data already assigned. <code>-f</code> works differently for tags: By default, only additional tags get added to documents, no tags will be removed. With <code>-f</code>, tags that don't match a document anymore get removed as well.</p>"},{"location":"administration/#managing-the-automatic-matching-algorithm","title":"Managing the Automatic matching algorithm","text":"<p>The Auto matching algorithm requires a trained neural network to work. This network needs to be updated whenever somethings in your data changes. The docker image takes care of that automatically with the task scheduler. You can manually renew the classifier by invoking the following management command:</p> <pre><code>document_create_classifier\n</code></pre> <p>This command takes no arguments.</p>"},{"location":"administration/#thumbnails","title":"Document thumbnails","text":"<p>Use this command to re-create document thumbnails. Optionally include the <code>--document {id}</code> option to generate thumbnails for a specific document only.</p> <pre><code>document_thumbnails\n</code></pre>"},{"location":"administration/#index","title":"Managing the document search index","text":"<p>The document search index is responsible for delivering search results for the website. The document index is automatically updated whenever documents get added to, changed, or removed from paperless. However, if the search yields non-existing documents or won't find anything, you may need to recreate the index manually.</p> <pre><code>document_index {reindex,optimize}\n</code></pre> <p>Specify <code>reindex</code> to have the index created from scratch. This may take some time.</p> <p>Specify <code>optimize</code> to optimize the index. This updates certain aspects of the index and usually makes queries faster and also ensures that the autocompletion works properly. This command is regularly invoked by the task scheduler.</p>"},{"location":"administration/#renamer","title":"Managing filenames","text":"<p>If you use paperless' feature to assign custom filenames to your documents, you can use this command to move all your files after changing the naming scheme.</p> <p>Warning</p> <p>Since this command moves your documents, it is advised to do a backup beforehand. The renaming logic is robust and will never overwrite or delete a file, but you can't ever be careful enough.</p> <pre><code>document_renamer\n</code></pre> <p>The command takes no arguments and processes all your documents at once.</p> <p>Learn how to use Management Utilities.</p>"},{"location":"administration/#sanity-checker","title":"Sanity checker","text":"<p>Paperless has a built-in sanity checker that inspects your document collection for issues.</p> <p>The issues detected by the sanity checker are as follows:</p> <ul> <li>Missing original files.</li> <li>Missing archive files.</li> <li>Inaccessible original files due to improper permissions.</li> <li>Inaccessible archive files due to improper permissions.</li> <li>Corrupted original documents by comparing their checksum against   what is stored in the database.</li> <li>Corrupted archive documents by comparing their checksum against what   is stored in the database.</li> <li>Missing thumbnails.</li> <li>Inaccessible thumbnails due to improper permissions.</li> <li>Documents without any content (warning).</li> <li>Orphaned files in the media directory (warning). These are files   that are not referenced by any document im paperless.</li> </ul> <pre><code>document_sanity_checker\n</code></pre> <p>The command takes no arguments. Depending on the size of your document archive, this may take some time.</p>"},{"location":"administration/#fetching-e-mail","title":"Fetching e-mail","text":"<p>Paperless automatically fetches your e-mail every 10 minutes by default. If you want to invoke the email consumer manually, call the following management command:</p> <pre><code>mail_fetcher\n</code></pre> <p>The command takes no arguments and processes all your mail accounts and rules.</p> <p>Note</p> <p>As of October 2022 Microsoft no longer supports IMAP authentication for Exchange servers, thus Exchange is no longer supported until a solution is implemented in the Python IMAP library used by Paperless. See learn.microsoft.com</p>"},{"location":"administration/#archiver","title":"Creating archived documents","text":"<p>Paperless stores archived PDF/A documents alongside your original documents. These archived documents will also contain selectable text for image-only originals. These documents are derived from the originals, which are always stored unmodified. If coming from an earlier version of paperless, your documents won't have archived versions.</p> <p>This command creates PDF/A documents for your documents.</p> <pre><code>document_archiver --overwrite --document &lt;id&gt;\n</code></pre> <p>This command will only attempt to create archived documents when no archived document exists yet, unless <code>--overwrite</code> is specified. If <code>--document &lt;id&gt;</code> is specified, the archiver will only process that document.</p> <p>Note</p> <p>This command essentially performs OCR on all your documents again, according to your settings. If you run this with <code>PAPERLESS_OCR_MODE=redo</code>, it will potentially run for a very long time. You can cancel the command at any time, since this command will skip already archived versions the next time it is run.</p> <p>Note</p> <p>Some documents will cause errors and cannot be converted into PDF/A documents, such as encrypted PDF documents. The archiver will skip over these documents each time it sees them.</p>"},{"location":"administration/#encryption","title":"Managing encryption","text":"<p>Documents can be stored in Paperless using GnuPG encryption.</p> <p>Warning</p> <p>Encryption is deprecated since paperless-ng 0.9 and doesn't really provide any additional security, since you have to store the passphrase in a configuration file on the same system as the encrypted documents for paperless to work. Furthermore, the entire text content of the documents is stored plain in the database, even if your documents are encrypted. Filenames are not encrypted as well.</p> <p>Also, the web server provides transparent access to your encrypted documents.</p> <p>Consider running paperless on an encrypted filesystem instead, which will then at least provide security against physical hardware theft.</p>"},{"location":"administration/#enabling-encryption","title":"Enabling encryption","text":"<p>Enabling encryption is no longer supported.</p>"},{"location":"administration/#disabling-encryption","title":"Disabling encryption","text":"<p>Basic usage to disable encryption of your document store:</p> <p>(Note: If <code>PAPERLESS_PASSPHRASE</code> isn't set already, you need to specify it here)</p> <pre><code>decrypt_documents [--passphrase SECR3TP4SSPHRA$E]\n</code></pre>"},{"location":"advanced_usage/","title":"Advanced Topics","text":"<p>Paperless offers a couple features that automate certain tasks and make your life easier.</p>"},{"location":"advanced_usage/#matching","title":"Matching tags, correspondents, document types, and storage paths","text":"<p>Paperless will compare the matching algorithms defined by every tag, correspondent, document type, and storage path in your database to see if they apply to the text in a document. In other words, if you define a tag called <code>Home Utility</code> that had a <code>match</code> property of <code>bc hydro</code> and a <code>matching_algorithm</code> of <code>literal</code>, Paperless will automatically tag your newly-consumed document with your <code>Home Utility</code> tag so long as the text <code>bc hydro</code> appears in the body of the document somewhere.</p> <p>The matching logic is quite powerful. It supports searching the text of your document with different algorithms, and as such, some experimentation may be necessary to get things right.</p> <p>In order to have a tag, correspondent, document type, or storage path assigned automatically to newly consumed documents, assign a match and matching algorithm using the web interface. These settings define when to assign tags, correspondents, document types, and storage paths to documents.</p> <p>The following algorithms are available:</p> <ul> <li>Any: Looks for any occurrence of any word provided in match in   the PDF. If you define the match as <code>Bank1 Bank2</code>, it will match   documents containing either of these terms.</li> <li>All: Requires that every word provided appears in the PDF,   albeit not in the order provided.</li> <li>Literal: Matches only if the match appears exactly as provided   (i.e. preserve ordering) in the PDF.</li> <li>Regular expression: Parses the match as a regular expression and   tries to find a match within the document.</li> <li>Fuzzy match: I don't know. Look at the source.</li> <li>Auto: Tries to automatically match new documents. This does not   require you to set a match. See the notes below.</li> </ul> <p>When using the any or all matching algorithms, you can search for terms that consist of multiple words by enclosing them in double quotes. For example, defining a match text of <code>\"Bank of America\" BofA</code> using the any algorithm, will match documents that contain either \"Bank of America\" or \"BofA\", but will not match documents containing \"Bank of South America\".</p> <p>Then just save your tag, correspondent, document type, or storage path and run another document through the consumer. Once complete, you should see the newly-created document, automatically tagged with the appropriate data.</p>"},{"location":"advanced_usage/#automatic-matching","title":"Automatic matching","text":"<p>Paperless-ngx comes with a new matching algorithm called Auto. This matching algorithm tries to assign tags, correspondents, document types, and storage paths to your documents based on how you have already assigned these on existing documents. It uses a neural network under the hood.</p> <p>If, for example, all your bank statements of your account 123 at the Bank of America are tagged with the tag \"bofa123\" and the matching algorithm of this tag is set to Auto, this neural network will examine your documents and automatically learn when to assign this tag.</p> <p>Paperless tries to hide much of the involved complexity with this approach. However, there are a couple caveats you need to keep in mind when using this feature:</p> <ul> <li>Changes to your documents are not immediately reflected by the   matching algorithm. The neural network needs to be trained on your   documents after changes. Paperless periodically (default: once each   hour) checks for changes and does this automatically for you.</li> <li>The Auto matching algorithm only takes documents into account which   are NOT placed in your inbox (i.e. have any inbox tags assigned to   them). This ensures that the neural network only learns from   documents which you have correctly tagged before.</li> <li>The matching algorithm can only work if there is a correlation   between the tag, correspondent, document type, or storage path and   the document itself. Your bank statements usually contain your bank   account number and the name of the bank, so this works reasonably   well, However, tags such as \"TODO\" cannot be automatically   assigned.</li> <li>The matching algorithm needs a reasonable number of documents to   identify when to assign tags, correspondents, storage paths, and   types. If one out of a thousand documents has the correspondent   \"Very obscure web shop I bought something five years ago\", it will   probably not assign this correspondent automatically if you buy   something from them again. The more documents, the better.</li> <li>Paperless also needs a reasonable amount of negative examples to   decide when not to assign a certain tag, correspondent, document   type, or storage path. This will usually be the case as you start   filling up paperless with documents. Example: If all your documents   are either from \"Webshop\" and \"Bank\", paperless will assign one   of these correspondents to ANY new document, if both are set to   automatic matching.</li> </ul>"},{"location":"advanced_usage/#consume-hooks","title":"Hooking into the consumption process","text":"<p>Sometimes you may want to do something arbitrary whenever a document is consumed. Rather than try to predict what you may want to do, Paperless lets you execute scripts of your own choosing just before or after a document is consumed using a couple simple hooks.</p> <p>Just write a script, put it somewhere that Paperless can read &amp; execute, and then put the path to that script in <code>paperless.conf</code> or <code>docker-compose.env</code> with the variable name of either <code>PAPERLESS_PRE_CONSUME_SCRIPT</code> or <code>PAPERLESS_POST_CONSUME_SCRIPT</code>.</p> <p>Info</p> <p>These scripts are executed in a blocking process, which means that if a script takes a long time to run, it can significantly slow down your document consumption flow. If you want things to run asynchronously, you'll have to fork the process in your script and exit.</p>"},{"location":"advanced_usage/#pre-consume-script","title":"Pre-consumption script","text":"<p>Executed after the consumer sees a new document in the consumption folder, but before any processing of the document is performed. This script can access the following relevant environment variables set:</p> Environment Variable Description <code>DOCUMENT_SOURCE_PATH</code> Original path of the consumed document <code>DOCUMENT_WORKING_PATH</code> Path to a copy of the original that consumption will work on <p>Note</p> <p>Pre-consume scripts which modify the document should only change the <code>DOCUMENT_WORKING_PATH</code> file or a second consume task may be triggered, leading to failures as two tasks work on the same document path</p> <p>A simple but common example for this would be creating a simple script like this:</p> <p><code>/usr/local/bin/ocr-pdf</code></p> <pre><code>#!/usr/bin/env bash\npdf2pdfocr.py -i ${DOCUMENT_WORKING_PATH}\n</code></pre> <p><code>/etc/paperless.conf</code></p> <pre><code>...\nPAPERLESS_PRE_CONSUME_SCRIPT=\"/usr/local/bin/ocr-pdf\"\n...\n</code></pre> <p>This will pass the path to the document about to be consumed to <code>/usr/local/bin/ocr-pdf</code>, which will in turn call pdf2pdfocr.py on your document, which will then overwrite the file with an OCR'd version of the file and exit. At which point, the consumption process will begin with the newly modified file.</p> <p>The script's stdout and stderr will be logged line by line to the webserver log, along with the exit code of the script.</p>"},{"location":"advanced_usage/#post-consume-script","title":"Post-consumption script","text":"<p>Executed after the consumer has successfully processed a document and has moved it into paperless. It receives the following environment variables:</p> Environment Variable Description <code>DOCUMENT_ID</code> Database primary key of the document <code>DOCUMENT_FILE_NAME</code> Formatted filename, not including paths <code>DOCUMENT_CREATED</code> Date &amp; time when document created <code>DOCUMENT_MODIFIED</code> Date &amp; time when document was last modified <code>DOCUMENT_ADDED</code> Date &amp; time when document was added <code>DOCUMENT_SOURCE_PATH</code> Path to the original document file <code>DOCUMENT_ARCHIVE_PATH</code> Path to the generate archive file (if any) <code>DOCUMENT_THUMBNAIL_PATH</code> Path to the generated thumbnail <code>DOCUMENT_DOWNLOAD_URL</code> URL for document download <code>DOCUMENT_THUMBNAIL_URL</code> URL for the document thumbnail <code>DOCUMENT_CORRESPONDENT</code> Assigned correspondent (if any) <code>DOCUMENT_TAGS</code> Comma separated list of tags applied (if any) <code>DOCUMENT_ORIGINAL_FILENAME</code> Filename of original document <p>The script can be in any language, A simple shell script example:</p> post-consumption-example<pre><code>#!/usr/bin/env bash\necho \"\nA document with an id of ${DOCUMENT_ID} was just consumed.  I know the\nfollowing additional information about it:\n* Generated File Name: ${DOCUMENT_FILE_NAME}\n* Archive Path: ${DOCUMENT_ARCHIVE_PATH}\n* Source Path: ${DOCUMENT_SOURCE_PATH}\n* Created: ${DOCUMENT_CREATED}\n* Added: ${DOCUMENT_ADDED}\n* Modified: ${DOCUMENT_MODIFIED}\n* Thumbnail Path: ${DOCUMENT_THUMBNAIL_PATH}\n* Download URL: ${DOCUMENT_DOWNLOAD_URL}\n* Thumbnail URL: ${DOCUMENT_THUMBNAIL_URL}\n* Correspondent: ${DOCUMENT_CORRESPONDENT}\n* Tags: ${DOCUMENT_TAGS}\nIt was consumed with the passphrase ${PASSPHRASE}\n\"\n</code></pre> <p>Note</p> <p>The post consumption script cannot cancel the consumption process.</p> <p>Warning</p> <p>The post consumption script should not modify the document files directly</p> <p>The script's stdout and stderr will be logged line by line to the webserver log, along with the exit code of the script.</p>"},{"location":"advanced_usage/#docker-consume-hooks","title":"Docker","text":"<p>To hook into the consumption process when using Docker, you will need to pass the scripts into the container via a host mount in your <code>docker-compose.yml</code>.</p> <p>Assuming you have <code>/home/paperless-ngx/scripts/post-consumption-example.sh</code> as a script which you'd like to run.</p> <p>You can pass that script into the consumer container via a host mount:</p> <pre><code>...\nwebserver:\n...\nvolumes:\n...\n- /home/paperless-ngx/scripts:/path/in/container/scripts/ # (1)!\nenvironment: # (3)!\n...\nPAPERLESS_POST_CONSUME_SCRIPT: /path/in/container/scripts/post-consumption-example.sh # (2)!\n...\n</code></pre> <ol> <li>The external scripts directory is mounted to a location inside the container.</li> <li>The internal location of the script is used to set the script to run</li> <li>This can also be set in <code>docker-compose.env</code></li> </ol> <p>Troubleshooting:</p> <ul> <li>Monitor the docker-compose log   <code>cd ~/paperless-ngx; docker-compose logs -f</code></li> <li>Check your script's permission e.g. in case of permission error   <code>sudo chmod 755 post-consumption-example.sh</code></li> <li>Pipe your scripts's output to a log file e.g.   <code>echo \"${DOCUMENT_ID}\" | tee --append /usr/src/paperless/scripts/post-consumption-example.log</code></li> </ul>"},{"location":"advanced_usage/#file-name-handling","title":"File name handling","text":"<p>By default, paperless stores your documents in the media directory and renames them using the identifier which it has assigned to each document. You will end up getting files like <code>0000123.pdf</code> in your media directory. This isn't necessarily a bad thing, because you normally don't have to access these files manually. However, if you wish to name your files differently, you can do that by adjusting the <code>PAPERLESS_FILENAME_FORMAT</code> configuration option. Paperless adds the correct file extension e.g. <code>.pdf</code>, <code>.jpg</code> automatically.</p> <p>This variable allows you to configure the filename (folders are allowed) using placeholders. For example, configuring this to</p> <pre><code>PAPERLESS_FILENAME_FORMAT={created_year}/{correspondent}/{title}\n</code></pre> <p>will create a directory structure as follows:</p> <pre><code>2019/\n  My bank/\n    Statement January.pdf\n    Statement February.pdf\n2020/\n  My bank/\n    Statement January.pdf\n    Letter.pdf\n    Letter_01.pdf\n  Shoe store/\n    My new shoes.pdf\n</code></pre> <p>Warning</p> <p>Do not manually move your files in the media folder. Paperless remembers the last filename a document was stored as. If you do rename a file, paperless will report your files as missing and won't be able to find them.</p> <p>Paperless provides the following placeholders within filenames:</p> <ul> <li><code>{asn}</code>: The archive serial number of the document, or \"none\".</li> <li><code>{correspondent}</code>: The name of the correspondent, or \"none\".</li> <li><code>{document_type}</code>: The name of the document type, or \"none\".</li> <li><code>{tag_list}</code>: A comma separated list of all tags assigned to the   document.</li> <li><code>{title}</code>: The title of the document.</li> <li><code>{created}</code>: The full date (ISO format) the document was created.</li> <li><code>{created_year}</code>: Year created only, formatted as the year with   century.</li> <li><code>{created_year_short}</code>: Year created only, formatted as the year   without century, zero padded.</li> <li><code>{created_month}</code>: Month created only (number 01-12).</li> <li><code>{created_month_name}</code>: Month created name, as per locale</li> <li><code>{created_month_name_short}</code>: Month created abbreviated name, as per   locale</li> <li><code>{created_day}</code>: Day created only (number 01-31).</li> <li><code>{added}</code>: The full date (ISO format) the document was added to   paperless.</li> <li><code>{added_year}</code>: Year added only.</li> <li><code>{added_year_short}</code>: Year added only, formatted as the year without   century, zero padded.</li> <li><code>{added_month}</code>: Month added only (number 01-12).</li> <li><code>{added_month_name}</code>: Month added name, as per locale</li> <li><code>{added_month_name_short}</code>: Month added abbreviated name, as per   locale</li> <li><code>{added_day}</code>: Day added only (number 01-31).</li> </ul> <p>Paperless will try to conserve the information from your database as much as possible. However, some characters that you can use in document titles and correspondent names (such as <code>: \\ /</code> and a couple more) are not allowed in filenames and will be replaced with dashes.</p> <p>If paperless detects that two documents share the same filename, paperless will automatically append <code>_01</code>, <code>_02</code>, etc to the filename. This happens if all the placeholders in a filename evaluate to the same value.</p> <p>Tip</p> <p>You can affect how empty placeholders are treated by changing the following setting to <code>true</code>.</p> <pre><code>PAPERLESS_FILENAME_FORMAT_REMOVE_NONE=True\n</code></pre> <p>Doing this results in all empty placeholders resolving to \"\" instead of \"none\" as stated above. Spaces before empty placeholders are removed as well, empty directories are omitted.</p> <p>Tip</p> <p>Paperless checks the filename of a document whenever it is saved. Therefore, you need to update the filenames of your documents and move them after altering this setting by invoking the <code>document renamer</code>.</p> <p>Warning</p> <p>Make absolutely sure you get the spelling of the placeholders right, or else paperless will use the default naming scheme instead.</p> <p>Caution</p> <p>As of now, you could totally tell paperless to store your files anywhere outside the media directory by setting</p> <pre><code>PAPERLESS_FILENAME_FORMAT=../../my/custom/location/{title}\n</code></pre> <p>However, keep in mind that inside docker, if files get stored outside of the predefined volumes, they will be lost after a restart of paperless.</p> <p>Warning</p> <p>When file naming handling, in particular when using <code>{tag_list}</code>, you may run into the limits of your operating system's maximum path lengths.  Files will retain the previous path instead and the issue logged.</p>"},{"location":"advanced_usage/#storage-paths","title":"Storage paths","text":"<p>One of the best things in Paperless is that you can not only access the documents via the web interface, but also via the file system.</p> <p>When as single storage layout is not sufficient for your use case, storage paths come to the rescue. Storage paths allow you to configure more precisely where each document is stored in the file system.</p> <ul> <li>Each storage path is a <code>PAPERLESS_FILENAME_FORMAT</code> and   follows the rules described above</li> <li>Each document is assigned a storage path using the matching   algorithms described above, but can be overwritten at any time</li> </ul> <p>For example, you could define the following two storage paths:</p> <ol> <li>Normal communications are put into a folder structure sorted by     <code>year/correspondent</code></li> <li>Communications with insurance companies are stored in a flat     structure with longer file names, but containing the full date of     the correspondence.</li> </ol> <pre><code>By Year = {created_year}/{correspondent}/{title}\nInsurances = Insurances/{correspondent}/{created_year}-{created_month}-{created_day} {title}\n</code></pre> <p>If you then map these storage paths to the documents, you might get the following result. For simplicity, <code>By Year</code> defines the same structure as in the previous example above.</p> <pre><code>2019/                                   # By Year\n   My bank/\n     Statement January.pdf\n     Statement February.pdf\n\n Insurances/                           # Insurances\n   Healthcare 123/\n     2022-01-01 Statement January.pdf\n     2022-02-02 Letter.pdf\n     2022-02-03 Letter.pdf\n   Dental 456/\n     2021-12-01 New Conditions.pdf\n</code></pre> <p>Tip</p> <p>Defining a storage path is optional. If no storage path is defined for a document, the global <code>PAPERLESS_FILENAME_FORMAT</code> is applied.</p> <p>Warning</p> <p>If you adjust the format of an existing storage path, old documents don't get relocated automatically. You need to run the document renamer to adjust their paths.</p>"},{"location":"advanced_usage/#celery-monitoring","title":"Celery Monitoring","text":"<p>The monitoring tool Flower can be used to view more detailed information about the health of the celery workers used for asynchronous tasks. This includes details on currently running, queued and completed tasks, timing and more. Flower can also be used with Prometheus, as it exports metrics. For details on its capabilities, refer to the Flower documentation.</p> <p>To configure Flower further, create a <code>flowerconfig.py</code> and place it into the <code>src/paperless</code> directory. For a Docker installation, you can use volumes to accomplish this:</p> <pre><code>services:\n# ...\nwebserver:\nports:\n- 5555:5555 # (2)!\n# ...\nvolumes:\n- /path/to/my/flowerconfig.py:/usr/src/paperless/src/paperless/flowerconfig.py:ro # (1)!\n</code></pre> <ol> <li>Note the <code>:ro</code> tag means the file will be mounted as read only.</li> <li><code>flower</code> runs by default on port 5555, but this can be configured</li> </ol>"},{"location":"advanced_usage/#custom-container-initialization","title":"Custom Container Initialization","text":"<p>The Docker image includes the ability to run custom user scripts during startup. This could be utilized for installing additional tools or Python packages, for example. Scripts are expected to be shell scripts.</p> <p>To utilize this, mount a folder containing your scripts to the custom initialization directory, <code>/custom-cont-init.d</code> and place scripts you wish to run inside. For security, the folder must be owned by <code>root</code> and should have permissions of <code>a=rx</code>. Additionally, scripts must only be writable by <code>root</code>.</p> <p>Your scripts will be run directly before the webserver completes startup. Scripts will be run by the <code>root</code> user. If you would like to switch users, the utility <code>gosu</code> is available and preferred over <code>sudo</code>.</p> <p>This is an advanced functionality with which you could break functionality or lose data. If you experience issues, please disable any custom scripts and try again before reporting an issue.</p> <p>For example, using Docker Compose:</p> <pre><code>services:\n# ...\nwebserver:\n# ...\nvolumes:\n- /path/to/my/scripts:/custom-cont-init.d:ro # (1)!\n</code></pre> <ol> <li>Note the <code>:ro</code> tag means the folder will be mounted as read only. This is for extra security against changes</li> </ol>"},{"location":"advanced_usage/#mysql-caveats","title":"MySQL Caveats","text":""},{"location":"advanced_usage/#case-sensitivity","title":"Case Sensitivity","text":"<p>The database interface does not provide a method to configure a MySQL database to be case sensitive. This would prevent a user from creating a tag <code>Name</code> and <code>NAME</code> as they are considered the same.</p> <p>Per Django documentation, to enable this requires manual intervention. To enable case sensetive tables, you can execute the following command against each table:</p> <p><code>ALTER TABLE &lt;table_name&gt; CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</code></p> <p>You can also set the default for new tables (this does NOT affect existing tables) with:</p> <p><code>ALTER DATABASE &lt;db_name&gt; CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</code></p> <p>Warning</p> <p>Using mariadb version 10.4+ is recommended. Using the <code>utf8mb3</code> character set on an older system may fix issues that can arise while setting up Paperless-ngx but <code>utf8mb3</code> can cause issues with consumption (where <code>utf8mb4</code> does not).</p>"},{"location":"api/","title":"The REST API","text":"<p>Paperless makes use of the Django REST Framework standard API interface. It provides a browsable API for most of its endpoints, which you can inspect at <code>http://&lt;paperless-host&gt;:&lt;port&gt;/api/</code>. This also documents most of the available filters and ordering fields.</p> <p>The API provides 7 main endpoints:</p> <ul> <li><code>/api/documents/</code>: Full CRUD support, except POSTing new documents.   See below.</li> <li><code>/api/correspondents/</code>: Full CRUD support.</li> <li><code>/api/document_types/</code>: Full CRUD support.</li> <li><code>/api/logs/</code>: Read-Only.</li> <li><code>/api/tags/</code>: Full CRUD support.</li> <li><code>/api/mail_accounts/</code>: Full CRUD support.</li> <li><code>/api/mail_rules/</code>: Full CRUD support.</li> </ul> <p>All of these endpoints except for the logging endpoint allow you to fetch, edit and delete individual objects by appending their primary key to the path, for example <code>/api/documents/454/</code>.</p> <p>The objects served by the document endpoint contain the following fields:</p> <ul> <li><code>id</code>: ID of the document. Read-only.</li> <li><code>title</code>: Title of the document.</li> <li><code>content</code>: Plain text content of the document.</li> <li><code>tags</code>: List of IDs of tags assigned to this document, or empty   list.</li> <li><code>document_type</code>: Document type of this document, or null.</li> <li><code>correspondent</code>: Correspondent of this document or null.</li> <li><code>created</code>: The date time at which this document was created.</li> <li><code>created_date</code>: The date (YYYY-MM-DD) at which this document was   created. Optional. If also passed with created, this is ignored.</li> <li><code>modified</code>: The date at which this document was last edited in   paperless. Read-only.</li> <li><code>added</code>: The date at which this document was added to paperless.   Read-only.</li> <li><code>archive_serial_number</code>: The identifier of this document in a   physical document archive.</li> <li><code>original_file_name</code>: Verbose filename of the original document.   Read-only.</li> <li><code>archived_file_name</code>: Verbose filename of the archived document.   Read-only. Null if no archived document is available.</li> </ul>"},{"location":"api/#downloading-documents","title":"Downloading documents","text":"<p>In addition to that, the document endpoint offers these additional actions on individual documents:</p> <ul> <li><code>/api/documents/&lt;pk&gt;/download/</code>: Download the document.</li> <li><code>/api/documents/&lt;pk&gt;/preview/</code>: Display the document inline, without   downloading it.</li> <li><code>/api/documents/&lt;pk&gt;/thumb/</code>: Download the PNG thumbnail of a   document.</li> </ul> <p>Paperless generates archived PDF/A documents from consumed files and stores both the original files as well as the archived files. By default, the endpoints for previews and downloads serve the archived file, if it is available. Otherwise, the original file is served. Some document cannot be archived.</p> <p>The endpoints correctly serve the response header fields <code>Content-Disposition</code> and <code>Content-Type</code> to indicate the filename for download and the type of content of the document.</p> <p>In order to download or preview the original document when an archived document is available, supply the query parameter <code>original=true</code>.</p> <p>Tip</p> <p>Paperless used to provide these functionality at <code>/fetch/&lt;pk&gt;/preview</code>, <code>/fetch/&lt;pk&gt;/thumb</code> and <code>/fetch/&lt;pk&gt;/doc</code>. Redirects to the new URLs are in place. However, if you use these old URLs to access documents, you should update your app or script to use the new URLs.</p>"},{"location":"api/#getting-document-metadata","title":"Getting document metadata","text":"<p>The api also has an endpoint to retrieve read-only metadata about specific documents. this information is not served along with the document objects, since it requires reading files and would therefore slow down document lists considerably.</p> <p>Access the metadata of a document with an ID <code>id</code> at <code>/api/documents/&lt;id&gt;/metadata/</code>.</p> <p>The endpoint reports the following data:</p> <ul> <li><code>original_checksum</code>: MD5 checksum of the original document.</li> <li><code>original_size</code>: Size of the original document, in bytes.</li> <li><code>original_mime_type</code>: Mime type of the original document.</li> <li><code>media_filename</code>: Current filename of the document, under which it   is stored inside the media directory.</li> <li><code>has_archive_version</code>: True, if this document is archived, false   otherwise.</li> <li><code>original_metadata</code>: A list of metadata associated with the original   document. See below.</li> <li><code>archive_checksum</code>: MD5 checksum of the archived document, or null.</li> <li><code>archive_size</code>: Size of the archived document in bytes, or null.</li> <li><code>archive_metadata</code>: Metadata associated with the archived document,   or null. See below.</li> </ul> <p>File metadata is reported as a list of objects in the following form:</p> <pre><code>[\n{\n\"namespace\": \"http://ns.adobe.com/pdf/1.3/\",\n\"prefix\": \"pdf\",\n\"key\": \"Producer\",\n\"value\": \"SparklePDF, Fancy edition\"\n}\n]\n</code></pre> <p><code>namespace</code> and <code>prefix</code> can be null. The actual metadata reported depends on the file type and the metadata available in that specific document. Paperless only reports PDF metadata at this point.</p>"},{"location":"api/#authorization","title":"Authorization","text":"<p>The REST api provides three different forms of authentication.</p> <ol> <li> <p>Basic authentication</p> <p>Authorize by providing a HTTP header in the form</p> <pre><code>Authorization: Basic &lt;credentials&gt;\n</code></pre> <p>where <code>credentials</code> is a base64-encoded string of <code>&lt;username&gt;:&lt;password&gt;</code></p> </li> <li> <p>Session authentication</p> <p>When you're logged into paperless in your browser, you're automatically logged into the API as well and don't need to provide any authorization headers.</p> </li> <li> <p>Token authentication</p> <p>Paperless also offers an endpoint to acquire authentication tokens.</p> <p>POST a username and password as a form or json string to <code>/api/token/</code> and paperless will respond with a token, if the login data is correct. This token can be used to authenticate other requests with the following HTTP header:</p> <pre><code>Authorization: Token &lt;token&gt;\n</code></pre> <p>Tokens can be managed and revoked in the paperless admin.</p> </li> </ol>"},{"location":"api/#searching-for-documents","title":"Searching for documents","text":"<p>Full text searching is available on the <code>/api/documents/</code> endpoint. Two specific query parameters cause the API to return full text search results:</p> <ul> <li><code>/api/documents/?query=your%20search%20query</code>: Search for a document   using a full text query. For details on the syntax, see Basic Usage - Searching.</li> <li><code>/api/documents/?more_like=1234</code>: Search for documents similar to   the document with id 1234.</li> </ul> <p>Pagination works exactly the same as it does for normal requests on this endpoint.</p> <p>Certain limitations apply to full text queries:</p> <ul> <li>Results are always sorted by search score. The results matching the   query best will show up first.</li> <li>Only a small subset of filtering parameters are supported.</li> </ul> <p>Furthermore, each returned document has an additional <code>__search_hit__</code> attribute with various information about the search results:</p> <pre><code>{\n    \"count\": 31,\n    \"next\": \"http://localhost:8000/api/documents/?page=2&amp;query=test\",\n    \"previous\": null,\n    \"results\": [\n\n        ...\n\n        {\n            \"id\": 123,\n            \"title\": \"title\",\n            \"content\": \"content\",\n\n            ...\n\n            \"__search_hit__\": {\n                \"score\": 0.343,\n                \"highlights\": \"text &lt;span class=\"match\"&gt;Test&lt;/span&gt; text\",\n                \"rank\": 23\n            }\n        },\n\n        ...\n\n    ]\n}\n</code></pre> <ul> <li><code>score</code> is an indication how well this document matches the query   relative to the other search results.</li> <li><code>highlights</code> is an excerpt from the document content and highlights   the search terms with <code>&lt;span&gt;</code> tags as shown above.</li> <li><code>rank</code> is the index of the search results. The first result will   have rank 0.</li> </ul>"},{"location":"api/#apisearchautocomplete","title":"<code>/api/search/autocomplete/</code>","text":"<p>Get auto completions for a partial search term.</p> <p>Query parameters:</p> <ul> <li><code>term</code>: The incomplete term.</li> <li><code>limit</code>: Amount of results. Defaults to 10.</li> </ul> <p>Results returned by the endpoint are ordered by importance of the term in the document index. The first result is the term that has the highest Tf/Idf score in the index.</p> <pre><code>[\"term1\", \"term3\", \"term6\", \"term4\"]\n</code></pre>"},{"location":"api/#file-uploads","title":"POSTing documents","text":"<p>The API provides a special endpoint for file uploads:</p> <p><code>/api/documents/post_document/</code></p> <p>POST a multipart form to this endpoint, where the form field <code>document</code> contains the document that you want to upload to paperless. The filename is sanitized and then used to store the document in a temporary directory, and the consumer will be instructed to consume the document from there.</p> <p>The endpoint supports the following optional form fields:</p> <ul> <li><code>title</code>: Specify a title that the consumer should use for the   document.</li> <li><code>created</code>: Specify a DateTime where the document was created (e.g.   \"2016-04-19\" or \"2016-04-19 06:15:00+02:00\").</li> <li><code>correspondent</code>: Specify the ID of a correspondent that the consumer   should use for the document.</li> <li><code>document_type</code>: Similar to correspondent.</li> <li><code>tags</code>: Similar to correspondent. Specify this multiple times to   have multiple tags added to the document.</li> </ul> <p>The endpoint will immediately return \"OK\" if the document consumption process was started successfully. No additional status information about the consumption process itself is available, since that happens in a different process.</p>"},{"location":"api/#api-versioning","title":"API Versioning","text":"<p>The REST API is versioned since Paperless-ngx 1.3.0.</p> <ul> <li>Versioning ensures that changes to the API don't break older   clients.</li> <li>Clients specify the specific version of the API they wish to use   with every request and Paperless will handle the request using the   specified API version.</li> <li>Even if the underlying data model changes, older API versions will   always serve compatible data.</li> <li>If no version is specified, Paperless will serve version 1 to ensure   compatibility with older clients that do not request a specific API   version.</li> </ul> <p>API versions are specified by submitting an additional HTTP <code>Accept</code> header with every request:</p> <pre><code>Accept: application/json; version=6\n</code></pre> <p>If an invalid version is specified, Paperless 1.3.0 will respond with \"406 Not Acceptable\" and an error message in the body. Earlier versions of Paperless will serve API version 1 regardless of whether a version is specified via the <code>Accept</code> header.</p> <p>If a client wishes to verify whether it is compatible with any given server, the following procedure should be performed:</p> <ol> <li> <p>Perform an authenticated request against any API endpoint. If the     server is on version 1.3.0 or newer, the server will add two custom     headers to the response:</p> <pre><code>X-Api-Version: 2\nX-Version: 1.3.0\n</code></pre> </li> <li> <p>Determine whether the client is compatible with this server based on     the presence/absence of these headers and their values if present.</p> </li> </ol>"},{"location":"api/#api-changelog","title":"API Changelog","text":""},{"location":"api/#version-1","title":"Version 1","text":"<p>Initial API version.</p>"},{"location":"api/#version-2","title":"Version 2","text":"<ul> <li>Added field <code>Tag.color</code>. This read/write string field contains a hex   color such as <code>#a6cee3</code>.</li> <li>Added read-only field <code>Tag.text_color</code>. This field contains the text   color to use for a specific tag, which is either black or white   depending on the brightness of <code>Tag.color</code>.</li> <li>Removed field <code>Tag.colour</code>.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#paperless-ngx-1130","title":"paperless-ngx 1.13.0","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Feature: allow disable warn on close saved view with changes @shamoon (#2681)</li> <li>Feature: Add option to enable response compression @stumpylog (#2621)</li> <li>Feature: split documents on ASN barcode @muued (#2554)</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix: Ignore path filtering didn't handle sub directories @stumpylog (#2674)</li> <li>Bugfix: Generation of secret key hangs during install script @stumpylog (#2657)</li> <li>Fix: Remove files produced by barcode splitting when completed @stumpylog (#2648)</li> <li>Fix: add missing storage path placeholders @shamoon (#2651)</li> <li>Fix long dropdown contents break document detail column view @shamoon (#2638)</li> <li>Fix: tags dropdown should stay closed when removing @shamoon (#2625)</li> <li>Bugfix: Configure scheduled tasks to expire after some time @stumpylog (#2614)</li> <li>Bugfix: Limit management list pagination maxSize to 5 @Kaaybi (#2618)</li> <li>Fix: Don't crash on bad ASNs during indexing @stumpylog (#2586)</li> <li>Fix: Prevent mktime OverflowError except in even more rare caes @stumpylog (#2574)</li> <li>Bugfix: Whoosh relative date queries weren't handling timezones @stumpylog (#2566)</li> <li>Fix importing files with non-ascii names @Kexogg (#2555)</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Chore: update recommended Gotenberg to 7.8, docs note possible incompatibility @shamoon (#2608)</li> <li>[Documentation] Add v1.12.2 changelog @github-actions (#2553)</li> </ul>"},{"location":"changelog/#maintenance","title":"Maintenance","text":"<ul> <li>Chore: Faster Docker image cleanup @stumpylog (#2687)</li> <li>Chore: Remove duplicated folder @stumpylog (#2561)</li> <li>Chore: Switch test coverage to Codecov @stumpylog (#2582)</li> <li>Bump docker/build-push-action from 3 to 4 @dependabot (#2576)</li> <li> <p>Chore: Run tests which require convert in the CI @stumpylog (#2570)</p> </li> <li> <p>Feature: split documents on ASN barcode @muued (#2554)</p> </li> <li>Bugfix: Whoosh relative date queries weren't handling timezones @stumpylog (#2566)</li> <li>Fix importing files with non-ascii names @Kexogg (#2555)</li> </ul>"},{"location":"changelog/#paperless-ngx-1122","title":"paperless-ngx 1.12.2","text":"<p>Note: Version 1.12.x introduced searching of comments which will work for comments added after the upgrade but a reindex of the search index is required in order to be able to search older comments. The Docker image will automatically perform this reindex, bare metal installations will have to perform this manually, see the docs.</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Bugfix: Allow pre-consume scripts to modify incoming file @stumpylog (#2547)</li> <li>Bugfix: Return to page based barcode scanning @stumpylog (#2544)</li> <li>Fix: Try to prevent title debounce overwriting @shamoon (#2543)</li> <li>Fix comment search highlight + multi-word search @shamoon (#2542)</li> <li>Bugfix: Request PDF/A format from Gotenberg @stumpylog (#2530)</li> <li>Fix: Trigger reindex for pre-existing comments @shamoon (#2519)</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Bugfix: Allow pre-consume scripts to modify incoming file @stumpylog (#2547)</li> <li>Fix: Trigger reindex for pre-existing comments @shamoon (#2519)</li> <li>Minor updates to development documentation @clemensrieder (#2474)</li> <li>[Documentation] Add v1.12.1 changelog @github-actions (#2515)</li> </ul>"},{"location":"changelog/#maintenance_1","title":"Maintenance","text":"<ul> <li>Chore: Fix tag cleaner to work with attestations @stumpylog (#2532)</li> <li>Chore: Make installers statically versioned @stumpylog (#2517)</li> </ul>"},{"location":"changelog/#all-app-changes","title":"All App Changes","text":"<ul> <li>Bugfix: Allow pre-consume scripts to modify incoming file @stumpylog (#2547)</li> <li>Bugfix: Return to page based barcode scanning @stumpylog (#2544)</li> <li>Fix: Try to prevent title debounce overwriting @shamoon (#2543)</li> <li>Fix comment search highlight + multi-word search @shamoon (#2542)</li> <li>Bugfix: Request PDF/A format from Gotenberg @stumpylog (#2530)</li> </ul>"},{"location":"changelog/#paperless-ngx-1121","title":"paperless-ngx 1.12.1","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix: comments not showing in search until after manual reindex in v1.12 @shamoon (#2513)</li> <li>Fix: date range search broken in 1.12 @shamoon (#2509)</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>[Documentation] Add v1.12.0 changelog @github-actions (#2507)</li> </ul>"},{"location":"changelog/#maintenance_2","title":"Maintenance","text":"<ul> <li>Moves back to the main release-drafter now that it does what we wanted @stumpylog (#2503)</li> </ul>"},{"location":"changelog/#all-app-changes_1","title":"All App Changes","text":"<ul> <li>Fix: comments not showing in search until after manual reindex in v1.12 @shamoon (#2513)</li> <li>Fix: date range search broken in 1.12 @shamoon (#2509)</li> </ul>"},{"location":"changelog/#paperless-ngx-1120","title":"paperless-ngx 1.12.0","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>New document_exporter options @mhelleboid (#2448)</li> <li>Read ASN from barcode on page @peterkappelt (#2437)</li> <li>Add AppleMail color tag support @clemensrieder (#2407)</li> <li>Feature: Retain original filename on upload @stumpylog (#2404)</li> <li>Feature: Control scheduled tasks via cron expressions @stumpylog (#2403)</li> <li>Simplify json parsing in build scripts @tribut (#2370)</li> <li>Feature: include comments in advanced search @shamoon (#2351)</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix: limit asn integer size @shamoon (#2498)</li> <li>Bugfix: Rescales images for better barcode locating @stumpylog (#2468)</li> <li>Fix: fix downgrade migration @shamoon (#2494)</li> <li>Fix: Allow setting mailrule order from frontend @shamoon (#2459)</li> <li>Fix: tag color ordering @shamoon (#2456)</li> <li>Fix: Better Handle arbitrary ISO 8601 strings after celery serializing @shamoon (#2441)</li> <li>Use correct canonical path for nltk_data @amo13 (#2429)</li> <li>Fix: Include optional socket file in release @stumpylog (#2409)</li> <li>Fix: display rtl content in correct direction @shamoon (#2302)</li> <li>Fixed endpoint count in Docs The REST API @PascalSenn (#2386)</li> <li>Fix subpath for websockets @tribut (#2371)</li> <li>Fix: Make missing environment from file files informational only @stumpylog (#2368)</li> <li>Bugfix: Backend tests weren't using correct Python version @stumpylog (#2363)</li> <li>Fix: preview content remains hidden on mobile @shamoon (#2346)</li> <li>Bugfix: Removal of alpha channel truncates multipage TIFFs @stumpylog (#2335)</li> <li>Documentation: update build instructions to remove deprecated @shamoon (#2334)</li> </ul>"},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>Docs: Fix typo - docker-compose.yml file name in setup doc @muli (#2477)</li> <li>document existence of document_thumbnails @frrad (#2470)</li> <li>Add optional sudo command to bare metal docs @shamoon (#2464)</li> <li>Fix link @edenhaus (#2458)</li> <li>Documentation: Fix comment re bare metal runserver command @shamoon (#2420)</li> <li>Fix formatting of config variable in docs @peterkappelt (#2445)</li> <li>Update docs nginx reverse proxy example @Sprinterfreak (#2443)</li> <li>[Documentation] Add note re for dev server @shamoon (#2387)</li> <li>Fixed endpoint count in Docs The REST API @PascalSenn (#2386)</li> <li>[ Docs] Update bare metal setup instructions @natrius (#2281)</li> <li>[Docs] Add Paperless Mobile app to docs @astubenbord (#2378)</li> <li>Tiny spelling change @veverkap (#2369)</li> <li>Documentation: update build instructions to remove deprecated @shamoon (#2334)</li> <li>[Documentation] Add note that PAPERLESS_URL cant contain a path @shamoon (#2319)</li> <li>[Documentation] Add v1.11.3 changelog @github-actions (#2311)</li> </ul>"},{"location":"changelog/#maintenance_3","title":"Maintenance","text":"<ul> <li>Fix: Include optional socket file in release @stumpylog (#2409)</li> <li>Chore: remove helm chart code @shamoon (#2388)</li> <li>Simplify json parsing in build scripts @tribut (#2370)</li> <li>Bugfix: Backend tests weren't using correct Python version @stumpylog (#2363)</li> <li>Bump tj-actions/changed-files from 34 to 35 @dependabot (#2303)</li> </ul>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"4 changes  - Chore: Backend library updates [@stumpylog](https://github.com/stumpylog) ([#2401](https://github.com/paperless-ngx/paperless-ngx/pull/2401)) - Bump tj-actions/changed-files from 34 to 35 [@dependabot](https://github.com/dependabot) ([#2303](https://github.com/paperless-ngx/paperless-ngx/pull/2303)) - Bump [@typescript-eslint/parser from 5.43.0 to 5.47.1 in /src-ui @dependabot](https://github.com/typescript-eslint/parser from 5.43.0 to 5.47.1 in /src-ui @dependabot) ([#2306](https://github.com/paperless-ngx/paperless-ngx/pull/2306)) - Bump [@typescript-eslint/eslint-plugin from 5.43.0 to 5.47.1 in /src-ui @dependabot](https://github.com/typescript-eslint/eslint-plugin from 5.43.0 to 5.47.1 in /src-ui @dependabot) ([#2308](https://github.com/paperless-ngx/paperless-ngx/pull/2308))"},{"location":"changelog/#all-app-changes_2","title":"All App Changes","text":"<ul> <li>New document_exporter options @mhelleboid (#2448)</li> <li>Fix: limit asn integer size @shamoon (#2498)</li> <li>Fix: fix downgrade migration @shamoon (#2494)</li> <li>Read ASN from barcode on page @peterkappelt (#2437)</li> <li>Fix: Allow setting mailrule order from frontend @shamoon (#2459)</li> <li>Chore: Update to Angular 15 \\&amp; associated frontend deps @shamoon (#2411)</li> <li>Fix: tag color ordering @shamoon (#2456)</li> <li>Fix: Better Handle arbitrary ISO 8601 strings after celery serializing @shamoon (#2441)</li> <li>Use correct canonical path for nltk_data @amo13 (#2429)</li> <li>Add AppleMail color tag support @clemensrieder (#2407)</li> <li>Chore: Convert document exporter to use pathlib @stumpylog (#2416)</li> <li>Feature: Retain original filename on upload @stumpylog (#2404)</li> <li>Feature: Control scheduled tasks via cron expressions @stumpylog (#2403)</li> <li>Fix: display rtl content in correct direction @shamoon (#2302)</li> <li>Fix subpath for websockets @tribut (#2371)</li> <li>Bugfix: Backend tests weren't using correct Python version @stumpylog (#2363)</li> <li>Feature: include comments in advanced search @shamoon (#2351)</li> <li>Chore: More frontend tests @shamoon (#2352)</li> <li>Chore: Fixing up some minor annoyances @stumpylog (#2348)</li> <li>Bugfix: Removal of alpha channel truncates multipage TIFFs @stumpylog (#2335)</li> <li>Documentation: update build instructions to remove deprecated @shamoon (#2334)</li> <li>Add Arabic language to frontend @KhaledEmad7 (#2313)</li> <li>Bump @typescript-eslint/parser from 5.43.0 to 5.47.1 in /src-ui @dependabot (#2306)</li> <li>Bump @typescript-eslint/eslint-plugin from 5.43.0 to 5.47.1 in /src-ui @dependabot (#2308)</li> </ul>"},{"location":"changelog/#paperless-ngx-1113","title":"paperless-ngx 1.11.3","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<p>Note: PR #2279 could represent a breaking change to the API which may affect third party applications that were only checking the <code>post_document</code> endpoint for e.g. result = 'OK' as opposed to e.g. HTTP status = 200</p> <ul> <li>Bugfix: Return created task ID when posting document to API @stumpylog (#2279)</li> </ul>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Bugfix: Fix no content when processing some RTL files @stumpylog (#2295)</li> <li>Bugfix: Handle email dates maybe being naive @stumpylog (#2293)</li> <li>Fix: live filterable dropdowns broken in 1.11.x @shamoon (#2292)</li> <li>Bugfix: Reading environment from files didn't work for management commands @stumpylog (#2261)</li> <li>Bugfix: Return created task ID when posting document to API @stumpylog (#2279)</li> </ul>"},{"location":"changelog/#all-app-changes_3","title":"All App Changes","text":"<ul> <li>Bugfix: Fix no content when processing some RTL files @stumpylog (#2295)</li> <li>Bugfix: Handle email dates maybe being naive @stumpylog (#2293)</li> <li>Fix: live filterable dropdowns broken in 1.11.x @shamoon (#2292)</li> <li>Bugfix: Return created task ID when posting document to API @stumpylog (#2279)</li> </ul>"},{"location":"changelog/#paperless-ngx-1112","title":"paperless-ngx 1.11.2","text":"<p>Versions 1.11.1 and 1.11.2 contain bug fixes from v1.11.0 that prevented use of the new email consumption feature</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fix frontend mailrule missing consumption scope parameter @shamoon (#2280)</li> <li>Fix: missing frontend email attachment options @shamoon (#2272)</li> <li>Fix: edit dialog creation in v1.11.0 @shamoon (#2273)</li> </ul>"},{"location":"changelog/#all-app-changes_4","title":"All App Changes","text":"<ul> <li>Fix frontend mailrule missing consumption scope parameter @shamoon (#2280)</li> <li>Fix: missing frontend email attachment options @shamoon (#2272)</li> <li>Fix: edit dialog creation in v1.11.0 @shamoon (#2273)</li> </ul>"},{"location":"changelog/#paperless-ngx-1110","title":"paperless-ngx 1.11.0","text":""},{"location":"changelog/#notable-changes","title":"Notable Changes","text":"<ul> <li>Feature: frontend paperless mail @shamoon (#2000)</li> <li>Feature: Ability to consume mails and eml files @p-h-a-i-l (#848)</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Chore: Downgrade hiredis to 2.0.0 @stumpylog (#2262)</li> <li>Add ability to provide the configuration file path using an env variable @hashworks (#2241)</li> <li>Feature: Adds option to allow a user to export directly to a zipfile @stumpylog (#2004)</li> <li>Feature: Adds PaperlessTask admin page interface @stumpylog (#2184)</li> <li>Feature: speed up frontend by truncating content @shamoon (#2028)</li> <li>Feature: Allow bulk download API to follow file name formatting @stumpylog (#2003)</li> <li>Feature: Bake NLTK into Docker image @stumpylog (#2129)</li> <li>Feature: frontend paperless mail @shamoon (#2000)</li> <li>Feature: Ability to consume mails and eml files @p-h-a-i-l (#848)</li> </ul>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Bugfix: Handle RTL languages better @stumpylog (#1665)</li> <li>Fixed typo in docs @mendelk (#2256)</li> <li>Fix: support in advanced search, fix tags filter badge count for excluded @shamoon (#2205)</li> <li>Bugfix: Don't run system checks on migrate @stumpylog (#2183)</li> <li>Bugfix: Decoding task signals could fail on datetime type @stumpylog (#2058)</li> </ul>"},{"location":"changelog/#documentation_4","title":"Documentation","text":"<ul> <li>Fixed typo in docs @mendelk (#2256)</li> <li>Docs: More fixes and improvements @tooomm (#2203)</li> <li>Docs: Fix leftover issues from conversion @tooomm (#2172)</li> <li>Docs: Fix broken internal links @tooomm (#2165)</li> <li>Update setup.md @Weltraumschaf (#2157)</li> <li>Chore: Cleanup of new documentation @stumpylog (#2137)</li> <li>[Documentation] Add v1.10.2 changelog @github-actions (#2114)</li> </ul>"},{"location":"changelog/#maintenance_4","title":"Maintenance","text":"<ul> <li>Chore: Adds notable label for release drafter @stumpylog (#2200)</li> <li>Chore: Prevent forks from having failing CI runs by default @tooomm (#2166)</li> <li>Chore: migrate to eslint @shamoon (#2199)</li> <li>Feature: Adds PaperlessTask admin page interface @stumpylog (#2184)</li> <li>Chore: Changes qpdf to be cross compiled for large speed up @stumpylog (#2181)</li> <li>Chore: Decrease time to build pikepdf @stumpylog (#2178)</li> <li>Chore: Minor CI cleanups @stumpylog (#2175)</li> </ul>"},{"location":"changelog/#all-app-changes_5","title":"All App Changes","text":"<ul> <li>Add ability to provide the configuration file path using an env variable @hashworks (#2241)</li> <li>Fix: support in advanced search, fix tags filter badge count for excluded @shamoon (#2205)</li> <li>Chore: migrate to eslint @shamoon (#2199)</li> <li>Feature: Adds option to allow a user to export directly to a zipfile @stumpylog (#2004)</li> <li>Feature: Adds PaperlessTask admin page interface @stumpylog (#2184)</li> <li>Bugfix: Decoding task signals could fail on datetime type @stumpylog (#2058)</li> <li>Feature: speed up frontend by truncating content @shamoon (#2028)</li> <li>Feature: Allow bulk download API to follow file name formatting @stumpylog (#2003)</li> <li>Feature: Bake NLTK into Docker image @stumpylog (#2129)</li> <li>Chore: Apply live testing backoff logic to new mail tests @stumpylog (#2134)</li> <li>Feature: frontend paperless mail @shamoon (#2000)</li> <li>Feature: Ability to consume mails and eml files @p-h-a-i-l (#848)</li> </ul>"},{"location":"changelog/#paperless-ngx-1102","title":"paperless-ngx 1.10.2","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Take ownership of k8s-at-home Helm chart @alexander-bauer (#1947)</li> </ul>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Bugfix: Language code checks around two part languages @stumpylog (#2112)</li> <li>Bugfix: Redis socket compatibility didn't handle URLs with ports @stumpylog (#2109)</li> <li>Bugfix: Incompatible URL schemes for socket based Redis @stumpylog (#2092)</li> <li>Fix doc links in contributing @tooomm (#2102)</li> </ul>"},{"location":"changelog/#documentation_5","title":"Documentation","text":"<ul> <li>Docs: Some more small MkDocs updates @tooomm (#2106)</li> <li>Chore: Cleans up documentation links @stumpylog (#2104)</li> <li>Feature: Move docs to material-mkdocs @shamoon (#2067)</li> <li>Chore: Add v1.10.1 changelong @shamoon (#2082)</li> </ul>"},{"location":"changelog/#maintenance_5","title":"Maintenance","text":"<ul> <li>Take ownership of k8s-at-home Helm chart @alexander-bauer (#1947)</li> </ul>"},{"location":"changelog/#all-app-changes_6","title":"All App Changes","text":"<ul> <li>Bugfix: Language code checks around two part languages @stumpylog (#2112)</li> <li>Bugfix: Redis socket compatibility didn't handle URLs with ports @stumpylog (#2109)</li> <li>Bugfix: Incompatible URL schemes for socket based Redis @stumpylog (#2092)</li> </ul>"},{"location":"changelog/#paperless-ngx-1101","title":"paperless-ngx 1.10.1","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Feature: Allows documents in WebP format @stumpylog (#1984)</li> </ul>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix: frontend tasks display in 1.10.0 @shamoon (#2073)</li> <li>Bugfix: Custom startup commands weren't run as root @stumpylog (#2069)</li> <li>Bugfix: Add libatomic for armv7 compatibility @stumpylog (#2066)</li> <li>Bugfix: Don't silence an exception when trying to handle file naming @stumpylog (#2062)</li> <li>Bugfix: Some tesseract languages aren't detected as installed. @stumpylog (#2057)</li> </ul>"},{"location":"changelog/#maintenance_6","title":"Maintenance","text":"<ul> <li>Chore: Use a maintained upload-release-asset @stumpylog (#2055)</li> </ul>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"5 changes  - Bump tslib from 2.4.0 to 2.4.1 in /src-ui @dependabot ([#2076](https://github.com/paperless-ngx/paperless-ngx/pull/2076)) - Bump @angular-builders/jest from 14.0.1 to 14.1.0 in /src-ui @dependabot ([#2079](https://github.com/paperless-ngx/paperless-ngx/pull/2079)) - Bump jest-preset-angular from 12.2.2 to 12.2.3 in /src-ui @dependabot ([#2078](https://github.com/paperless-ngx/paperless-ngx/pull/2078)) - Bump ngx-file-drop from 14.0.1 to 14.0.2 in /src-ui @dependabot ([#2080](https://github.com/paperless-ngx/paperless-ngx/pull/2080)) - Bump @ngneat/dirty-check-forms from 3.0.2 to 3.0.3 in /src-ui @dependabot ([#2077](https://github.com/paperless-ngx/paperless-ngx/pull/2077))"},{"location":"changelog/#all-app-changes_7","title":"All App Changes","text":"<ul> <li>Bump tslib from 2.4.0 to 2.4.1 in /src-ui @dependabot (#2076)</li> <li>Bump @angular-builders/jest from 14.0.1 to 14.1.0 in /src-ui @dependabot (#2079)</li> <li>Bump jest-preset-angular from 12.2.2 to 12.2.3 in /src-ui @dependabot (#2078)</li> <li>Bump ngx-file-drop from 14.0.1 to 14.0.2 in /src-ui @dependabot (#2080)</li> <li>Bump @ngneat/dirty-check-forms from 3.0.2 to 3.0.3 in /src-ui @dependabot (#2077)</li> <li>Fix: frontend tasks display in 1.10.0 @shamoon (#2073)</li> <li>Bugfix: Don't silence an exception when trying to handle file naming @stumpylog (#2062)</li> <li>Bugfix: Some tesseract languages aren't detected as installed. @stumpylog (#2057)</li> </ul>"},{"location":"changelog/#paperless-ngx-1100","title":"paperless-ngx 1.10.0","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Feature: Capture stdout \\&amp; stderr of the pre/post consume scripts @stumpylog (#1967)</li> <li>Feature: Allow running custom container initialization scripts @stumpylog (#1838)</li> <li>Feature: Add more file name formatting options @stumpylog (#1906)</li> <li>Feature: 1.9.2 UI tweaks @shamoon (#1886)</li> <li>Feature: Optional celery monitoring with Flower @stumpylog (#1810)</li> <li>Feature: Save pending tasks for frontend @stumpylog (#1816)</li> <li>Feature: Improved processing for automatic matching @stumpylog (#1609)</li> <li>Feature: Transition to celery for background tasks @stumpylog (#1648)</li> <li>Feature: UI Welcome Tour @shamoon (#1644)</li> <li>Feature: slim sidebar @shamoon (#1641)</li> <li>change default matching algo to auto and move to constant @NiFNi (#1754)</li> <li>Feature: Enable end to end Tika testing in CI @stumpylog (#1757)</li> <li>Feature: frontend update checking settings @shamoon (#1692)</li> <li>Feature: Upgrade to qpdf 11, pikepdf 6 \\&amp; ocrmypdf 14 @stumpylog (#1642)</li> </ul>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Bugfix: Fix created_date being a string @stumpylog (#2023)</li> <li>Bugfix: Fixes an issue with mixed text and images when redoing OCR @stumpylog (#2017)</li> <li>Bugfix: Always re-try barcodes with pdf2image @stumpylog (#1953)</li> <li>Fix: using <code>CONSUMER_SUBDIRS_AS_TAGS</code> causes failure with Celery in <code>dev</code> @shamoon (#1942)</li> <li>Fix mail consumption broken in <code>dev</code> after move to celery @shamoon (#1934)</li> <li>Bugfix: Prevent file handling from running with stale data @stumpylog (#1905)</li> <li>Chore: Reduce nuisance CI test failures @stumpylog (#1922)</li> <li>Bugfix: Unintentional deletion of feature tagged Docker images @stumpylog (#1896)</li> <li>Fix: independent control of saved views @shamoon (#1868)</li> <li>Fix: frontend relative date searches @shamoon (#1865)</li> <li>Chore: Fixes pipenv issues @stumpylog (#1873)</li> <li>Bugfix: Handle password protected PDFs during barcode detection @stumpylog (#1858)</li> <li>Fix: Allows configuring barcodes with pdf2image instead of pikepdf @stumpylog (#1857)</li> <li>Bugfix: Reverts the change around skip_noarchive @stumpylog (#1829)</li> <li>Fix: missing loadViewConfig breaks loading saved view @shamoon (#1792)</li> <li>Bugfix: Fallback to pdf2image if pikepdf fails @stumpylog (#1745)</li> <li>Fix: creating new storage path on document edit fails to update menu @shamoon (#1777)</li> <li>Bugfix: Files containing barcodes uploaded via web are not consumed after splitting @stumpylog (#1762)</li> <li>Bugfix: Fix email labeling for non-Gmail servers @stumpylog (#1755)</li> <li>Fix: allow preview for .csv files @shamoon (#1744)</li> <li>Bugfix: csv recognition by consumer @bin101 (#1726)</li> <li>Bugfix: Include document title when a duplicate is detected @stumpylog (#1696)</li> <li>Bugfix: Set MySql charset @stumpylog (#1687)</li> <li>Mariadb compose files should use <code>PAPERLESS_DBPASS</code> @shamoon (#1683)</li> </ul>"},{"location":"changelog/#documentation_6","title":"Documentation","text":"<ul> <li>Documentation: Update MariaDB docs to note some potential issues @stumpylog (#2016)</li> <li>Documentation: Add note re MS exchange servers @shamoon (#1780)</li> <li>Chore: Updates Gotenberg versions @stumpylog (#1768)</li> <li>Documentation: Tweak LinuxServer @stumpylog (#1761)</li> <li>Documentation: Adds troubleshooting note about Kubernetes and ports @stumpylog (#1731)</li> <li>Documentation: LinuxServer.io Migration @stumpylog (#1733)</li> <li>[Documentation] Add v1.9.2 changelog @github-actions (#1671)</li> </ul>"},{"location":"changelog/#maintenance_7","title":"Maintenance","text":"<ul> <li>Bump tj-actions/changed-files from 32 to 34 @dependabot (#1915)</li> <li>Chore: Fix <code>dev</code> trying to build Pillow or lxml @stumpylog (#1909)</li> <li>Chore: Fixes pipenv issues @stumpylog (#1873)</li> <li>Chore: Simplified registry cleanup @stumpylog (#1812)</li> <li>Chore: Fixing deprecated workflow commands @stumpylog (#1786)</li> <li>Chore: Python library update + test fixes @stumpylog (#1773)</li> <li>Chore: Updates Gotenberg versions @stumpylog (#1768)</li> <li>Bump leonsteinhaeuser/project-beta-automations from 1.3.0 to 2.0.1 @dependabot (#1703)</li> <li>Bump tj-actions/changed-files from 29.0.2 to 31.0.2 @dependabot (#1702)</li> <li>Bump actions/checkout from 2 to 3 @dependabot (#1704)</li> <li>Bump actions/setup-python from 3 to 4 @dependabot (#1705)</li> </ul>"},{"location":"changelog/#dependencies_2","title":"Dependencies","text":"31 changes  - Bugfix: Downgrade cryptography for armv7 compatibility [@stumpylog](https://github.com/stumpylog) ([#1954](https://github.com/paperless-ngx/paperless-ngx/pull/1954)) - Chore: Bulk library updates + loosen restrictions [@stumpylog](https://github.com/stumpylog) ([#1949](https://github.com/paperless-ngx/paperless-ngx/pull/1949)) - Bump tj-actions/changed-files from 32 to 34 [@dependabot](https://github.com/dependabot) ([#1915](https://github.com/paperless-ngx/paperless-ngx/pull/1915)) - Bump scikit-learn from 1.1.2 to 1.1.3 [@dependabot](https://github.com/dependabot) ([#1903](https://github.com/paperless-ngx/paperless-ngx/pull/1903)) - Bump angular packages as bundle [@dependabot](https://github.com/dependabot) ([#1910](https://github.com/paperless-ngx/paperless-ngx/pull/1910)) - Bump ngx-ui-tour-ng-bootstrap from 11.0.0 to 11.1.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1911](https://github.com/paperless-ngx/paperless-ngx/pull/1911)) - Bump jest-environment-jsdom from 29.1.2 to 29.2.2 in /src-ui [@dependabot](https://github.com/dependabot) ([#1914](https://github.com/paperless-ngx/paperless-ngx/pull/1914)) - Bump pillow from 9.2.0 to 9.3.0 [@dependabot](https://github.com/dependabot) ([#1904](https://github.com/paperless-ngx/paperless-ngx/pull/1904)) - Bump pytest from 7.1.3 to 7.2.0 [@dependabot](https://github.com/dependabot) ([#1902](https://github.com/paperless-ngx/paperless-ngx/pull/1902)) - Bump tox from 3.26.0 to 3.27.0 [@dependabot](https://github.com/dependabot) ([#1901](https://github.com/paperless-ngx/paperless-ngx/pull/1901)) - Bump zipp from 3.9.0 to 3.10.0 [@dependabot](https://github.com/dependabot) ([#1860](https://github.com/paperless-ngx/paperless-ngx/pull/1860)) - Bump pytest-env from 0.6.2 to 0.8.1 [@dependabot](https://github.com/dependabot) ([#1859](https://github.com/paperless-ngx/paperless-ngx/pull/1859)) - Bump sphinx from 5.2.3 to 5.3.0 [@dependabot](https://github.com/dependabot) ([#1817](https://github.com/paperless-ngx/paperless-ngx/pull/1817)) - Chore: downgrade channels-redis [@stumpylog](https://github.com/stumpylog) ([#1802](https://github.com/paperless-ngx/paperless-ngx/pull/1802)) - Chore: Update to qpdf 11.1.1 and update backend libraries [@stumpylog](https://github.com/stumpylog) ([#1749](https://github.com/paperless-ngx/paperless-ngx/pull/1749)) - Bump myst-parser from 0.18.0 to 0.18.1 [@dependabot](https://github.com/dependabot) ([#1738](https://github.com/paperless-ngx/paperless-ngx/pull/1738)) - Bump leonsteinhaeuser/project-beta-automations from 1.3.0 to 2.0.1 [@dependabot](https://github.com/dependabot) ([#1703](https://github.com/paperless-ngx/paperless-ngx/pull/1703)) - Bump tj-actions/changed-files from 29.0.2 to 31.0.2 [@dependabot](https://github.com/dependabot) ([#1702](https://github.com/paperless-ngx/paperless-ngx/pull/1702)) - Bump actions/checkout from 2 to 3 [@dependabot](https://github.com/dependabot) ([#1704](https://github.com/paperless-ngx/paperless-ngx/pull/1704)) - Bump actions/setup-python from 3 to 4 [@dependabot](https://github.com/dependabot) ([#1705](https://github.com/paperless-ngx/paperless-ngx/pull/1705)) - Bump rxjs from 7.5.6 to 7.5.7 in /src-ui [@dependabot](https://github.com/dependabot) ([#1720](https://github.com/paperless-ngx/paperless-ngx/pull/1720)) - Bump uuid from 8.3.2 to 9.0.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1716](https://github.com/paperless-ngx/paperless-ngx/pull/1716)) - Bump ng2-pdf-viewer from 9.1.0 to 9.1.2 in /src-ui [@dependabot](https://github.com/dependabot) ([#1717](https://github.com/paperless-ngx/paperless-ngx/pull/1717)) - Bump ngx-color from 8.0.2 to 8.0.3 in /src-ui [@dependabot](https://github.com/dependabot) ([#1715](https://github.com/paperless-ngx/paperless-ngx/pull/1715)) - Bump concurrently from 7.3.0 to 7.4.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1719](https://github.com/paperless-ngx/paperless-ngx/pull/1719)) - Bump [@types/node from 18.7.14 to 18.7.23 in /src-ui @dependabot](https://github.com/types/node from 18.7.14 to 18.7.23 in /src-ui @dependabot) ([#1718](https://github.com/paperless-ngx/paperless-ngx/pull/1718)) - Bump jest-environment-jsdom from 29.0.1 to 29.1.2 in /src-ui [@dependabot](https://github.com/dependabot) ([#1714](https://github.com/paperless-ngx/paperless-ngx/pull/1714)) - Bump [@angular/cli @angular/core @dependabot](https://github.com/angular/cli @angular/core @dependabot) ([#1708](https://github.com/paperless-ngx/paperless-ngx/pull/1708)) - Bump cypress from 10.7.0 to 10.9.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1707](https://github.com/paperless-ngx/paperless-ngx/pull/1707)) - Bump bootstrap from 5.2.0 to 5.2.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1710](https://github.com/paperless-ngx/paperless-ngx/pull/1710)) - Bump typescript from 4.7.4 to 4.8.4 in /src-ui [@dependabot](https://github.com/dependabot) ([#1706](https://github.com/paperless-ngx/paperless-ngx/pull/1706))"},{"location":"changelog/#all-app-changes_8","title":"All App Changes","text":"<ul> <li>Add info that re-do OCR doesnt automatically refresh content @shamoon (#2025)</li> <li>Bugfix: Fix created_date being a string @stumpylog (#2023)</li> <li>Bugfix: Fixes an issue with mixed text and images when redoing OCR @stumpylog (#2017)</li> <li>Bugfix: Don't allow exceptions during date parsing to fail consume @stumpylog (#1998)</li> <li>Feature: Capture stdout \\&amp; stderr of the pre/post consume scripts @stumpylog (#1967)</li> <li>Bugfix: Always re-try barcodes with pdf2image @stumpylog (#1953)</li> <li>Fix: using <code>CONSUMER_SUBDIRS_AS_TAGS</code> causes failure with Celery in <code>dev</code> @shamoon (#1942)</li> <li>Fix mail consumption broken in <code>dev</code> after move to celery @shamoon (#1934)</li> <li>Bugfix: Prevent file handling from running with stale data @stumpylog (#1905)</li> <li>Chore: Reduce nuisance CI test failures @stumpylog (#1922)</li> <li>Bump scikit-learn from 1.1.2 to 1.1.3 @dependabot (#1903)</li> <li>Bump angular packages as bundle @dependabot (#1910)</li> <li>Bump ngx-ui-tour-ng-bootstrap from 11.0.0 to 11.1.0 in /src-ui @dependabot (#1911)</li> <li>Bump jest-environment-jsdom from 29.1.2 to 29.2.2 in /src-ui @dependabot (#1914)</li> <li>Feature: Add more file name formatting options @stumpylog (#1906)</li> <li>Bump pillow from 9.2.0 to 9.3.0 @dependabot (#1904)</li> <li>Bump pytest from 7.1.3 to 7.2.0 @dependabot (#1902)</li> <li>Bump tox from 3.26.0 to 3.27.0 @dependabot (#1901)</li> <li>directly use rapidfuzz @maxbachmann (#1899)</li> <li>Feature: 1.9.2 UI tweaks @shamoon (#1886)</li> <li>Bump zipp from 3.9.0 to 3.10.0 @dependabot (#1860)</li> <li>Fix: independent control of saved views @shamoon (#1868)</li> <li>Fix: frontend relative date searches @shamoon (#1865)</li> <li>Django error W003 - MariaDB may not allow unique CharFields to have a max_length &gt; 255. @Sblop (#1881)</li> <li>Bump pytest-env from 0.6.2 to 0.8.1 @dependabot (#1859)</li> <li>Fix: Allows configuring barcodes with pdf2image instead of pikepdf @stumpylog (#1857)</li> <li>Feature: Save pending tasks for frontend @stumpylog (#1816)</li> <li>Bugfix: Reverts the change around skip_noarchive @stumpylog (#1829)</li> <li>Bump sphinx from 5.2.3 to 5.3.0 @dependabot (#1817)</li> <li>Fix: missing loadViewConfig breaks loading saved view @shamoon (#1792)</li> <li>Bugfix: Fallback to pdf2image if pikepdf fails @stumpylog (#1745)</li> <li>Fix: creating new storage path on document edit fails to update menu @shamoon (#1777)</li> <li>Chore: Python library update + test fixes @stumpylog (#1773)</li> <li>Feature: Improved processing for automatic matching @stumpylog (#1609)</li> <li>Feature: Transition to celery for background tasks @stumpylog (#1648)</li> <li>Feature: UI Welcome Tour @shamoon (#1644)</li> <li>Feature: slim sidebar @shamoon (#1641)</li> <li>Bugfix: Files containing barcodes uploaded via web are not consumed after splitting @stumpylog (#1762)</li> <li>change default matching algo to auto and move to constant @NiFNi (#1754)</li> <li>Bugfix: Fix email labeling for non-Gmail servers @stumpylog (#1755)</li> <li>Feature: frontend update checking settings @shamoon (#1692)</li> <li>Fix: allow preview for .csv files @shamoon (#1744)</li> <li>Bump myst-parser from 0.18.0 to 0.18.1 @dependabot (#1738)</li> <li>Bugfix: csv recognition by consumer @bin101 (#1726)</li> <li>Bugfix: Include document title when a duplicate is detected @stumpylog (#1696)</li> <li>Bump rxjs from 7.5.6 to 7.5.7 in /src-ui @dependabot (#1720)</li> <li>Bump uuid from 8.3.2 to 9.0.0 in /src-ui @dependabot (#1716)</li> <li>Bump ng2-pdf-viewer from 9.1.0 to 9.1.2 in /src-ui @dependabot (#1717)</li> <li>Bump ngx-color from 8.0.2 to 8.0.3 in /src-ui @dependabot (#1715)</li> <li>Bump concurrently from 7.3.0 to 7.4.0 in /src-ui @dependabot (#1719)</li> <li>Bump @types/node from 18.7.14 to 18.7.23 in /src-ui @dependabot (#1718)</li> <li>Bump jest-environment-jsdom from 29.0.1 to 29.1.2 in /src-ui @dependabot (#1714)</li> <li>Bump @angular/cli @angular/core @dependabot (#1708)</li> <li>Bump cypress from 10.7.0 to 10.9.0 in /src-ui @dependabot (#1707)</li> <li>Bump bootstrap from 5.2.0 to 5.2.1 in /src-ui @dependabot (#1710)</li> <li>Bump typescript from 4.7.4 to 4.8.4 in /src-ui @dependabot (#1706)</li> <li>Bugfix: Set MySql charset @stumpylog (#1687)</li> </ul>"},{"location":"changelog/#paperless-ngx-192","title":"paperless-ngx 1.9.2","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Bugfix: Allow PAPERLESS_OCR_CLEAN=none @shamoon (#1670)</li> </ul>"},{"location":"changelog/#all-app-changes_9","title":"All App Changes","text":"<ul> <li>Chore: Bumps version numbers to 1.9.2 @stumpylog (#1666)</li> </ul>"},{"location":"changelog/#paperless-ngx-191","title":"paperless-ngx 1.9.1","text":""},{"location":"changelog/#notes","title":"Notes","text":"<ul> <li>Version 1.9.1 incorrectly displays the version string as 1.9.0</li> </ul>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Bugfix: Fixes missing OCR mode skip_noarchive @stumpylog (#1645)</li> <li>Fix reset button padding on small screens @shamoon (#1646)</li> </ul>"},{"location":"changelog/#documentation_7","title":"Documentation","text":"<ul> <li>Improve docs re @janis-ax (#1625)</li> <li>[Documentation] Add v1.9.0 changelog @github-actions (#1639)</li> </ul>"},{"location":"changelog/#all-app-changes_10","title":"All App Changes","text":"<ul> <li>Bugfix: Fixes missing OCR mode skip_noarchive @stumpylog (#1645)</li> <li>Fix reset button padding on small screens @shamoon (#1646)</li> </ul>"},{"location":"changelog/#paperless-ngx-190","title":"paperless-ngx 1.9.0","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Feature: Faster, less memory barcode handling @stumpylog (#1594)</li> <li>Feature: Display django-q process names @stumpylog (#1567)</li> <li>Feature: Add MariaDB support @bckelly1 (#543)</li> <li>Feature: Simplify IMAP login for UTF-8 @stumpylog (#1492)</li> <li>Feature: Even better re-do of OCR @stumpylog (#1451)</li> <li>Feature: document comments @tim-vogel (#1375)</li> <li>Adding date suggestions to the documents details view @Eckii24 (#1367)</li> <li>Feature: Event driven consumer @stumpylog (#1421)</li> <li>Feature: Adds storage paths to re-tagger command @stumpylog (#1446)</li> <li>Feature: Preserve original filename in metadata @GwynHannay (#1440)</li> <li>Handle tags for gmail email accounts @sisao (#1433)</li> <li>Update redis image @tribut (#1436)</li> <li>PAPERLESS_REDIS may be set via docker secrets @DennisGaida (#1405)</li> </ul>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>paperless_cmd.sh: use exec to run supervisord @lemmi (#1617)</li> <li>Fix: Double barcode separation creates empty file @stumpylog (#1596)</li> <li>Fix: Resolve issue with slow classifier @stumpylog (#1576)</li> <li>Fix document comments not updating on document navigation @shamoon (#1566)</li> <li>Fix: Include storage paths in document exporter @shamoon (#1557)</li> <li>Chore: Cleanup and validate settings @stumpylog (#1551)</li> <li>Bugfix: Better gunicorn settings for workers @stumpylog (#1500)</li> <li>Fix actions button in tasks table @shamoon (#1488)</li> <li>Fix: Add missing filter rule types to SavedViewFilterRule model \\&amp; fix migrations @shamoon (#1463)</li> <li>Fix paperless.conf.example typo @qcasey (#1460)</li> <li>Bugfix: Fixes the creation of an archive file, even if noarchive was specified @stumpylog (#1442)</li> <li>Fix: created_date should not be required @shamoon (#1412)</li> <li>Fix: dev backend testing @stumpylog (#1420)</li> <li>Bugfix: Catch all exceptions during the task signals @stumpylog (#1387)</li> <li>Fix: saved view page parameter @shamoon (#1376)</li> <li>Fix: Correct browser unsaved changes warning @shamoon (#1369)</li> <li>Fix: correct date pasting with other formats @shamoon (#1370)</li> <li>Bugfix: Allow webserver bind address to be configured @stumpylog (#1358)</li> <li>Bugfix: Chain exceptions during exception handling @stumpylog (#1354)</li> <li>Fix: missing tooltip translation \\&amp; filter editor wrapping @shamoon (#1305)</li> <li>Bugfix: Interaction between barcode and directories as tags @stumpylog (#1303)</li> </ul>"},{"location":"changelog/#documentation_8","title":"Documentation","text":"<ul> <li>[Beta] Paperless-ngx v1.9.0 Release Candidate @stumpylog (#1560)</li> <li>docs/configuration: Fix binary variable defaults @erikarvstedt (#1528)</li> <li>Info about installing on subpath @viktor-c (#1350)</li> <li>Docs: move scanner \\&amp; software recs to GH wiki @shamoon (#1482)</li> <li>Docs: Update mobile scanner section @tooomm (#1467)</li> <li>Adding date suggestions to the documents details view @Eckii24 (#1367)</li> <li>docs: scanners: add Brother ads4700w @ocelotsloth (#1450)</li> <li>Feature: Adds storage paths to re-tagger command @stumpylog (#1446)</li> <li>Changes to Redis documentation @Zerteax (#1441)</li> <li>Update scanners.rst @glassbox-sco (#1430)</li> <li>Update scanners.rst @derlucas (#1415)</li> <li>Bugfix: Allow webserver bind address to be configured @stumpylog (#1358)</li> <li>docs: fix small typo @tooomm (#1352)</li> <li>[Documentation] Add v1.8.0 changelog @github-actions (#1298)</li> </ul>"},{"location":"changelog/#maintenance_8","title":"Maintenance","text":"<ul> <li>[Beta] Paperless-ngx v1.9.0 Release Candidate @stumpylog (#1560)</li> <li>paperless_cmd.sh: use exec to run supervisord @lemmi (#1617)</li> <li>Chore: Extended container image cleanup @stumpylog (#1556)</li> <li>Chore: Smaller library images @stumpylog (#1546)</li> <li>Bump tj-actions/changed-files from 24 to 29.0.2 @dependabot (#1493)</li> <li>Bugfix: Better gunicorn settings for workers @stumpylog (#1500)</li> <li>[CI] Fix release drafter issues @qcasey (#1301)</li> <li>Fix: dev backend testing @stumpylog (#1420)</li> <li>Chore: Exclude dependabot PRs from Project, set status to Needs Review @qcasey (#1397)</li> <li>Chore: Add to label PRs based on and title @qcasey (#1396)</li> <li>Chore: use pre-commit in the Ci workflow @stumpylog (#1362)</li> <li>Chore: Fixes permissions for image tag cleanup @stumpylog (#1315)</li> <li>Bump leonsteinhaeuser/project-beta-automations from 1.2.1 to 1.3.0 @dependabot (#1328)</li> <li>Bump tj-actions/changed-files from 23.1 to 24 @dependabot (#1329)</li> <li>Feature: Remove requirements.txt and use pipenv everywhere @stumpylog (#1316)</li> </ul>"},{"location":"changelog/#dependencies_3","title":"Dependencies","text":"34 changes  - Bump pikepdf from 5.5.0 to 5.6.1 [@dependabot](https://github.com/dependabot) ([#1537](https://github.com/paperless-ngx/paperless-ngx/pull/1537)) - Bump black from 22.6.0 to 22.8.0 [@dependabot](https://github.com/dependabot) ([#1539](https://github.com/paperless-ngx/paperless-ngx/pull/1539)) - Bump tqdm from 4.64.0 to 4.64.1 [@dependabot](https://github.com/dependabot) ([#1540](https://github.com/paperless-ngx/paperless-ngx/pull/1540)) - Bump pytest from 7.1.2 to 7.1.3 [@dependabot](https://github.com/dependabot) ([#1538](https://github.com/paperless-ngx/paperless-ngx/pull/1538)) - Bump tj-actions/changed-files from 24 to 29.0.2 [@dependabot](https://github.com/dependabot) ([#1493](https://github.com/paperless-ngx/paperless-ngx/pull/1493)) - Bump angular packages, jest-preset-angular in src-ui [@dependabot](https://github.com/dependabot) ([#1502](https://github.com/paperless-ngx/paperless-ngx/pull/1502)) - Bump jest-environment-jsdom from 28.1.3 to 29.0.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1507](https://github.com/paperless-ngx/paperless-ngx/pull/1507)) - Bump [@types/node from 18.6.3 to 18.7.14 in /src-ui @dependabot](https://github.com/types/node from 18.6.3 to 18.7.14 in /src-ui @dependabot) ([#1506](https://github.com/paperless-ngx/paperless-ngx/pull/1506)) - Bump [@angular-builders/jest from 14.0.0 to 14.0.1 in /src-ui @dependabot](https://github.com/angular-builders/jest from 14.0.0 to 14.0.1 in /src-ui @dependabot) ([#1505](https://github.com/paperless-ngx/paperless-ngx/pull/1505)) - Bump zone.js from 0.11.7 to 0.11.8 in /src-ui [@dependabot](https://github.com/dependabot) ([#1504](https://github.com/paperless-ngx/paperless-ngx/pull/1504)) - Bump ngx-color from 8.0.1 to 8.0.2 in /src-ui [@dependabot](https://github.com/dependabot) ([#1494](https://github.com/paperless-ngx/paperless-ngx/pull/1494)) - Bump cypress from 10.3.1 to 10.7.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1496](https://github.com/paperless-ngx/paperless-ngx/pull/1496)) - Bump [@cypress/schematic from 2.0.0 to 2.1.1 in /src-ui @dependabot](https://github.com/cypress/schematic from 2.0.0 to 2.1.1 in /src-ui @dependabot) ([#1495](https://github.com/paperless-ngx/paperless-ngx/pull/1495)) - Bump [@popperjs/core from 2.11.5 to 2.11.6 in /src-ui @dependabot](https://github.com/popperjs/core from 2.11.5 to 2.11.6 in /src-ui @dependabot) ([#1498](https://github.com/paperless-ngx/paperless-ngx/pull/1498)) - Bump sphinx from 5.0.2 to 5.1.1 [@dependabot](https://github.com/dependabot) ([#1297](https://github.com/paperless-ngx/paperless-ngx/pull/1297)) - Chore: Bump Python dependencies [@stumpylog](https://github.com/stumpylog) ([#1445](https://github.com/paperless-ngx/paperless-ngx/pull/1445)) - Chore: Update Python deps [@stumpylog](https://github.com/stumpylog) ([#1391](https://github.com/paperless-ngx/paperless-ngx/pull/1391)) - Bump watchfiles from 0.15.0 to 0.16.1 [@dependabot](https://github.com/dependabot) ([#1285](https://github.com/paperless-ngx/paperless-ngx/pull/1285)) - Bump leonsteinhaeuser/project-beta-automations from 1.2.1 to 1.3.0 [@dependabot](https://github.com/dependabot) ([#1328](https://github.com/paperless-ngx/paperless-ngx/pull/1328)) - Bump tj-actions/changed-files from 23.1 to 24 [@dependabot](https://github.com/dependabot) ([#1329](https://github.com/paperless-ngx/paperless-ngx/pull/1329)) - Bump cypress from 10.3.0 to 10.3.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1342](https://github.com/paperless-ngx/paperless-ngx/pull/1342)) - Bump ngx-color from 7.3.3 to 8.0.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1343](https://github.com/paperless-ngx/paperless-ngx/pull/1343)) - Bump [@angular/cli from 14.0.4 to 14.1.0 in /src-ui @dependabot](https://github.com/angular/cli from 14.0.4 to 14.1.0 in /src-ui @dependabot) ([#1330](https://github.com/paperless-ngx/paperless-ngx/pull/1330)) - Bump [@types/node from 18.0.0 to 18.6.3 in /src-ui @dependabot](https://github.com/types/node from 18.0.0 to 18.6.3 in /src-ui @dependabot) ([#1341](https://github.com/paperless-ngx/paperless-ngx/pull/1341)) - Bump jest-preset-angular from 12.1.0 to 12.2.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1340](https://github.com/paperless-ngx/paperless-ngx/pull/1340)) - Bump concurrently from 7.2.2 to 7.3.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1326](https://github.com/paperless-ngx/paperless-ngx/pull/1326)) - Bump ng2-pdf-viewer from 9.0.0 to 9.1.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1337](https://github.com/paperless-ngx/paperless-ngx/pull/1337)) - Bump jest-environment-jsdom from 28.1.2 to 28.1.3 in /src-ui [@dependabot](https://github.com/dependabot) ([#1336](https://github.com/paperless-ngx/paperless-ngx/pull/1336)) - Bump ngx-file-drop from 13.0.0 to 14.0.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1331](https://github.com/paperless-ngx/paperless-ngx/pull/1331)) - Bump jest and [@types/jest in /src-ui @dependabot](https://github.com/types/jest in /src-ui @dependabot) ([#1333](https://github.com/paperless-ngx/paperless-ngx/pull/1333)) - Bump bootstrap from 5.1.3 to 5.2.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1327](https://github.com/paperless-ngx/paperless-ngx/pull/1327)) - Bump typescript from 4.6.4 to 4.7.4 in /src-ui [@dependabot](https://github.com/dependabot) ([#1324](https://github.com/paperless-ngx/paperless-ngx/pull/1324)) - Bump ts-node from 10.8.1 to 10.9.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1325](https://github.com/paperless-ngx/paperless-ngx/pull/1325)) - Bump rxjs from 7.5.5 to 7.5.6 in /src-ui [@dependabot](https://github.com/dependabot) ([#1323](https://github.com/paperless-ngx/paperless-ngx/pull/1323))"},{"location":"changelog/#all-app-changes_11","title":"All App Changes","text":"<ul> <li>[Beta] Paperless-ngx v1.9.0 Release Candidate @stumpylog (#1560)</li> <li>Feature: Faster, less memory barcode handling @stumpylog (#1594)</li> <li>Fix: Consume directory permissions were not updated @stumpylog (#1605)</li> <li>Fix: Double barcode separation creates empty file @stumpylog (#1596)</li> <li>Fix: Parsing Tika documents fails with AttributeError @stumpylog (#1591)</li> <li>Fix: Resolve issue with slow classifier @stumpylog (#1576)</li> <li>Feature: Display django-q process names @stumpylog (#1567)</li> <li>Fix document comments not updating on document navigation @shamoon (#1566)</li> <li>Feature: Add MariaDB support @bckelly1 (#543)</li> <li>Fix: Include storage paths in document exporter @shamoon (#1557)</li> <li>Chore: Cleanup and validate settings @stumpylog (#1551)</li> <li>Bump pikepdf from 5.5.0 to 5.6.1 @dependabot (#1537)</li> <li>Bump black from 22.6.0 to 22.8.0 @dependabot (#1539)</li> <li>Bump tqdm from 4.64.0 to 4.64.1 @dependabot (#1540)</li> <li>Bump pytest from 7.1.2 to 7.1.3 @dependabot (#1538)</li> <li>Bump angular packages, jest-preset-angular in src-ui @dependabot (#1502)</li> <li>Bump jest-environment-jsdom from 28.1.3 to 29.0.1 in /src-ui @dependabot (#1507)</li> <li>Bump @types/node from 18.6.3 to 18.7.14 in /src-ui @dependabot (#1506)</li> <li>Bump @angular-builders/jest from 14.0.0 to 14.0.1 in /src-ui @dependabot (#1505)</li> <li>Bump zone.js from 0.11.7 to 0.11.8 in /src-ui @dependabot (#1504)</li> <li>Bump ngx-color from 8.0.1 to 8.0.2 in /src-ui @dependabot (#1494)</li> <li>Bump cypress from 10.3.1 to 10.7.0 in /src-ui @dependabot (#1496)</li> <li>Bump @cypress/schematic from 2.0.0 to 2.1.1 in /src-ui @dependabot (#1495)</li> <li>Bump @popperjs/core from 2.11.5 to 2.11.6 in /src-ui @dependabot (#1498)</li> <li>Feature: Simplify IMAP login for UTF-8 @stumpylog (#1492)</li> <li>Fix actions button in tasks table @shamoon (#1488)</li> <li>Fix: Add missing filter rule types to SavedViewFilterRule model \\&amp; fix migrations @shamoon (#1463)</li> <li>Feature: Even better re-do of OCR @stumpylog (#1451)</li> <li>Feature: document comments @tim-vogel (#1375)</li> <li>Adding date suggestions to the documents details view @Eckii24 (#1367)</li> <li>Bump sphinx from 5.0.2 to 5.1.1 @dependabot (#1297)</li> <li>Feature: Event driven consumer @stumpylog (#1421)</li> <li>Bugfix: Fixes the creation of an archive file, even if noarchive was specified @stumpylog (#1442)</li> <li>Feature: Adds storage paths to re-tagger command @stumpylog (#1446)</li> <li>Feature: Preserve original filename in metadata @GwynHannay (#1440)</li> <li>Handle tags for gmail email accounts @sisao (#1433)</li> <li>Fix: should not be required @shamoon (#1412)</li> <li>Bugfix: Catch all exceptions during the task signals @stumpylog (#1387)</li> <li>Fix: saved view page parameter @shamoon (#1376)</li> <li>Fix: Correct browser unsaved changes warning @shamoon (#1369)</li> <li>Fix: correct date pasting with other formats @shamoon (#1370)</li> <li>Chore: use pre-commit in the Ci workflow @stumpylog (#1362)</li> <li>Bugfix: Chain exceptions during exception handling @stumpylog (#1354)</li> <li>Bump watchfiles from 0.15.0 to 0.16.1 @dependabot (#1285)</li> <li>Bump cypress from 10.3.0 to 10.3.1 in /src-ui @dependabot (#1342)</li> <li>Bump ngx-color from 7.3.3 to 8.0.1 in /src-ui @dependabot (#1343)</li> <li>Bump @angular/cli from 14.0.4 to 14.1.0 in /src-ui @dependabot (#1330)</li> <li>Bump @types/node from 18.0.0 to 18.6.3 in /src-ui @dependabot (#1341)</li> <li>Bump jest-preset-angular from 12.1.0 to 12.2.0 in /src-ui @dependabot (#1340)</li> <li>Bump concurrently from 7.2.2 to 7.3.0 in /src-ui @dependabot (#1326)</li> <li>Bump ng2-pdf-viewer from 9.0.0 to 9.1.0 in /src-ui @dependabot (#1337)</li> <li>Bump jest-environment-jsdom from 28.1.2 to 28.1.3 in /src-ui @dependabot (#1336)</li> <li>Bump ngx-file-drop from 13.0.0 to 14.0.1 in /src-ui @dependabot (#1331)</li> <li>Bump jest and @types/jest in /src-ui @dependabot (#1333)</li> <li>Bump bootstrap from 5.1.3 to 5.2.0 in /src-ui @dependabot (#1327)</li> <li>Bump typescript from 4.6.4 to 4.7.4 in /src-ui @dependabot (#1324)</li> <li>Bump ts-node from 10.8.1 to 10.9.1 in /src-ui @dependabot (#1325)</li> <li>Bump rxjs from 7.5.5 to 7.5.6 in /src-ui @dependabot (#1323)</li> <li>Fix: missing tooltip translation \\&amp; filter editor wrapping @shamoon (#1305)</li> <li>Feature: Remove requirements.txt and use pipenv everywhere @stumpylog (#1316)</li> <li>Bugfix: Interaction between barcode and directories as tags @stumpylog (#1303)</li> </ul>"},{"location":"changelog/#paperless-ngx-180","title":"paperless-ngx 1.8.0","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Feature use env vars in pre post scripts @ziprandom (#1154)</li> <li>frontend task queue @shamoon (#1020)</li> <li>Fearless scikit-learn updates @stumpylog (#1082)</li> <li>Adds support for Docker secrets @stumpylog (#1034)</li> <li>make frontend timezone un-aware @shamoon (#957)</li> <li>Change document thumbnails to WebP @stumpylog (#1127)</li> <li>Fork django-q to update dependencies @stumpylog (#1014)</li> <li>Fix: Rework query params logic @shamoon (#1000)</li> <li>Enhancement: show note on language change and offer reload @shamoon (#1030)</li> <li>Include error information when Redis connection fails @stumpylog (#1016)</li> <li>frontend settings saved to database @shamoon (#919)</li> <li>Add \"Created\" as additional (optional) parameter for post_documents @eingemaischt (#965)</li> <li>Convert Changelog to markdown, auto-commit future changelogs @qcasey (#935)</li> <li>allow all ASN filtering functions @shamoon (#920)</li> <li>gunicorn: Allow IPv6 sockets @vlcty (#924)</li> <li>initial app loading indicators @shamoon (#899)</li> </ul>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Fix: dropdown selected items not visible again @shamoon (#1261)</li> <li>[CI] Fix automatic changelog generation on release @qcasey (#1249)</li> <li>Fix: Prevent duplicate api calls on text filtering @shamoon (#1133)</li> <li>make frontend timezone un-aware @shamoon (#957)</li> <li>Feature / fix quick toggleable filters @shamoon (#1122)</li> <li>Chore: Manually downgrade reportlab (and update everything else) @stumpylog (#1116)</li> <li>Bugfix: Don't assume default Docker folders @stumpylog (#1088)</li> <li>Bugfix: Better sanity check messages @stumpylog (#1049)</li> <li>Fix vertical margins between pages of pdf viewer @shamoon (#1081)</li> <li>Bugfix: Pass debug setting on to django-q @stumpylog (#1058)</li> <li>Bugfix: Don't assume the document has a title set @stumpylog (#1057)</li> <li>Bugfix: Corrects the setting of max pixel size for OCR @stumpylog (#1008)</li> <li>better date pasting @shamoon (#1007)</li> <li>Enhancement: Alphabetize tags by default @shamoon (#1017)</li> <li>Fix: Rework query params logic @shamoon (#1000)</li> <li>Fix: add translation for some un-translated tooltips @shamoon (#995)</li> <li>Change npm --no-optional to --omit=optional @shamoon (#986)</li> <li>Add <code>myst-parser</code> to fix readthedocs @qcasey (#982)</li> <li>Fix: Title is changed after switching doc quickly @shamoon (#979)</li> <li>Fix: warn when closing a document with unsaved changes due to max open docs @shamoon (#956)</li> <li>Bugfix: Adds configurable intoify debounce time @stumpylog (#953)</li> <li>Bugfix: Fixes document filename date off by 1 issue @stumpylog (#942)</li> <li>fixes #949: change to MIME detection for files @gador (#962)</li> <li>docs: fix some typos @Berjou (#948)</li> <li>[Docs] Fix 2 small typos @tooomm (#946)</li> <li>[Readme] Fix typo @tooomm (#941)</li> <li>Fix: management pages plurals incorrect in other languages @shamoon (#939)</li> <li>Fix: v1.7.1 frontend visual fixes @shamoon (#933)</li> <li>Fix: unassigned query params ignored @shamoon (#930)</li> <li>Fix: allow commas in non-multi rules query params @shamoon (#923)</li> <li>Fix: Include version in export for better error messages @stumpylog (#883)</li> <li>Bugfix: Superuser Management Won't Reset Password @stumpylog (#903)</li> <li>Fix Ignore Date Parsing @stumpylog (#721)</li> </ul>"},{"location":"changelog/#documentation_9","title":"Documentation","text":"<ul> <li>Feature use env vars in pre post scripts @ziprandom (#1154)</li> <li>Add <code>myst-parser</code> to fix readthedocs @qcasey (#982)</li> <li>Add \"Created\" as additional (optional) parameter for post_documents @eingemaischt (#965)</li> <li>Bugfix: Adds configurable intoify debounce time @stumpylog (#953)</li> <li>docs: fix some typos @Berjou (#948)</li> <li>[Docs] Fix 2 small typos @tooomm (#946)</li> <li>Convert Changelog to markdown, auto-commit future changelogs @qcasey (#935)</li> <li>[Readme] Fix typo @tooomm (#941)</li> </ul>"},{"location":"changelog/#maintenance_9","title":"Maintenance","text":"<ul> <li>Adds support for Docker secrets @stumpylog (#1034)</li> <li>Bugfix: Don't assume default Docker folders @stumpylog (#1088)</li> <li>Include error information when Redis connection fails @stumpylog (#1016)</li> <li>Fix: add translation for some un-translated tooltips @shamoon (#995)</li> <li>gunicorn: Allow IPv6 sockets @vlcty (#924)</li> </ul>"},{"location":"changelog/#dependencies_4","title":"Dependencies","text":"34 changes  - Fearless scikit-learn updates [@stumpylog](https://github.com/stumpylog) ([#1082](https://github.com/paperless-ngx/paperless-ngx/pull/1082)) - Bump pillow from 9.1.1 to 9.2.0 [@dependabot](https://github.com/dependabot) ([#1193](https://github.com/paperless-ngx/paperless-ngx/pull/1193)) - Bump watchdog from 2.1.8 to 2.1.9 [@dependabot](https://github.com/dependabot) ([#1132](https://github.com/paperless-ngx/paperless-ngx/pull/1132)) - Bump scikit-learn from 1.0.2 to 1.1.1 [@dependabot](https://github.com/dependabot) ([#992](https://github.com/paperless-ngx/paperless-ngx/pull/992)) - Bump setuptools from 62.3.3 to 62.6.0 [@dependabot](https://github.com/dependabot) ([#1150](https://github.com/paperless-ngx/paperless-ngx/pull/1150)) - Bump django-filter from 21.1 to 22.1 [@dependabot](https://github.com/dependabot) ([#1191](https://github.com/paperless-ngx/paperless-ngx/pull/1191)) - Bump actions/setup-python from 3 to 4 [@dependabot](https://github.com/dependabot) ([#1176](https://github.com/paperless-ngx/paperless-ngx/pull/1176)) - Bump sphinx from 4.5.0 to 5.0.2 [@dependabot](https://github.com/dependabot) ([#1151](https://github.com/paperless-ngx/paperless-ngx/pull/1151)) - Bump docker/metadata-action from 3 to 4 [@dependabot](https://github.com/dependabot) ([#1178](https://github.com/paperless-ngx/paperless-ngx/pull/1178)) - Bump tj-actions/changed-files from 22.1 to 23.1 [@dependabot](https://github.com/dependabot) ([#1179](https://github.com/paperless-ngx/paperless-ngx/pull/1179)) - Bump @angular/cli from 13.3.7 to 14.0.4 in /src-ui [@dependabot](https://github.com/dependabot) ([#1177](https://github.com/paperless-ngx/paperless-ngx/pull/1177)) - Bump cypress from 10.0.1 to 10.3.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1187](https://github.com/paperless-ngx/paperless-ngx/pull/1187)) - Bump zone.js from 0.11.5 to 0.11.6 in /src-ui [@dependabot](https://github.com/dependabot) ([#1185](https://github.com/paperless-ngx/paperless-ngx/pull/1185)) - Bump ts-node from 10.8.0 to 10.8.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1184](https://github.com/paperless-ngx/paperless-ngx/pull/1184)) - Bump jest-environment-jsdom from 28.1.0 to 28.1.2 in /src-ui [@dependabot](https://github.com/dependabot) ([#1175](https://github.com/paperless-ngx/paperless-ngx/pull/1175)) - Bump @types/node from 17.0.38 to 18.0.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1183](https://github.com/paperless-ngx/paperless-ngx/pull/1183)) - Bump concurrently from 7.2.1 to 7.2.2 in /src-ui [@dependabot](https://github.com/dependabot) ([#1181](https://github.com/paperless-ngx/paperless-ngx/pull/1181)) - Bump jest-preset-angular from 12.0.1 to 12.1.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1182](https://github.com/paperless-ngx/paperless-ngx/pull/1182)) - Bump jest and @types/jest in /src-ui [@dependabot](https://github.com/dependabot) ([#1180](https://github.com/paperless-ngx/paperless-ngx/pull/1180)) - Bump whitenoise from 6.1.0 to 6.2.0 [@dependabot](https://github.com/dependabot) ([#1103](https://github.com/paperless-ngx/paperless-ngx/pull/1103)) - Bump cypress from 9.6.1 to 10.0.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1083](https://github.com/paperless-ngx/paperless-ngx/pull/1083)) - Bump docker/setup-qemu-action from 1 to 2 [@dependabot](https://github.com/dependabot) ([#1065](https://github.com/paperless-ngx/paperless-ngx/pull/1065)) - Bump docker/setup-buildx-action from 1 to 2 [@dependabot](https://github.com/dependabot) ([#1064](https://github.com/paperless-ngx/paperless-ngx/pull/1064)) - Bump docker/build-push-action from 2 to 3 [@dependabot](https://github.com/dependabot) ([#1063](https://github.com/paperless-ngx/paperless-ngx/pull/1063)) - Bump @cypress/schematic from 1.7.0 to 2.0.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1075](https://github.com/paperless-ngx/paperless-ngx/pull/1075)) - Bump tj-actions/changed-files from 19 to 22.1 [@dependabot](https://github.com/dependabot) ([#1062](https://github.com/paperless-ngx/paperless-ngx/pull/1062)) - Bump concurrently from 7.1.0 to 7.2.1 in /src-ui [@dependabot](https://github.com/dependabot) ([#1073](https://github.com/paperless-ngx/paperless-ngx/pull/1073)) - Bump @types/jest from 27.4.1 to 27.5.2 in /src-ui [@dependabot](https://github.com/dependabot) ([#1074](https://github.com/paperless-ngx/paperless-ngx/pull/1074)) - Bump ts-node from 10.7.0 to 10.8.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1070](https://github.com/paperless-ngx/paperless-ngx/pull/1070)) - Bump jest from 28.0.3 to 28.1.0 in /src-ui [@dependabot](https://github.com/dependabot) ([#1071](https://github.com/paperless-ngx/paperless-ngx/pull/1071)) - Chore: npm package updates 22-06-01 [@shamoon](https://github.com/shamoon) ([#1069](https://github.com/paperless-ngx/paperless-ngx/pull/1069)) - Bump docker/login-action from 1 to 2 [@dependabot](https://github.com/dependabot) ([#1061](https://github.com/paperless-ngx/paperless-ngx/pull/1061)) - Chore: Manually update dependencies [@stumpylog](https://github.com/stumpylog) ([#1013](https://github.com/paperless-ngx/paperless-ngx/pull/1013)) - Chore: Manually update all Python dependencies [@stumpylog](https://github.com/stumpylog) ([#973](https://github.com/paperless-ngx/paperless-ngx/pull/973))"},{"location":"changelog/#paperless-ngx-171","title":"paperless-ngx 1.7.1","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>(chore) Runs pyupgrade to Python 3.8+ \\@stumpylog (#890)</li> <li>Dockerfile Organization \\&amp; Enhancements \\@stumpylog (#888)</li> <li>mobile friendlier manage pages \\@shamoon (#873)</li> <li>Use semver for release process \\@stumpylog (#851)</li> <li>Enable Docker Hub push \\@stumpylog (#828)</li> <li>Feature barcode tiff support \\@gador (#766)</li> <li>Updates GHA workflow to rebuild intermediate images on changes \\@stumpylog (#820)</li> <li>Adds simple Python to wait for Redis broker to be ready \\@stumpylog (#788)</li> <li>Update GHA workflow to build all Docker images \\@stumpylog (#761)</li> </ul>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Feature / fix saved view \\&amp; sort field query params \\@shamoon (#881)</li> <li>Mobile friendlier manage pages \\@shamoon (#873)</li> <li>Add timeout to healthcheck \\@shamoon (#880)</li> <li>Always accept yyyy-mm-dd date inputs \\@shamoon (#864)</li> <li>Fix local Docker image building \\@stumpylog (#849)</li> <li>Fix: show errors on invalid date input \\@shamoon (#862)</li> <li>Fix: Older dates do not display on frontend \\@shamoon (#852)</li> <li>Fixes IMAP UTF8 Authenication \\@stumpylog (#725)</li> <li>Fix password field remains visible \\@shamoon (#840)</li> <li>Fixes Pillow build for armv7 \\@stumpylog (#815)</li> <li>Update frontend localization source file \\@shamoon (#814)</li> <li>Fix install script extra OCR languages format \\@stumpylog (#777)</li> </ul>"},{"location":"changelog/#documentation_10","title":"Documentation","text":"<ul> <li>Use semver for release process \\@stumpylog (#851)</li> <li>Deployment: Consolidate tika compose files \\@qcasey (#866)</li> <li>Fix local Docker image building \\@stumpylog (#849)</li> </ul>"},{"location":"changelog/#maintenance_10","title":"Maintenance","text":"<ul> <li>Dockerfile Organization \\&amp; Enhancements \\@stumpylog (#888)</li> <li>Add timeout to healthcheck \\@shamoon (#880)</li> <li>Use semver for release process \\@stumpylog (#851)</li> <li>Deployment: Consolidate tika compose files \\@qcasey (#866)</li> <li>Fixes Pillow build for armv7 \\@stumpylog (#815)</li> <li>Update frontend localization source file \\@shamoon (#814)</li> <li>Fix install script extra OCR languages format \\@stumpylog (#777)</li> <li>Adds simple Python to wait for Redis broker to be ready \\@stumpylog (#788)</li> </ul>"},{"location":"changelog/#dependencies_5","title":"Dependencies","text":"15 changes  - Bump tj-actions/changed-files from 18.7 to 19 @dependabot ([\\#830](https://github.com/paperless-ngx/paperless-ngx/pull/830)) - Bump asgiref from 3.5.0 to 3.5.1 @dependabot ([\\#867](https://github.com/paperless-ngx/paperless-ngx/pull/867)) - Bump jest from 27.5.1 to 28.0.3 in /src-ui @dependabot ([\\#860](https://github.com/paperless-ngx/paperless-ngx/pull/860)) - Bump @ng-bootstrap/ng-bootstrap from 12.1.0 to 12.1.1 in /src-ui @dependabot ([\\#861](https://github.com/paperless-ngx/paperless-ngx/pull/861)) - Bump @types/node from 17.0.27 to 17.0.29 in /src-ui @dependabot ([\\#833](https://github.com/paperless-ngx/paperless-ngx/pull/833)) - Bump @ng-bootstrap/ng-bootstrap from 12.0.2 to 12.1.0 in /src-ui @dependabot ([\\#834](https://github.com/paperless-ngx/paperless-ngx/pull/834)) - Bump pytest from 7.1.1 to 7.1.2 @dependabot ([\\#806](https://github.com/paperless-ngx/paperless-ngx/pull/806)) - Bump github/codeql-action from 1 to 2 @dependabot ([\\#792](https://github.com/paperless-ngx/paperless-ngx/pull/792)) - Bump imap-tools from 0.53.0 to 0.54.0 @dependabot ([\\#758](https://github.com/paperless-ngx/paperless-ngx/pull/758)) - Bump ocrmypdf from 13.4.2 to 13.4.3 @dependabot ([\\#757](https://github.com/paperless-ngx/paperless-ngx/pull/757)) - Bump importlib-resources from 5.6.0 to 5.7.1 @dependabot ([\\#756](https://github.com/paperless-ngx/paperless-ngx/pull/756)) - Bump tox from 3.24.5 to 3.25.0 @dependabot ([\\#692](https://github.com/paperless-ngx/paperless-ngx/pull/692)) - Bump cypress from 9.5.3 to 9.6.0 in /src-ui @dependabot ([\\#800](https://github.com/paperless-ngx/paperless-ngx/pull/800)) - Bump angular \\&amp; tools to 13.3.4 or 13.3.3 [\\@shamoon](https://github.com/shamoon) ([\\#799](https://github.com/paperless-ngx/paperless-ngx/pull/799)) - Bump concurrently from 7.0.0 to 7.1.0 in /src-ui @dependabot ([\\#797](https://github.com/paperless-ngx/paperless-ngx/pull/797))"},{"location":"changelog/#paperless-ngx-170","title":"paperless-ngx 1.7.0","text":""},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li><code>PAPERLESS_URL</code> is now required when using a reverse proxy. See   #674.</li> </ul>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Allow setting more than one tag in mail rules   \\@jonasc (#270)</li> <li>Global drag'n'drop \\@shamoon   (#283)</li> <li>Fix: download buttons should disable while waiting   \\@shamoon (#630)</li> <li>Update checker \\@shamoon (#591)</li> <li>Show prompt on password-protected pdfs   \\@shamoon (#564)</li> <li>Filtering query params aka browser navigation for filtering   \\@shamoon (#540)</li> <li>Clickable tags in dashboard widgets   \\@shamoon (#515)</li> <li>Add bottom pagination \\@shamoon   (#372)</li> <li>Feature barcode splitter \\@gador   (#532)</li> <li>App loading screen \\@shamoon (#298)</li> <li>Use progress bar for delayed buttons   \\@shamoon (#415)</li> <li>Add minimum length for documents text filter   \\@shamoon (#401)</li> <li>Added nav buttons in the document detail view   \\@GruberViktor (#273)</li> <li>Improve date keyboard input \\@shamoon   (#253)</li> <li>Color theming \\@shamoon (#243)</li> <li>Parse dates when entered without separators   \\@GruberViktor (#250)</li> </ul>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Add \"localhost\" to ALLOWED_HOSTS   \\@gador (#700)</li> <li>Fix: scanners table \\@qcasey (#690)</li> <li>Adds wait for file before consuming   \\@stumpylog (#483)</li> <li>Fix: frontend document editing erases time data   \\@shamoon (#654)</li> <li>Increase length of SavedViewFilterRule   \\@stumpylog (#612)</li> <li>Fixes attachment filename matching during mail fetching   \\@stumpylog (#680)</li> <li>Add <code>PAPERLESS_URL</code> env variable &amp; CSRF var   \\@shamoon (#674)</li> <li>Fix: download buttons should disable while waiting   \\@shamoon (#630)</li> <li>Fixes downloaded filename, add more consumer ignore settings   \\@stumpylog (#599)</li> <li>FIX BUG: case-sensitive matching was not possible   \\@danielBreitlauch (#594)</li> <li>Uses shutil.move instead of rename   \\@gador (#617)</li> <li>Fix npm deps 01.02.22 2 \\@shamoon   (#610)</li> <li>Fix npm dependencies 01.02.22   \\@shamoon (#600)</li> <li>Fix issue 416: implement <code>PAPERLESS_OCR_MAX_IMAGE_PIXELS</code> \\@hacker-h (#441)</li> <li>Fix: exclude cypress from build in Dockerfile   \\@FrankStrieter (#526)</li> <li>Corrections to pass pre-commit hooks   \\@schnuffle (#454)</li> <li>Fix 311 unable to click checkboxes in document list   \\@shamoon (#313)</li> <li>Fix imap tools bug \\@stumpylog   (#393)</li> <li>Fix filterable dropdown buttons arent translated   \\@shamoon (#366)</li> <li>Fix 224: \"Auto-detected date is day before receipt date\"   \\@a17t (#246)</li> <li>Fix minor sphinx errors \\@shamoon   (#322)</li> <li>Fix page links hidden \\@shamoon   (#314)</li> <li>Fix: Include excluded items in dropdown count   \\@shamoon (#263)</li> </ul>"},{"location":"changelog/#translation","title":"Translation","text":"<ul> <li>\\@miku323 contributed to Slovenian   translation</li> <li>\\@FaintGhost contributed to Chinese   Simplified translation</li> <li>\\@DarkoBG79 contributed to Serbian   translation</li> <li>Kemal Secer contributed   to Turkish translation</li> <li>\\@Prominence contributed to   Belarusian translation</li> </ul>"},{"location":"changelog/#documentation_11","title":"Documentation","text":"<ul> <li>Fix: scanners table \\@qcasey (#690)</li> <li>Add <code>PAPERLESS_URL</code> env variable &amp; CSRF var   \\@shamoon (#674)</li> <li>Fixes downloaded filename, add more consumer ignore settings   \\@stumpylog (#599)</li> <li>Fix issue 416: implement <code>PAPERLESS_OCR_MAX_IMAGE_PIXELS</code> \\@hacker-h (#441)</li> <li>Fix minor sphinx errors \\@shamoon   (#322)</li> </ul>"},{"location":"changelog/#maintenance_11","title":"Maintenance","text":"<ul> <li>Add <code>PAPERLESS_URL</code> env variable &amp; CSRF var   \\@shamoon (#674)</li> <li>Chore: Implement release-drafter action for Changelogs   \\@qcasey (#669)</li> <li>Chore: Add CODEOWNERS \\@qcasey (#667)</li> <li>Support docker-compose v2 in install   \\@stumpylog (#611)</li> <li>Add Belarusian localization \\@shamoon   (#588)</li> <li>Add Turkish localization \\@shamoon   (#536)</li> <li>Add Serbian localization \\@shamoon   (#504)</li> <li>Create PULL_REQUEST_TEMPLATE.md   \\@shamoon (#304)</li> <li>Add Chinese localization \\@shamoon   (#247)</li> <li>Add Slovenian language for frontend   \\@shamoon (#315)</li> </ul>"},{"location":"changelog/#paperless-ngx-160","title":"paperless-ngx 1.6.0","text":"<p>This is the first release of the revived paperless-ngx project \ud83c\udf89. Thank you to everyone on the paperless-ngx team for your initiative and excellent teamwork!</p> <p>Version 1.6.0 merges several pending PRs from jonaswinkler's repo and includes new feature updates and bug fixes. Major backend and UI changes include:</p> <ul> <li>Updated docs, scripts, CI, and containers to paperless-ngx.</li> <li>Updated Python and Angular dependencies.</li> <li>Dropped support for Python 3.7.</li> <li>Dropped support for Ansible playbooks (thanks   \\@slankes #109). If someone would   like to continue supporting them, please see our ansible   repo.</li> <li>Python code is now required to use Black formatting (thanks   \\@kpj #168).</li> <li>\\@tribut added support for a custom SSO   logout redirect (jonaswinkler#1258). See   <code>PAPERLESS_LOGOUT_REDIRECT_URL</code>.</li> <li>\\@shamoon added a loading indicator   when document list is reloading (jonaswinkler#1297).</li> <li>\\@shamoon improved the PDF viewer on   mobile (#2).</li> <li>\\@shamoon added 'any' / 'all' and   'not' filtering with tags (#10).</li> <li>\\@shamoon added warnings for unsaved   changes, with smart edit buttons (#13).</li> <li>\\@benjaminfrank enabled a   non-root access to port 80 via systemd (#18).</li> <li>\\@tribut added simple \"delete to   trash\" functionality (#24). See <code>PAPERLESS_TRASH_DIR</code>.</li> <li>\\@amenk fixed the search box overlay   menu on mobile (#32).</li> <li>\\@dblitt updated the login form to not   auto-capitalize usernames (#36).</li> <li>\\@evilsidekick293 made the   worker timeout configurable (#37). See <code>PAPERLESS_WORKER_TIMEOUT</code>.</li> <li>\\@Nicarim fixed downloads of UTF-8   formatted documents in Firefox (#56).</li> <li>\\@mweimerskirch sorted the   language dropdown by locale (#78).</li> <li>\\@mweimerskirch enabled the   Czech (#83) and Danish (#84) translations.</li> <li>\\@cschmatzler enabled specifying   the webserver port (#124). See <code>PAPERLESS_PORT</code>.</li> <li>\\@muellermartin fixed an error   when uploading transparent PNGs (#133).</li> <li>\\@shamoon created a slick new logo   (#165).</li> <li>\\@tim-vogel fixed exports missing   groups (#193).</li> </ul> <p>Known issues:</p> <ul> <li>1.6.0 included a malformed package-lock.json, as a result users who   want to build the docker image themselves need to change line 6 of   the <code>Dockerfile</code> to   <code>RUN npm update npm -g &amp;&amp; npm install --legacy-peer-deps</code>.</li> </ul> <p>Thank you to the following people for their documentation updates, fixes, and comprehensive testing:</p> <p>\\@m0veax, \\@a17t, \\@fignew, \\@muued, \\@bauerj, \\@isigmund, \\@denilsonsa, \\@mweimerskirch, \\@alexander-bauer, \\@apeltzer, \\@tribut, \\@yschroeder, \\@gador, \\@sAksham-Ar, \\@sbrunner, \\@philpagel, \\@davemachado, \\@2600box, \\@qcasey, \\@Nicarim, \\@kpj, \\@filcuk, \\@Timoms, \\@mattlamb99, \\@padraigkitterick, \\@ajkavanagh, \\@Tooa, \\@Unkn0wnCat, \\@pewter77, \\@stumpylog, \\@Toxix, \\@azapater, \\@jschpp</p> <p>Another big thanks to the people who have contributed translations:</p> <ul> <li>Michel Weimerskirch (michel_weimerskirch) suggested 31 translations   into French and Luxembourgish.</li> <li>jo.vandeginste suggested 21 translations into Dutch.</li> <li>Lars S\u00f8rensen (Lrss) suggested 486 translations into Danish.</li> <li>Alex (Sky-Dragon) voted for 46 translations in German.</li> <li>Yannic Schr\u00f6der (yschroeder) suggested 14 translations into German.</li> <li>David Morais Ferreira (DavidMoraisFerreira) voted for 10   translations in Portuguese and Luxembourgish.</li> <li>David Morais Ferreira (DavidMoraisFerreira) suggested 88   translations into French, German, Portuguese, Portuguese, Brazilian   and Luxembourgish.</li> <li>\u6c6a\u6ce0\u6ca3 (wlfcss) suggested 13 translations into Chinese Traditional.</li> <li>Lars S\u00f8rensen (Lrss) suggested 167 translations into Danish.</li> <li>Philmo67 suggested 11 translations into French.</li> </ul>"},{"location":"changelog/#paperless-ng","title":"Paperless-ng","text":""},{"location":"changelog/#paperless-ng-150","title":"paperless-ng 1.5.0","text":"<p>Support for Python 3.6 was dropped.</p> <ul> <li>Updated python dependencies.</li> <li>Base image of the docker image changed from Debian Buster to Debian   Bullseye due to its recent release.</li> <li>The docker image now uses python 3.9.</li> <li>Added the Luxembourgish locale. Thanks for translating!</li> <li>Daniel Albers added support for making the   files and folders ignored by the paperless consume folder scanner   configurable. See <code>PAPERLESS_CONSUMER_IGNORE_PATTERNS</code>.</li> </ul>"},{"location":"changelog/#paperless-ng-145","title":"paperless-ng 1.4.5","text":"<p>This is a maintenance release.</p> <ul> <li>Updated Python and Angular dependencies.</li> <li>Changed the algorithm that changes permissions during startup. This   is still fast, and will hopefully cause less issues.</li> <li>Fixed an issue that would sometimes cause paperless to write an   incomplete classification model file to disk.</li> <li>Fixed an issue with the OCRmyPDF parser that would always try to   extract text with PDFminer even from non-PDF files.</li> </ul>"},{"location":"changelog/#paperless-ng-144","title":"paperless-ng 1.4.4","text":"<ul> <li>Drastically decreased the startup time of the docker container. The   startup script adjusts file permissions of all data only if changes   are required.</li> <li>Paperless mail: Added ability to specify the character set for each   server.</li> <li>Document consumption: Ignore Mac OS specific files such as   <code>.DS_STORE</code> and <code>._XXXXX.pdf</code>.</li> <li>Fixed an issue with the automatic matching algorithm that prevents   paperless from consuming new files.</li> <li>Updated translations.</li> </ul>"},{"location":"changelog/#paperless-ng-143","title":"paperless-ng 1.4.3","text":"<ul> <li>Additions and changes</li> <li>Added Swedish locale.</li> <li>St\u00e9phane Brunner added an option     to disable the progress bars of all management commands.</li> <li>Jo Vandeginste added support     for RTF documents to the Apache TIKA parser.</li> <li>Michael Shamoon added dark mode     for the login and logout pages.</li> <li>Alexander Menk added additional     stylesheets for printing. You can now print any page of     paperless and the print result will hide the page header,     sidebar, and action buttons.</li> <li>Added support for sorting when using full text search.</li> <li>Fixes</li> <li>puuu fixed     <code>PAPERLESS_FORCE_SCRIPT_NAME</code>. You can now host paperless on sub     paths such as <code>https://localhost:8000/paperless/</code>.</li> <li>Fixed an issue with the document consumer crashing on certain     documents due to issues with pdfminer.six. This library is used     for PDF text extraction.</li> </ul>"},{"location":"changelog/#paperless-ng-142","title":"paperless-ng 1.4.2","text":"<ul> <li>Fixed an issue with <code>sudo</code> that caused paperless to not start on   many Raspberry Pi devices. Thank you   WhiteHatTux!</li> </ul>"},{"location":"changelog/#paperless-ng-141","title":"paperless-ng 1.4.1","text":"<ul> <li>Added Polish locale.</li> <li>Changed some parts of the Dockerfile to hopefully restore   functionality on certain ARM devices.</li> <li>Updated python dependencies.</li> <li>Michael Shamoon added a sticky filter   / bulk edit bar.</li> <li>sbrl changed the docker-entrypoint.sh   script to increase compatibility with NFS shares.</li> <li>Chris Nagy added support for   creating a super user by passing <code>PAPERLESS_ADMIN_USER</code> and   <code>PAPERLESS_ADMIN_PASSWORD</code> as environment variables to the docker   container.</li> </ul>"},{"location":"changelog/#paperless-ng-140","title":"paperless-ng 1.4.0","text":"<ul> <li>Docker images now use tesseract 4.1.1, which should fix a series of   issues with OCR.</li> <li>The full text search now displays results using the default document   list. This enables selection, filtering and bulk edit on search   results.</li> <li>Changes</li> <li>Firefox only: Highlight search query in PDF previews.</li> <li>New URL pattern for accessing documents by ASN directly     (http:///asn/123) <li>Added logging when executing pre* and post-consume scripts.</li> <li>Better error logging during document consumption.</li> <li>Updated python dependencies.</li> <li>Automatically inserts typed text when opening \"Create new\"     dialogs on the document details page.</li> <li>Fixes</li> <li>Fixed an issue with null characters in the document content.</li> <p>Note</p> <p>The changed to the full text searching require you to reindex your documents. The docker image does this automatically, you don't need to do anything. To do this, execute the <code>document_index reindex</code> management command (see Managing the document search index).</p>"},{"location":"changelog/#paperless-ng-132","title":"paperless-ng 1.3.2","text":"<ul> <li>Added translation into Portuguese.</li> <li>Changes</li> <li>The exporter now exports user accounts, mail accounts, mail     rules and saved views as well.</li> <li>Fixes</li> <li>Minor layout issues with document cards and the log viewer.</li> <li>Fixed an issue with any/all/exact matching when characters used     in regular expressions were used for the match.</li> </ul>"},{"location":"changelog/#paperless-ng-131","title":"paperless-ng 1.3.1","text":"<ul> <li>Added translation into Spanish and Russian.</li> <li>Other changes</li> <li>ISO-8601 date format will now always show years with 4 digits.</li> <li>Added the ability to search for a document with a specific ASN.</li> <li>The document cards now display ASN, types and dates in a more     organized way.</li> <li>Added document previews when hovering over the preview button.</li> <li>Fixes</li> <li>The startup check for write permissions now works properly on     NFS shares.</li> <li>Fixed an issue with the search results score indicator.</li> <li>Paperless was unable to generate thumbnails for encrypted PDF     files and failed. Paperless will now generate a default     thumbnail for these files.</li> <li>Fixed <code>AUTO_LOGIN_USERNAME</code>: Unable to perform POST/PUT/DELETE     requests and unable to receive WebSocket messages.</li> </ul>"},{"location":"changelog/#paperless-ng-130","title":"paperless-ng 1.3.0","text":"<p>This release contains new database migrations.</p> <ul> <li>Changes</li> <li>The REST API is versioned from this point onwards. This will     allow me to make changes without breaking existing clients. See     the documentation about API versioning for details.</li> <li>Added a color picker for tag colors.</li> <li>Added the ability to use the filter for searching the document     content as well.</li> <li>Added translations into Italian and Romanian. Thank you!</li> <li>Close individual documents from the sidebar. Thanks to Michael     Shamoon.</li> <li>BolkoSchreiber added an     option to disable/enable thumbnail inversion in dark mode.</li> <li>Simon Taddiken added the ability     to customize the header used for remote user authentication with     SSO applications.</li> <li>Bug fixes</li> <li>Fixed an issue with the auto matching algorithm when more than     256 tags were used.</li> </ul>"},{"location":"changelog/#paperless-ng-121","title":"paperless-ng 1.2.1","text":"<ul> <li>Rodrigo Avelino translated   Paperless into Portuguese (Brazil)!</li> <li>The date input fields now respect the currently selected date   format.</li> <li>Added a fancy icon when adding paperless to the home screen on iOS   devices. Thanks to Joel Nordell.</li> <li>When using regular expression matching, the regular expression is   now validated before saving the tag/correspondent/type.</li> <li>Regression fix: Dates on the front end did not respect date locale   settings in some cases.</li> </ul>"},{"location":"changelog/#paperless-ng-120","title":"paperless-ng 1.2.0","text":"<ul> <li>Changes to the OCRmyPDF integration</li> <li>Added support for deskewing and automatic rotation of     incorrectly rotated pages. This is enabled by default, see     OCR settings.</li> <li>Better support for encrypted files.</li> <li>Better support for various other PDF files: Paperless will now     attempt to force OCR with safe options when OCR fails with the     configured options.</li> <li>Added an explicit option to skip cleaning with <code>unpaper</code>.</li> <li>Download multiple selected documents as a zip archive.</li> <li>The document list now remembers the current page.</li> <li>Improved responsiveness when switching between saved views and the   document list.</li> <li>Increased the default wait time when observing files in the   consumption folder with polling from 1 to 5 seconds. This will   decrease the likelihood of paperless consuming partially written   files.</li> <li>Fixed a crash of the document archiver management command when   trying to process documents with unknown mime types.</li> <li>Paperless no longer depends on <code>libpoppler-cpp-dev</code>.</li> </ul>"},{"location":"changelog/#paperless-ng-114","title":"paperless-ng 1.1.4","text":"<ul> <li>Added English (GB) locale.</li> <li>Added ISO-8601 date display option.</li> </ul>"},{"location":"changelog/#paperless-ng-113","title":"paperless-ng 1.1.3","text":"<ul> <li>Added a docker-specific configuration option to adjust the number of   worker processes of the web server. See   Docker options.</li> <li>Some more memory usage optimizations.</li> <li>Don't show inbox statistics if no inbox tag is defined.</li> </ul>"},{"location":"changelog/#paperless-ng-112","title":"paperless-ng 1.1.2","text":"<ul> <li>Always show top left corner of thumbnails, even for extra wide   documents.</li> <li>Added a management command for executing the sanity checker   directly. See management utilities.</li> <li>The weekly sanity check now reports messages in the log files.</li> <li>Fixed an issue with the metadata tab not reporting anything in case   of missing files.</li> <li>Reverted a change from 1.1.0 that caused huge memory usage due to   redis caching.</li> <li>Some memory usage optimizations.</li> </ul>"},{"location":"changelog/#paperless-ng-111","title":"paperless-ng 1.1.1","text":"<p>This release contains new database migrations.</p> <ul> <li>Fixed a bug in the sanity checker that would cause it to display \"x   not in list\" errors instead of actual issues.</li> <li>Fixed a bug with filename generation for archive filenames that   would cause the archive files of two documents to overlap.</li> <li>This happened when <code>PAPERLESS_FILENAME_FORMAT</code> is used and the     filenames of two or more documents are the same, except for the     file extension.</li> <li>Paperless will now store the archive filename in the database as     well instead of deriving it from the original filename, and use     the same logic for detecting and avoiding filename clashes     that's also used for original filenames.</li> <li>The migrations will repair any missing archive files. If you're     using tika, ensure that tika is running while performing the     migration. Docker-compose will take care of that.</li> <li>Fixed a bug with thumbnail regeneration when TIKA integration was   used.</li> <li>Added ASN as a placeholder field to the filename format.</li> <li>The docker image now comes with built-in shortcuts for most   management commands. These are now the recommended way to execute   management commands, since these also ensure that they're always   executed as the paperless user and you're less likely to run into   permission issues. See   management commands.</li> </ul>"},{"location":"changelog/#paperless-ng-110","title":"paperless-ng 1.1.0","text":"<ul> <li> <p>Document processing status</p> </li> <li> <p>Paperless now shows the status of processing documents on the     dashboard in real time.</p> </li> <li>Status notifications when<ul> <li>New documents are detected in the consumption folder, in   mails, uploaded on the front end, or added with one of the   mobile apps.</li> <li>Documents are successfully added to paperless.</li> <li>Document consumption failed (with error messages)</li> </ul> </li> <li> <p>Configuration options to enable/disable individual     notifications.</p> </li> <li> <p>Live updates to document lists and saved views when new documents   are added.</p> </li> </ul> <p>!!! tip</p> <p>For status notifications and live updates to work, paperless now   requires an ASGI-enabled   web server. The docker images uses <code>gunicorn</code> and an ASGI-enabled   worker called uvicorn, and there is no   need to configure anything.</p> <p>For bare metal installations, changes are required for the   notifications to work. Adapt the service   <code>paperless-webserver.service</code> to use the supplied <code>gunicorn.conf.py</code>   configuration file and adapt the reference to the ASGI application   as follows:</p> <pre><code>ExecStart=/opt/paperless/.local/bin/gunicorn -c /opt/paperless/gunicorn.conf.py paperless.asgi:application\n</code></pre> <p>Paperless will continue to work with WSGI, but you will not get any   status notifications.</p> <p>Apache <code>mod_wsgi</code> users, see   this note.</p> <ul> <li> <p>Paperless now offers suggestions for tags, correspondents and types   on the document detail page.</p> </li> <li> <p>Added an interactive easy install script that automatically   downloads, configures and starts paperless with docker.</p> </li> <li> <p>Official support for Python 3.9.</p> </li> <li> <p>Other changes and fixes</p> </li> <li> <p>Adjusted the default parallelization settings to run more than     one task in parallel on systems with 4 or less cores. This     addresses issues with paperless not consuming any new files when     other tasks are running.</p> </li> <li>Fixed a rare race condition that would cause paperless to     process incompletely written files when using the upload on the     dashboard.</li> <li>The document classifier no longer issues warnings and errors     when auto matching is not used at all.</li> <li>Better icon for document previews.</li> <li>Better info section in the side bar.</li> <li>Paperless no longer logs to the database. Instead, logs are     written to rotating log files. This solves many \"database is     locked\" issues on Raspberry Pi, especially when SQLite is used.</li> <li>By default, log files are written to <code>PAPERLESS_DATA_DIR/log/</code>.     Logging settings can be adjusted with <code>PAPERLESS_LOGGING_DIR</code>,     <code>PAPERLESS_LOGROTATE_MAX_SIZE</code> and     <code>PAPERLESS_LOGROTATE_MAX_BACKUPS</code>.</li> </ul>"},{"location":"changelog/#paperless-ng-100","title":"paperless-ng 1.0.0","text":"<p>Nothing special about this release, but since there are relatively few bug reports coming in, I think that this is reasonably stable.</p> <ul> <li>Document export</li> <li>The document exporter has been rewritten to support updating an     already existing export in place. This enables incremental     backups with <code>rsync</code>.</li> <li>The document exporter supports naming exported files according     to <code>PAPERLESS_FILENAME_FORMAT</code>.</li> <li>The document exporter locks the media directory and the database     during execution to ensure that the resulting export is     consistent.</li> <li>See the updated documentation for more details.</li> <li>Other changes and additions</li> <li>Added a language selector to the settings.</li> <li>Added date format options to the settings.</li> <li>Range selection with shift clicking is now possible in the     document list.</li> <li>Filtering correspondent, type and tag management pages by name.</li> <li>Focus \"Name\" field in dialogs by default.</li> </ul>"},{"location":"changelog/#paperless-ng-0914","title":"paperless-ng 0.9.14","text":"<p>Starting with this version, releases are getting built automatically. This release also comes with changes on how to install and update paperless.</p> <ul> <li>Paperless now uses GitHub Actions to make releases and build docker   images.</li> <li>Docker images are available for amd64, armhf, and aarch64.</li> <li>When you pull an image from Docker Hub, Docker will     automatically select the correct image for you.</li> <li>Changes to docker installations and updates</li> <li>The <code>-dockerfiles.tar.xz</code> release archive is gone. Instead,     simply grab the docker files from <code>/docker/compose</code> in the     repository if you wish to install paperless by pulling from the     hub.</li> <li>The docker compose files in <code>/docker/compose</code> were changed to     always use the <code>latest</code> version automatically. In order to do     further updates, simply do a <code>docker-compose pull</code>. The     documentation has been updated.</li> <li>The docker compose files were changed to restart paperless on     system boot only if it was running before shutdown.</li> <li>Documentation of the docker-compose files about what they do.</li> <li>Changes to bare metal installations and updates</li> <li>The release archive is built exactly like before. However, the     release now comes with already compiled translation messages and     collected static files. Therefore, the update steps     <code>compilemessages</code> and <code>collectstatic</code> are now obsolete.</li> <li>Other changes</li> <li>A new configuration option <code>PAPERLESS_IGNORE_DATES</code> was added by     jayme-github. This can be used     to instruct paperless to ignore certain dates (such as your date     of birth) when guessing the date from the document content. This     was actually introduced in 0.9.12, I just forgot to mention it     in the changelog.</li> <li>The filter drop downs now display selected entries on top of all     other entries.</li> <li>The PostgreSQL client now supports setting an explicit <code>sslmode</code>     to force encryption of the connection to PostgreSQL.</li> <li>The docker images now come with <code>jbig2enc</code>, which is a lossless     image encoder for PDF documents and decreases the size of     certain PDF/A documents.</li> <li>When using any of the manual matching algorithms, paperless now     logs messages about when and why these matching algorithms     matched.</li> <li>The default settings for parallelization in paperless were     adjusted to always leave one CPU core free.</li> <li>Added an option to the frontend to choose which method to use     for displaying PDF documents.</li> <li>Fixes</li> <li>An issue with the tika parser not picking up files from the     consumption directory was fixed.</li> <li>A couple changes to the dark mode and fixes to several other     layout issues.</li> <li>An issue with the drop downs for correspondents, tags and types     not properly supporting filtering with special characters was     fixed.</li> <li>Fixed an issue with filenames of downloaded files: Dates where     off by one day due to timezone issues.</li> <li>Searching will continue to work even when the index returns     non-existing documents. This resulted in \"Document does not     exist\" errors before. Instead, a warning is logged, indicating     the issue.</li> <li>An issue with the consumer crashing when invalid regular     expression were used was fixed.</li> </ul>"},{"location":"changelog/#paperless-ng-0913","title":"paperless-ng 0.9.13","text":"<ul> <li>Fixed an issue with Paperless not starting due to the new Tika   integration when <code>USERMAP_UID</code> and <code>USERMAP_GID</code> was used in the   <code>docker-compose.env</code> file.</li> </ul>"},{"location":"changelog/#paperless-ng-0912","title":"paperless-ng 0.9.12","text":"<ul> <li>Paperless localization</li> <li>Thanks to the combined efforts of many users, Paperless is now     available in English, Dutch, French and German.</li> <li>Thanks to Jo Vandeginste,   Paperless has optional support for Office documents such as .docx,   .doc, .odt and more.</li> <li>See the Tika settings on how to enable this     feature. This feature requires two additional services (one for     parsing Office documents and metadata extraction and another for     converting Office documents to PDF), and is therefore not enabled     on default installations.</li> <li>As with all other documents, paperless converts Office documents     to PDF and stores both the original as well as the archived PDF.</li> <li>Dark mode</li> <li>Thanks to Michael Shamoon,     paperless now has a dark mode. Configuration is available in the     settings.</li> <li>Other changes and additions</li> <li>The PDF viewer now uses a local copy of some dependencies     instead of fetching them from the internet. Thanks to     slorenz.</li> <li>Revamped search bar styling thanks to Michael     Shamoon.</li> <li>Sorting in the document list by clicking on table headers.</li> <li>A button was added to the document detail page that assigns a     new ASN to a document.</li> <li>Form field validation: When providing invalid input in a form     (such as a duplicate ASN or no name), paperless now has visual     indicators and clearer error messages about what's wrong.</li> <li>Paperless disables buttons with network actions (such as save     and delete) when a network action is active. This indicates that     something is happening and prevents double clicking.</li> <li>When using \"Save &amp; next\", the title field is focussed     automatically to better support keyboard editing.</li> <li>E-Mail: Added filter rule parameters to allow inline attachments     (watch out for mails with inlined images!) and attachment     filename filters with wildcards.</li> <li>Support for remote user authentication thanks to Michael     Shamoon. This is useful for hiding     Paperless behind single sign on applications such as     authelia.</li> <li>\"Clear filters\" has been renamed to \"Reset filters\" and now     correctly restores the default filters on saved views. Thanks to     Michael Shamoon</li> <li>Fixes</li> <li>Paperless was unable to save views when \"Not assigned\" was     chosen in one of the filter dropdowns.</li> <li>Clearer error messages when pre and post consumption scripts do     not exist.</li> <li>The post consumption script is executed later in the consumption     process. Before the change, an ID was passed to the script     referring to a document that did not yet exist in the database.</li> </ul>"},{"location":"changelog/#paperless-ng-0911","title":"paperless-ng 0.9.11","text":"<ul> <li>Fixed an issue with the docker image not starting at all due to a   configuration change of the web server.</li> </ul>"},{"location":"changelog/#paperless-ng-0910","title":"paperless-ng 0.9.10","text":"<ul> <li>Bulk editing</li> <li>Thanks to Michael Shamoon, we've     got a new interface for the bulk editor.</li> <li>There are some configuration options in the settings to alter     the behavior.</li> <li>Other changes and additions</li> <li>Thanks to zjean, paperless now     publishes a webmanifest, which is useful for adding the     application to home screens on mobile devices.</li> <li>The Paperless-ng logo now navigates to the dashboard.</li> <li>Filter for documents that don't have any correspondents, types     or tags assigned.</li> <li>Tags, types and correspondents are now sorted case insensitive.</li> <li>Lots of preparation work for localization support.</li> <li>Fixes</li> <li>Added missing dependencies for Raspberry Pi builds.</li> <li>Fixed an issue with plain text file consumption: Thumbnail     generation failed due to missing fonts.</li> <li>An issue with the search index reporting missing documents after     bulk deletes was fixed.</li> <li>Issue with the tag selector not clearing input correctly.</li> <li>The consumer used to stop working when encountering an     incomplete classifier model file.</li> </ul> <p>Note</p> <p>The bulk delete operations did not update the search index. Therefore, documents that you deleted remained in the index and caused the search to return messages about missing documents when searching. Further bulk operations will properly update the index.</p> <p>However, this change is not retroactive: If you used the delete method of the bulk editor, you need to reindex your search index by running the management command <code>document_index</code> with the argument <code>reindex</code>.</p>"},{"location":"changelog/#paperless-ng-099","title":"paperless-ng 0.9.9","text":"<p>Christmas release!</p> <ul> <li>Bulk editing</li> <li>Paperless now supports bulk editing.</li> <li>The following operations are available: Add and remove     correspondents, tags, document types from selected documents, as     well as mass-deleting documents.</li> <li>We've got a more fancy UI in the works that makes these     features more accessible, but that's not quite ready yet.</li> <li>Searching</li> <li>Paperless now supports searching for similar documents (\"More     like this\") both from the document detail page as well as from     individual search results.</li> <li>A search score indicates how well a document matches the search     query, or how similar a document is to a given reference     document.</li> <li>Other additions and changes</li> <li>Clarification in the UI that the fields \"Match\" and \"Is     insensitive\" are not relevant for the Auto matching algorithm.</li> <li>New select interface for tags, types and correspondents allows     filtering. This also improves tag selection. Thanks again to     Michael Shamoon!</li> <li>Page navigation controls for the document viewer, thanks to     Michael Shamoon.</li> <li>Layout changes to the small cards document list.</li> <li>The dashboard now displays the username (or full name if     specified in the admin) on the dashboard.</li> <li>Fixes</li> <li>An error that caused the document importer to crash was fixed.</li> <li>An issue with changes not being possible when     <code>PAPERLESS_COOKIE_PREFIX</code> is used was fixed.</li> <li>The date selection filters now allow manual entry of dates.</li> <li>Feature Removal</li> <li>Most of the guesswork features have been removed. Paperless no     longer tries to extract correspondents and tags from file names.</li> </ul>"},{"location":"changelog/#paperless-ng-098","title":"paperless-ng 0.9.8","text":"<p>This release addresses two severe issues with the previous release.</p> <ul> <li>The delete buttons for document types, correspondents and tags were   not working.</li> <li>The document section in the admin was causing internal server errors   (500).</li> </ul>"},{"location":"changelog/#paperless-ng-097","title":"paperless-ng 0.9.7","text":"<ul> <li>Front end</li> <li>Thanks to the hard work of Michael     Shamoon, paperless now comes with a     much more streamlined UI for filtering documents.</li> <li>Michael Shamoon replaced the     document preview with another component. This should fix     compatibility with Safari browsers.</li> <li>Added buttons to the management pages to quickly show all     documents with one specific tag, correspondent, or title.</li> <li>Paperless now stores your saved views on the server and     associates them with your user account. This means that you can     access your views on multiple devices and have separate views     for different users. You will have to recreate your views.</li> <li>The GitHub and documentation links now open in new tabs/windows.     Thanks to rYR79435.</li> <li>Paperless now generates default saved view names when saving     views with certain filter rules.</li> <li>Added a small version indicator to the front end.</li> <li>Other additions and changes</li> <li>The new filename format field <code>{tag_list}</code> inserts a list of     tags into the filename, separated by comma.</li> <li>The <code>document_retagger</code> no longer removes inbox tags or tags     without matching rules.</li> <li>The new configuration option <code>PAPERLESS_COOKIE_PREFIX</code> allows     you to run multiple instances of paperless on different ports.     This option enables you to be logged in into multiple instances     by specifying different cookie names for each instance.</li> <li>Fixes</li> <li>Sometimes paperless would assign dates in the future to newly     consumed documents.</li> <li>The filename format fields <code>{created_month}</code> and <code>{created_day}</code>     now use a leading zero for single digit values.</li> <li>The filename format field <code>{tags}</code> can no longer be used without     arguments.</li> <li>Paperless was not able to consume many images (especially images     from mobile scanners) due to missing DPI information. Paperless     now assumes A4 paper size for PDF generation if no DPI     information is present.</li> <li>Documents with empty titles could not be opened from the table     view due to the link being empty.</li> <li>Fixed an issue with filenames containing special characters such     as <code>:</code> not being accepted for upload.</li> <li>Fixed issues with thumbnail generation for plain text files.</li> </ul>"},{"location":"changelog/#paperless-ng-096","title":"paperless-ng 0.9.6","text":"<p>This release focusses primarily on many small issues with the UI.</p> <ul> <li>Front end</li> <li>Paperless now has proper window titles.</li> <li>Fixed an issue with the small cards when more than 7 tags were     used.</li> <li>Navigation of the \"Show all\" links adjusted. They navigate to     the saved view now, if available in the sidebar.</li> <li>Some indication on the document lists that a filter is active     was added.</li> <li>There's a new filter to filter for documents that do not have     a certain tag.</li> <li>The file upload box now shows upload progress.</li> <li>The document edit page was reorganized.</li> <li>The document edit page shows various information about a     document.</li> <li>An issue with the height of the preview was fixed.</li> <li>Table issues with too long document titles fixed.</li> <li>API</li> <li>The API now serves file names with documents.</li> <li>The API now serves various metadata about documents.</li> <li>API documentation updated.</li> <li>Other</li> <li>Fixed an issue with the docker image when a non-standard     PostgreSQL port was used.</li> <li>The docker image was trying check for installed languages before     actually installing them.</li> <li><code>FILENAME_FORMAT</code> placeholder for document types.</li> <li>The filename formatter is now less restrictive with file names     and tries to conserve the original correspondents, types and     titles as much as possible.</li> <li>The filename formatter does not include the document ID in     filenames anymore. It will rather append <code>_01</code>, <code>_02</code>, etc when     it detects duplicate filenames.</li> </ul> <p>Note</p> <p>The changes to the filename format will apply to newly added documents and changed documents. If you want all files to reflect these changes, execute the <code>document_renamer</code> management command.</p>"},{"location":"changelog/#paperless-ng-095","title":"paperless-ng 0.9.5","text":"<p>This release concludes the big changes I wanted to get rolled into paperless. The next releases before 1.0 will focus on fixing issues, primarily.</p> <ul> <li>OCR</li> <li>Paperless now uses     OCRmyPDF to perform OCR     on documents. It still uses tesseract under the hood, but the     PDF parser of Paperless has changed considerably and will behave     different for some douments.</li> <li>OCRmyPDF creates archived PDF/A documents with embedded text     that can be selected in the front end.</li> <li>Paperless stores archived versions of documents alongside with     the originals. The originals can be accessed on the document     edit page. If available, a dropdown menu will appear next to the     download button.</li> <li>Many of the configuration options regarding OCR have changed.     See OCR settings for details.</li> <li>Paperless no longer guesses the language of your documents. It     always uses the language that you specified with     <code>PAPERLESS_OCR_LANGUAGE</code>. Be sure to set this to the language     the majority of your documents are in. Multiple languages can be     specified, but that requires more CPU time.</li> <li>The management command <code>document_archiver</code>     can be used to create archived versions for already existing documents.</li> <li>Tags from consumption folder.</li> <li>Thanks to jayme-github,     paperless now consumes files from sub folders in the consumption     folder and is able to assign tags based on the sub folders a     document was found in. This can be configured with     <code>PAPERLESS_CONSUMER_RECURSIVE</code> and     <code>PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS</code>.</li> <li>API</li> <li>The API now offers token authentication.</li> <li>The endpoint for uploading documents now supports specifying     custom titles, correspondents, tags and types. This can be used     by clients to override the default behavior of paperless. See     POSTing documents.</li> <li>The document endpoint of API now serves documents in this form:<ul> <li>correspondents, document types and tags are referenced by   their ID in the fields <code>correspondent</code>, <code>document_type</code> and   <code>tags</code>. The <code>*_id</code> versions are gone. These fields are   read/write.</li> <li>paperless does not serve nested tags, correspondents or   types anymore.</li> </ul> </li> <li>Front end</li> <li>Paperless does some basic caching of correspondents, tags and     types and will only request them from the server when necessary     or when entirely reloading the page.</li> <li>Document list fetching is about 10%-30% faster now, especially     when lots of tags/correspondents are present.</li> <li>Some minor improvements to the front end, such as document count     in the document list, better highlighting of the current page,     and improvements to the filter behavior.</li> <li>Fixes:</li> <li>A bug with the generation of filenames for files with     unsupported types caused the exporter and document saving to     crash.</li> <li>Mail handling no longer exits entirely when encountering errors.     It will skip the account/rule/message on which the error     occured.</li> <li>Assigning correspondents from mail sender names failed for very     long names. Paperless no longer assigns correspondents in these     cases.</li> </ul>"},{"location":"changelog/#paperless-ng-094","title":"paperless-ng 0.9.4","text":"<ul> <li>Searching:</li> <li>Paperless now supports searching by tags, types and dates and     correspondents. In order to have this applied to your existing     documents, you need to perform a <code>document_index reindex</code>     management command (see document search index)     that adds the data to the search index. You only need to do this     once, since the schema of the search index changed. Paperless     keeps the index updated after that whenever something changes.</li> <li>Paperless now has spelling corrections (\"Did you mean\") for     miss-typed queries.</li> <li>The documentation contains     information about the query syntax.</li> <li>Front end:</li> <li>Clickable tags, correspondents and types allow quick filtering     for related documents.</li> <li>Saved views are now editable.</li> <li>Preview documents directly in the browser.</li> <li>Navigation from the dashboard to saved views.</li> <li>Fixes:</li> <li>A severe error when trying to use post consume scripts.</li> <li>An error in the consumer that cause invalid messages of missing     files to show up in the log.</li> <li>The documentation now contains information about bare metal installs   and a section about how to setup the development environment.</li> </ul>"},{"location":"changelog/#paperless-ng-093","title":"paperless-ng 0.9.3","text":"<ul> <li>Setting <code>PAPERLESS_AUTO_LOGIN_USERNAME</code> replaces   <code>PAPERLESS_DISABLE_LOGIN</code>. You have to specify your username.</li> <li>Added a simple sanity checker that checks your documents for missing   or orphaned files, files with wrong checksums, inaccessible files,   and documents with empty content.</li> <li>It is no longer possible to encrypt your documents. For the time   being, paperless will continue to operate with already encrypted   documents.</li> <li>Fixes:</li> <li>Paperless now uses inotify again, since the watchdog was causing     issues which I was not aware of.</li> <li>Issue with the automatic classifier not working with only one     tag.</li> <li>A couple issues with the search index being opened to eagerly.</li> <li>Added lots of tests for various parts of the application.</li> </ul>"},{"location":"changelog/#paperless-ng-092","title":"paperless-ng 0.9.2","text":"<ul> <li>Major changes to the front end (colors, logo, shadows, layout of the   cards, better mobile support)</li> <li>Paperless now uses mime types and libmagic detection to determine if   a file type is supported and which parser to use. Removes all file   type checks that where present in MANY different places in   paperless.</li> <li>Mail consumer now correctly consumes documents even when their   content type was not set correctly. (i.e. PDF documents with content   type <code>application/octet-stream</code>)</li> <li>Basic sorting of mail rules added</li> <li>Much better admin for mail rule editing.</li> <li>Docker entrypoint script awaits the database server if it is   configured.</li> <li>Disabled editing of logs.</li> <li>New setting <code>PAPERLESS_OCR_PAGES</code> limits the tesseract parser to the   first n pages of scanned documents.</li> <li>Fixed a bug where tasks with too long task names would not show up   in the admin.</li> </ul>"},{"location":"changelog/#paperless-ng-091","title":"paperless-ng 0.9.1","text":"<ul> <li>Moved documentation of the settings to the actual documentation.</li> <li>Updated release script to force the user to choose between SQLite   and PostgreSQL. This avoids confusion when upgrading from paperless.</li> </ul>"},{"location":"changelog/#paperless-ng-090","title":"paperless-ng 0.9.0","text":"<ul> <li>Deprecated: GnuPG. See this note on the state of GnuPG in paperless-ng.   This features will most likely be removed in future versions.</li> <li>Added: New frontend. Features:</li> <li>Single page application: It's much more responsive than the     django admin pages.</li> <li>Dashboard. Shows recently scanned documents, or todo notes, or     other documents at wish. Allows uploading of documents. Shows     basic statistics.</li> <li>Better document list with multiple display options.</li> <li>Full text search with result highlighting, auto completion and     scoring based on the query. It uses a document search index in     the background.</li> <li>Saveable filters.</li> <li>Better log viewer.</li> <li>Added: Document types. Assign these to documents just as   correspondents. They may be used in the future to perform automatic   operations on documents depending on the type.</li> <li>Added: Inbox tags. Define an inbox tag and it will automatically   be assigned to any new document scanned into the system.</li> <li>Added: Automatic matching. A new matching algorithm that   automatically assigns tags, document types and correspondents to   your documents. It uses a neural network trained on your data.</li> <li>Added: Archive serial numbers. Assign these to quickly find   documents stored in physical binders.</li> <li>Added: Enabled the internal user management of django. This   isn't really a multi user solution, however, it allows more than   one user to access the website and set some basic permissions /   renew passwords.</li> <li>Modified [breaking]: All new mail consumer with customizable   filters, actions and multiple account support. Replaces the old mail   consumer. The new mail consumer needs different configuration but   can be configured to act exactly like the old consumer.</li> <li>Modified: Changes to the consumer:</li> <li>Now uses the excellent watchdog library that should make sure     files are discovered no matter what the platform is.</li> <li>The consumer now uses a task scheduler to run consumption     processes in parallel. This means that consuming many documents     should be much faster on systems with many cores.</li> <li>Concurrency is controlled with the new settings     <code>PAPERLESS_TASK_WORKERS</code> and <code>PAPERLESS_THREADS_PER_WORKER</code>. See     TODO for details on concurrency.</li> <li>The consumer no longer blocks the database for extended periods     of time.</li> <li>An issue with tesseract running multiple threads per page and     slowing down the consumer was fixed.</li> <li>Modified [breaking]: REST Api changes:</li> <li>New filters added, other filters removed (case sensitive     filters, slug filters)</li> <li>Endpoints for thumbnails, previews and downloads replace the old     <code>/fetch/</code> urls. Redirects are in place.</li> <li>Endpoint for document uploads replaces the old <code>/push</code> url.     Redirects are in place.</li> <li>Foreign key relationships are now served as IDs, not as urls.</li> <li>Modified [breaking]: PostgreSQL:</li> <li>If <code>PAPERLESS_DBHOST</code> is specified in the settings, paperless     uses PostgreSQL instead of SQLite. Username, database and     password all default to <code>paperless</code> if not specified.</li> <li>Modified [breaking]: document_retagger management command   rework. See Document retagger for   details. Replaces <code>document_correspondents</code> management command.</li> <li>Removed [breaking]: Reminders.</li> <li>Removed: All customizations made to the django admin pages.</li> <li>Removed [breaking]: The docker image no longer supports SSL.   If you want to expose paperless to the internet, hide paperless   behind a proxy server that handles SSL requests.</li> <li>Internal changes: Mostly code cleanup, including:</li> <li>Rework of the code of the tesseract parser. This is now a lot     cleaner.</li> <li>Rework of the filename handling code. It was a mess.</li> <li>Fixed some issues with the document exporter not exporting all     documents when encountering duplicate filenames.</li> <li>Added a task scheduler that takes care of checking mail,     training the classifier, maintaining the document search index     and consuming documents.</li> <li>Updated dependencies. Now uses Pipenv all around.</li> <li>Updated Dockerfile and docker-compose. Now uses <code>supervisord</code> to     run everything paperless-related in a single container.</li> <li>Settings:</li> <li><code>PAPERLESS_FORGIVING_OCR</code> is now default and gone. Reason: Even     if <code>langdetect</code> fails to detect a language, tesseract still does     a very good job at ocr'ing a document with the default     language. Certain language specifics such as umlauts may not get     picked up properly.</li> <li><code>PAPERLESS_DEBUG</code> defaults to <code>false</code>.</li> <li>The presence of <code>PAPERLESS_DBHOST</code> now determines whether to use     PostgreSQL or SQLite.</li> <li><code>PAPERLESS_OCR_THREADS</code> is gone and replaced with     <code>PAPERLESS_TASK_WORKERS</code> and <code>PAPERLESS_THREADS_PER_WORKER</code>.     Refer to the config example for details.</li> <li><code>PAPERLESS_OPTIMIZE_THUMBNAILS</code> allows you to disable or enable     thumbnail optimization. This is useful on less powerful devices.</li> <li>Many more small changes here and there. The usual stuff.</li> </ul>"},{"location":"changelog/#paperless","title":"Paperless","text":""},{"location":"changelog/#270","title":"2.7.0","text":"<ul> <li>syntonym submitted a pull request to   catch IMAP connection errors   #475.</li> <li>St\u00e9phane Brunner added <code>psycopg2</code> to   the Pipfile   #489.   He also fixed a syntax error in <code>docker-compose.yml.example</code> #488   and added DjangoQL, which   allows a litany of handy search functionality   #492.</li> <li>CkuT and   JOKer hacked out a simple, but   super-helpful optimisation to how the thumbnails are served up,   improving performance considerably   #481.</li> <li>tsia added a few fields to the tags REST   API.   #483.</li> <li>Brian Cribbs improved the   documentation to help people using Paperless over NFS   #484.</li> <li>Brendan M. Sleight updated the   documentation to include a note for setting the <code>DEBUG</code> value. The   <code>paperless.conf.example</code> file was also updated to mirror the project   defaults.</li> </ul>"},{"location":"changelog/#261","title":"2.6.1","text":"<ul> <li>We now have a logo, complete with a favicon :-)</li> <li>Removed some problematic tests.</li> <li>Fix the docker-compose example config to include a shared consume   volume so that using the push API will work for users of the Docker   install. Thanks to Colin Frei for   fixing this in   #466.</li> <li>khrise submitted a pull request to   include the <code>added</code> property to the REST API   #471.</li> </ul>"},{"location":"changelog/#260","title":"2.6.0","text":"<ul> <li>Allow an infinite number of logs to be deleted. Thanks to   Ulli for noting the problem in   #433.</li> <li>Fix the <code>RecentCorrespondentsFilter</code> correspondents filter that was   added in 2.4 to play nice with the defaults. Thanks to   tsia and   Sblop who pointed this out.   #423.</li> <li>Updated dependencies to include (among other things) a security   patch to requests.</li> <li>Fix text in sample data for tests so that the language guesser stops   thinking that everything is in Catalan because we had Lorem ipsum   in there.</li> <li>Tweaked the gunicorn sample command to use filesystem paths instead   of Python paths.   #441</li> <li>Added pretty colour boxes next to the hex values in the Tags   section, thanks to a pull request from Joshua   Taillon #442.</li> <li>Added a <code>.editorconfig</code> file to better specify coding style.</li> <li>Joshua Taillon also added some logic to   tie Paperless' date guessing logic into how it parses file names on   import.   #440</li> </ul>"},{"location":"changelog/#250","title":"2.5.0","text":"<ul> <li>New dependency: Paperless now optimises thumbnail generation   with optipng, so you'll need to   install that somewhere in your PATH or declare its location in   <code>PAPERLESS_OPTIPNG_BINARY</code>. The Docker image has already been   updated on the Docker Hub, so you just need to pull the latest one   from there if you're a Docker user.</li> <li>\"Login free\" instances of Paperless were breaking whenever you   tried to edit objects in the admin: adding/deleting tags or   correspondents, or even fixing spelling. This was due to the \"user   hack\" we were applying to sessions that weren't using a login, as   that hack user didn't have a valid id. The fix was to attribute the   first user id in the system to this hack user.   #394</li> <li>A problem in how we handle slug values on Tags and Correspondents   required a few changes to how we handle this field   #393:</li> <li>Slugs are no longer editable. They're derived from the name of       the tag or correspondent at save time, so if you wanna change       the slug, you have to change the name, and even then you're       restricted to the rules of the <code>slugify()</code> function. The slug       value is still visible in the admin though.</li> <li>I've added a migration to go over all existing tags &amp;       correspondents and rewrite the <code>.slug</code> values to ones conforming       to the <code>slugify()</code> rules.</li> <li>The consumption process now uses the same rules as <code>.save()</code> in       determining a slug and using that to check for an existing       tag/correspondent.</li> <li>An annoying bug in the date capture code was causing some bogus   dates to be attached to documents, which in turn busted the UI.   Thanks to Andrew Peng for reporting   this.   #414.</li> <li>A bug in the Dockerfile meant that Tesseract language files weren't   being installed correctly. euri10 was   quick to provide a fix:   #406,   #413.</li> <li>Document consumption is now wrapped in a transaction as per an old   ticket   #262.</li> <li>The <code>get_date()</code> functionality of the parsers has been consolidated   onto the <code>DocumentParser</code> class since much of that code was   redundant anyway.</li> </ul>"},{"location":"changelog/#240","title":"2.4.0","text":"<ul> <li>A new set of actions are now available thanks to   jonaswinkler's very first pull   request! You can now do nifty things like tag documents in bulk, or   set correspondents in bulk.   #405</li> <li>The import/export system is now a little smarter. By default,   documents are tagged as <code>unencrypted</code>, since exports are by their   nature unencrypted. It's now in the import step that we decide the   storage type. This allows you to export from an encrypted system and   import into an unencrypted one, or vice-versa.</li> <li>The migration history has been slightly modified to accommodate   PostgreSQL users. Additionally, you can now tell paperless to use   PostgreSQL simply by declaring <code>PAPERLESS_DBUSER</code> in your   environment. This will attempt to connect to your Postgres database   without a password unless you also set <code>PAPERLESS_DBPASS</code>.</li> <li>A bug was found in the REST API filter system that was the result of   an update of django-filter some time ago. This has now been patched   in   #412.   Thanks to thepill for spotting it!</li> </ul>"},{"location":"changelog/#230","title":"2.3.0","text":"<ul> <li>Support for consuming plain text &amp; markdown documents was added by   Joshua Taillon! This was a   long-requested feature, and it's addition is likely to be greatly   appreciated by the community:   #395   Thanks also to David Martin for   his assistance on the issue.</li> <li>dubit0 found &amp; fixed a bug that   prevented management commands from running before we had an   operational database:   #396</li> <li>Joshua also added a simple update to the thumbnail generation   process to improve performance:   #399</li> <li>As his last bit of effort on this release, Joshua also added some   code to allow you to view the documents inline rather than download   them as an attachment.   #400</li> <li>Finally, ahyear found a slip in the   Docker documentation and patched it.   #401</li> </ul>"},{"location":"changelog/#221","title":"2.2.1","text":"<ul> <li>Kyle Lucy reported a bug quickly after   the release of 2.2.0 where we broke the <code>DISABLE_LOGIN</code> feature:   #392.</li> </ul>"},{"location":"changelog/#220","title":"2.2.0","text":"<ul> <li>Thanks to dadosch, Wolfgang   Mader, and Tim   Brooks this is the first version of   Paperless that supports Django 2.0! As a result of their hard work,   you can now also run Paperless on Python 3.7 as well:   #386   &amp;   #390.</li> <li>St\u00e9phane Brunner added a few lines of   code that made tagging interface a lot easier on those of us with   lots of different tags:   #391.</li> <li>Kilian Koeltzsch noticed a bug in   how we capture &amp; automatically create tags, so that's fixed now   too:   #384.</li> <li>erikarvstedt tweaked the   behaviour of the test suite to be better behaved for packaging   environments:   #383.</li> <li>Lukasz Soluch added CORS support to   make building a new Javascript-based front-end cleaner &amp; easier:   #387.</li> </ul>"},{"location":"changelog/#210","title":"2.1.0","text":"<ul> <li>Enno Lohmeier added three simple   features that make Paperless a lot more user (and developer)   friendly:</li> <li>There's a new search box on the front page:       #374.</li> <li>The correspondents &amp; tags pages now have a column showing the       number of relevant documents:       #375.</li> <li>The Dockerfile has been tweaked to build faster for those of us       who are doing active development on Paperless using the Docker       environment:       #376.</li> <li>You now also have the ability to customise the interface to your   heart's content by creating a file called <code>overrides.css</code> and/or   <code>overrides.js</code> in the root of your media directory. Thanks to Mark   McFate for this idea:   #371</li> </ul>"},{"location":"changelog/#200","title":"2.0.0","text":"<p>This is a big release as we've changed a core-functionality of Paperless: we no longer encrypt files with GPG by default.</p> <p>The reasons for this are many, but it boils down to that the encryption wasn't really all that useful, as files on-disk were still accessible so long as you had the key, and the key was most typically stored in the config file. In other words, your files are only as safe as the <code>paperless</code> user is. In addition to that, the contents of the documents were never encrypted, so important numbers etc. were always accessible simply by querying the database. Still, it was better than nothing, but the consensus from users appears to be that it was more an annoyance than anything else, so this feature is now turned off unless you explicitly set a passphrase in your config file.</p>"},{"location":"changelog/#migrating-from-1x","title":"Migrating from 1.x","text":"<p>Encryption isn't gone, it's just off for new users. So long as you have <code>PAPERLESS_PASSPHRASE</code> set in your config or your environment, Paperless should continue to operate as it always has. If however, you want to drop encryption too, you only need to do two things:</p> <ol> <li>Run     <code>./manage.py migrate &amp;&amp; ./manage.py change_storage_type gpg unencrypted</code>.     This will go through your entire database and Decrypt All The     Things.</li> <li>Remove <code>PAPERLESS_PASSPHRASE</code> from your <code>paperless.conf</code> file, or     simply stop declaring it in your environment.</li> </ol> <p>Special thanks to erikarvstedt, matthewmoto, and mcronce who did the bulk of the work on this big change.</p>"},{"location":"changelog/#140","title":"1.4.0","text":"<ul> <li>Quentin Dawans has refactored the document   consumer to allow for some command-line options. Notably, you can   now direct it to consume from a particular <code>--directory</code>, limit the   <code>--loop-time</code>, set the time between mail server checks with   <code>--mail-delta</code> or just run it as a one-off with <code>--one-shot</code>. See   #305   &amp;   #313   for more information.</li> <li>Refactor the use of travis/tox/pytest/coverage into two files:   <code>.travis.yml</code> and <code>setup.cfg</code>.</li> <li>Start generating requirements.txt from a Pipfile. I'll probably   switch over to just using pipenv in the future.</li> <li>All for a alternative FreeBSD-friendly location for   <code>paperless.conf</code>. Thanks to Martin   Arendtsen who provided this   (#322).</li> <li>Document consumption events are now logged in the Django admin   events log. Thanks to CkuT for doing the   legwork on this one and to Quentin Dawans   &amp; David Martin for helping to   coordinate &amp; work out how the feature would be developed.</li> <li>erikarvstedt contributed a pull   request   (#328)   to add <code>--noreload</code> to the default server start process. This helps   reduce the load imposed by the running webservice.</li> <li>Through some discussion on   #253   and   #323,   we've removed a few of the hardcoded URL values to make it easier   for people to host Paperless on a subdirectory. Thanks to Quentin   Dawans and Kyle   Lucy for helping to work this out.</li> <li>The clickable area for documents on the listing page has been   increased to a more predictable space thanks to a glorious hack from   erikarvstedt in   #344.</li> <li>Strubbl noticed an annoying bug in the   bash script wrapping the Docker entrypoint and fixed it with some   very creating Bash skills:   #352.</li> <li>You can now use the search field to find documents by tag thanks to   thinkjk's first ever issue:   #354.</li> <li>Inotify is now being used to detect additions to the consume   directory thanks to some excellent work from   erikarvstedt on   #351</li> </ul>"},{"location":"changelog/#130","title":"1.3.0","text":"<ul> <li>You can now run Paperless without a login, though you'll still have   to create at least one user. This is thanks to a pull-request from   matthewmoto:   #295.   Note that logins are still required by default, and that you need to   disable them by setting <code>PAPERLESS_DISABLE_LOGIN=\"true\"</code> in your   environment or in <code>/etc/paperless.conf</code>.</li> <li>Fix for   #303   where sketchily-formatted documents could cause the consumer to   break and insert half-records into the database breaking all sorts   of things. We now capture the return codes of both <code>convert</code> and   <code>unpaper</code> and fail-out nicely.</li> <li>Fix for additional date types thanks to input from   Isaac and code from   BastianPoe   (#301).</li> <li>Fix for running migrations in the Docker container   (#299).   Thanks to Georgi Todorov for the fix   (#300)   and to Pit for the review.</li> <li>Fix for Docker cases where the issuing user is not UID 1000. This   was a collaborative fix between Jeffrey   Portman and   Pit in   #311   and   #312   to fix   #306.</li> <li>Patch the historical migrations to support MySQL's um,   interesting way of handing indexes   (#308).   Thanks to Simon Taddiken for reporting   the problem and helping me find where to fix it.</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":"<ul> <li>New Docker image, now based on Alpine, thanks to the efforts of   addadi and   Pit. This new image is dramatically   smaller than the Debian-based one, and it also has a new home on   Docker Hub. A   proper thank-you to Pit for hosting   the image on his Docker account all this time, but after some   discussion, we decided the image needed a more official-looking   home.</li> <li>BastianPoe has added the   long-awaited feature to automatically skip the OCR step when the PDF   already contains text. This can be overridden by setting   <code>PAPERLESS_OCR_ALWAYS=YES</code> either in your <code>paperless.conf</code> or in the   environment. Note that this also means that Paperless now requires   <code>libpoppler-cpp-dev</code> to be installed. Important: You'll need to   run <code>pip install -r requirements.txt</code> after the usual <code>git pull</code> to   properly update.</li> <li>BastianPoe has also contributed a   monumental amount of work   (#291)   to solving   #158:   setting the document creation date based on finding a date in the   document text.</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":"<ul> <li>Fix for   #283,   a redirect bug which broke interactions with paperless-desktop.   Thanks to chris-aeviator for   reporting it.</li> <li>Addition of an optional new financial year filter, courtesy of   David Martin #256</li> <li>Fixed a typo in how thumbnails were named in exports   #285,   courtesy of Dan Panzarella</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Upgrade to Django 1.11. You'll need to run ``pip install -r   requirements.txt`` after the usual ``git pull`` to properly   update.</li> <li>Replace the templatetag-based hack we had for document listing in   favour of a slightly less ugly solution in the form of another   template tag with less copypasta.</li> <li>Support for multi-word-matches for auto-tagging thanks to an   excellent patch from ishirav #277.</li> <li>Fixed a CSS bug reported by Stefan Hagen   that caused an overlapping of the text and checkboxes under some   resolutions   #272.</li> <li>Patched the Docker config to force the serving of static files.   Credit for this one goes to dev-rke   via   #248.</li> <li>Fix file permissions during Docker start up thanks to   Pit on   #268.</li> <li>Date fields in the admin are now expressed as HTML5 date fields   thanks to Lukas Winkler's issue   #278</li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":"<ul> <li>Paperless can now run in a subdirectory on a host (<code>/paperless</code>),   rather than always running in the root (<code>/</code>) thanks to   maphy-psd's work on   #255.</li> </ul>"},{"location":"changelog/#070","title":"0.7.0","text":"<ul> <li>Potentially breaking change: As per   #235,   Paperless will no longer automatically delete documents attached to   correspondents when those correspondents are themselves deleted.   This was Django's default behaviour, but didn't make much sense in   Paperless' case. Thanks to Thomas   Brueggemann and David   Martin for their input on this   one.</li> <li>Fix for   #232   wherein Paperless wasn't recognising <code>.tif</code> files properly. Thanks   to ayounggun for reporting this one   and to Kusti Skyt\u00e9n for posting the   correct solution in the Github issue.</li> </ul>"},{"location":"changelog/#060","title":"0.6.0","text":"<ul> <li>Abandon the shared-secret trick we were using for the POST API in   favour of BasicAuth or Django session.</li> <li>Fix the POST API so it actually works.   #236</li> <li>Breaking change: We've dropped the use of   <code>PAPERLESS_SHARED_SECRET</code> as it was being used both for the API (now   replaced with a normal auth) and form email polling. Now that we're   only using it for email, this variable has been renamed to   <code>PAPERLESS_EMAIL_SECRET</code>. The old value will still work for a while,   but you should change your config if you've been using the email   polling feature. Thanks to Joshua   Gilman for all the help with this   feature.</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":"<ul> <li>Support for fuzzy matching in the auto-tagger &amp; auto-correspondent   systems thanks to Jake Gysland's   patch   #220.</li> <li>Modified the Dockerfile to prepare an export directory   (#212).   Thanks to combined efforts from Pit   and Strubbl in working out the kinks   on this one.</li> <li>Updated the import/export scripts to include support for thumbnails.   Big thanks to CkuT for finding this   shortcoming and doing the work to get it fixed in   #224.</li> <li>All of the following changes are thanks to David   Martin: * Bumped the dependency on pyocr to 0.4.7 so new users can make use   of Tesseract 4 if they so prefer   (#226).</li> <li>Fixed a number of issues with the automated mail handler     (#227,     #228)</li> <li>Amended the documentation for better handling of systemd service     files     (#229)</li> <li>Amended the Django Admin configuration to have nice headers     (#230)</li> </ul>"},{"location":"changelog/#041","title":"0.4.1","text":"<ul> <li>Fix for   #206   wherein the pluggable parser didn't recognise files with all-caps   suffixes like <code>.PDF</code></li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":"<ul> <li>Introducing reminders. See   #199   for more information, but the short explanation is that you can now   attach simple notes &amp; times to documents which are made available   via the API. Currently, the default API (basically just the Django   admin) doesn't really make use of this, but Thomas   Brueggemann over at   Paperless   Desktop has   said that he would like to make use of this feature in his project.</li> </ul>"},{"location":"changelog/#036","title":"0.3.6","text":"<ul> <li>Fix for   #200   (!!) where the API wasn't configured to allow updating the   correspondent or the tags for a document.</li> <li>The <code>content</code> field is now optional, to allow for the edge case of a   purely graphical document.</li> <li>You can no longer add documents via the admin. This never worked in   the first place, so all I've done here is remove the link to the   broken form.</li> <li>The consumer code has been heavily refactored to support a pluggable   interface. Install a paperless consumer via pip and tell paperless   about it with an environment variable, and you're good to go.   Proper documentation is on its way.</li> </ul>"},{"location":"changelog/#035","title":"0.3.5","text":"<ul> <li>A serious facelift for the documents listing page wherein we drop   the tabular layout in favour of a tiled interface.</li> <li>Users can now configure the number of items per page.</li> <li>Fix for   #171:   Allow users to specify their own <code>SECRET_KEY</code> value.</li> <li>Moved the dotenv loading to the top of settings.py</li> <li>Fix for   #112:   Added checks for binaries required for document consumption.</li> </ul>"},{"location":"changelog/#034","title":"0.3.4","text":"<ul> <li>Removal of django-suit due to a licensing conflict I bumped into in   0.3.3. Note that you can use Django Suit with Paperless, but only   in a non-profit situation as their free license prohibits for-profit   use. As a result, I can't bundle Suit with Paperless without   conflicting with the GPL. Further development will be done against   the stock Django admin.</li> <li>I shrunk the thumbnails a little 'cause they were too big for me,   even on my high-DPI monitor.</li> <li>BasicAuth support for document and thumbnail downloads, as well as   the Push API thanks to \\@thomasbrueggemann. See   #179.</li> </ul>"},{"location":"changelog/#033","title":"0.3.3","text":"<ul> <li>Thumbnails in the UI and a Django-suit -based face-lift courtesy of   \\@ekw!</li> <li>Timezone, items per page, and default language are now all   configurable, also thanks to \\@ekw.</li> </ul>"},{"location":"changelog/#032","title":"0.3.2","text":"<ul> <li>Fix for   #172:   defaulting ALLOWED_HOSTS to <code>[\"*\"]</code> and allowing the user to set   her own value via <code>PAPERLESS_ALLOWED_HOSTS</code> should the need arise.</li> </ul>"},{"location":"changelog/#031","title":"0.3.1","text":"<ul> <li>Added a default value for <code>CONVERT_BINARY</code></li> </ul>"},{"location":"changelog/#030","title":"0.3.0","text":"<ul> <li>Updated to using django-filter 1.x</li> <li>Added some system checks so new users aren't confused by   misconfigurations.</li> <li>Consumer loop time is now configurable for systems with slow writes.   Just set <code>PAPERLESS_CONSUMER_LOOP_TIME</code> to a number of seconds. The   default is 10.</li> <li>As per   #44,   we've removed support for <code>PAPERLESS_CONVERT</code>, <code>PAPERLESS_CONSUME</code>,   and <code>PAPERLESS_SECRET</code>. Please use <code>PAPERLESS_CONVERT_BINARY</code>,   <code>PAPERLESS_CONSUMPTION_DIR</code>, and <code>PAPERLESS_SHARED_SECRET</code>   respectively instead.</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<ul> <li>#150:   The media root is now a variable you can set in <code>paperless.conf</code>.</li> <li>#148:   The database location (sqlite) is now a variable you can set in   <code>paperless.conf</code>.</li> <li>#146:   Fixed a bug that allowed unauthorised access to the <code>/fetch</code> URL.</li> <li>#131:   Document files are now automatically removed from disk when they're   deleted in Paperless.</li> <li>#121:   Fixed a bug where Paperless wasn't setting document creation time   based on the file naming scheme.</li> <li>#81:   Added a hook to run an arbitrary script after every document is   consumed.</li> <li>#98:   Added optional environment variables for ImageMagick so that it   doesn't explode when handling Very Large Documents or when it's   just running on a low-memory system. Thanks to Florian   Harr for his help on this one.</li> <li>#89   Ported the auto-tagging code to correspondents as well. Thanks to   Justin Snyman for the pointers   in the issue queue.</li> <li>Added support for guessing the date from the file name along with   the correspondent, title, and tags. Thanks to Tikitu de   Jager for his pull request that I took   forever to merge and to Pit for his   efforts on the regex front.</li> <li>#94:   Restored support for changing the created date in the UI. Thanks to   Martin Honermeyer and Tim   White for working with me on this.</li> </ul>"},{"location":"changelog/#011","title":"0.1.1","text":"<ul> <li>Potentially Breaking Change: All references to \"sender\" in the   code have been renamed to \"correspondent\" to better reflect the   nature of the property (one could quite reasonably scan a document   before sending it to someone.)</li> <li>#67:   Rewrote the document exporter and added a new importer that allows   for full metadata retention without depending on the file name and   modification time. A big thanks to Tikitu de   Jager,   Pit, Florian   Jung, and Christopher   Luu for their code snippets and   contributing conversation that lead to this change.</li> <li>#20:   Added unpaper support to help in cleaning up the scanned image   before it's OCR'd. Thanks to Pit for   this one.</li> <li>#71   Added (encrypted) thumbnails in anticipation of a proper UI.</li> <li>#68:   Added support for using a proper config file at   <code>/etc/paperless.conf</code> and modified the systemd unit files to use it.</li> <li>Refactored the Vagrant installation process to use environment   variables rather than asking the user to modify <code>settings.py</code>.</li> <li>#44:   Harmonise environment variable names with constant names.</li> <li>#60:   Setup logging to actually use the Python native logging framework.</li> <li>#53:   Fixed an annoying bug that caused <code>.jpeg</code> and <code>.JPG</code> images to be   imported but made unavailable.</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>Docker support! Big thanks to Wayne   Werner, Brian   Conn, and Tikitu de   Jager for this one, and especially to   Pit who spearheadded this effort.</li> <li>A simple REST API is in place, but it should be considered unstable.</li> <li>Cleaned up the consumer to use temporary directories instead of a   single scratch space. (Thanks Pit)</li> <li>Improved the efficiency of the consumer by parsing pages more   intelligently and introducing a threaded OCR process (thanks again   Pit).</li> <li>#45:   Cleaned up the logic for tag matching. Reported by   darkmatter.</li> <li>#47:   Auto-rotate landscape documents. Reported by   Paul and fixed by   Pit.</li> <li>#48:   Matching algorithms should do so on a word boundary   (darkmatter)</li> <li>#54:   Documented the re-tagger (zedster)</li> <li>#57:   Make sure file is preserved on import failure   (darkmatter)</li> <li>Added tox with pep8 checking</li> </ul>"},{"location":"changelog/#006","title":"0.0.6","text":"<ul> <li>Added support for parallel OCR (significant work from   Pit)</li> <li>Sped up the language detection (significant work from   Pit)</li> <li>Added simple logging</li> </ul>"},{"location":"changelog/#005","title":"0.0.5","text":"<ul> <li>Added support for image files as documents (png, jpg, gif, tiff)</li> <li>Added a crude means of HTTP POST for document imports</li> <li>Added IMAP mail support</li> <li>Added a re-tagging utility</li> <li>Documentation for the above as well as data migration</li> </ul>"},{"location":"changelog/#004","title":"0.0.4","text":"<ul> <li>Added automated tagging basted on keyword matching</li> <li>Cleaned up the document listing page</li> <li>Removed <code>User</code> and <code>Group</code> from the admin</li> <li>Added <code>pytz</code> to the list of requirements</li> </ul>"},{"location":"changelog/#003","title":"0.0.3","text":"<ul> <li>Added basic tagging</li> </ul>"},{"location":"changelog/#002","title":"0.0.2","text":"<ul> <li>Added language detection</li> <li>Added datestamps to <code>document_exporter</code>.</li> <li>Changed <code>settings.TESSERACT_LANGUAGE</code> to <code>settings.OCR_LANGUAGE</code>.</li> </ul>"},{"location":"changelog/#001","title":"0.0.1","text":"<ul> <li>Initial release</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>Paperless provides a wide range of customizations. Depending on how you run paperless, these settings have to be defined in different places.</p> <ul> <li> <p>If you run paperless on docker, <code>paperless.conf</code> is not used.   Rather, configure paperless by copying necessary options to   <code>docker-compose.env</code>.</p> </li> <li> <p>If you are running paperless on anything else, paperless will search   for the configuration file in these locations and use the first one   it finds:</p> </li> <li>The environment variable <code>PAPERLESS_CONFIGURATION_PATH</code></li> <li><code>/path/to/paperless/paperless.conf</code></li> <li><code>/etc/paperless.conf</code></li> <li><code>/usr/local/etc/paperless.conf</code></li> </ul>"},{"location":"configuration/#required-services","title":"Required services","text":"<code>PAPERLESS_REDIS=&lt;url&gt;</code> <p>This is required for processing scheduled tasks such as email fetching, index optimization and for training the automatic document matcher.</p> <ul> <li>If your Redis server needs login credentials PAPERLESS_REDIS =     <code>redis://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;</code></li> <li>With the requirepass option PAPERLESS_REDIS =     <code>redis://:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;</code></li> </ul> <p>More information on securing your Redis Instance.</p> <p>Defaults to <code>redis://localhost:6379</code>.</p> <code>PAPERLESS_DBENGINE=&lt;engine_name&gt;</code> <p>Optional, gives the ability to choose Postgres or MariaDB for database engine. Available options are <code>postgresql</code> and <code>mariadb</code>.</p> <p>Default is <code>postgresql</code>.</p> <p>Warning</p> <p>Using MariaDB comes with some caveats. See MySQL Caveats.</p> <code>PAPERLESS_DBHOST=&lt;hostname&gt;</code> <p>By default, sqlite is used as the database backend. This can be changed here.</p> <p>Set PAPERLESS_DBHOST and another database will be used instead of sqlite.</p> <code>PAPERLESS_DBPORT=&lt;port&gt;</code> <p>Adjust port if necessary.</p> <p>Default is 5432.</p> <code>PAPERLESS_DBNAME=&lt;name&gt;</code> <p>Database name in PostgreSQL or MariaDB.</p> <p>Defaults to \"paperless\".</p> <code>PAPERLESS_DBUSER=&lt;name&gt;</code> <p>Database user in PostgreSQL or MariaDB.</p> <p>Defaults to \"paperless\".</p> <code>PAPERLESS_DBPASS=&lt;password&gt;</code> <p>Database password for PostgreSQL or MariaDB.</p> <p>Defaults to \"paperless\".</p> <code>PAPERLESS_DBSSLMODE=&lt;mode&gt;</code> <p>SSL mode to use when connecting to PostgreSQL.</p> <p>See the official documentation about sslmode.</p> <p>Default is <code>prefer</code>.</p> <code>PAPERLESS_DB_TIMEOUT=&lt;float&gt;</code> <p>Amount of time for a database connection to wait for the database to unlock. Mostly applicable for an sqlite based installation, consider changing to postgresql if you need to increase this.</p> <p>Defaults to unset, keeping the Django defaults.</p>"},{"location":"configuration/#paths-and-folders","title":"Paths and folders","text":"<code>PAPERLESS_CONSUMPTION_DIR=&lt;path&gt;</code> <p>This where your documents should go to be consumed. Make sure that it exists and that the user running the paperless service can read/write its contents before you start Paperless.</p> <p>Don't change this when using docker, as it only changes the path within the container. Change the local consumption directory in the docker-compose.yml file instead.</p> <p>Defaults to \"../consume/\", relative to the \"src\" directory.</p> <code>PAPERLESS_DATA_DIR=&lt;path&gt;</code> <p>This is where paperless stores all its data (search index, SQLite database, classification model, etc).</p> <p>Defaults to \"../data/\", relative to the \"src\" directory.</p> <code>PAPERLESS_TRASH_DIR=&lt;path&gt;</code> <p>Instead of removing deleted documents, they are moved to this directory.</p> <p>This must be writeable by the user running paperless. When running inside docker, ensure that this path is within a permanent volume (such as \"../media/trash\") so it won't get lost on upgrades.</p> <p>Defaults to empty (i.e. really delete documents).</p> <code>PAPERLESS_MEDIA_ROOT=&lt;path&gt;</code> <p>This is where your documents and thumbnails are stored.</p> <p>You can set this and PAPERLESS_DATA_DIR to the same folder to have paperless store all its data within the same volume.</p> <p>Defaults to \"../media/\", relative to the \"src\" directory.</p> <code>PAPERLESS_STATICDIR=&lt;path&gt;</code> <p>Override the default STATIC_ROOT here. This is where all static files created using \"collectstatic\" manager command are stored.</p> <p>Unless you're doing something fancy, there is no need to override this.  If this is changed, you may need to run <code>collectstatic</code> again.</p> <p>Defaults to \"../static/\", relative to the \"src\" directory.</p> <code>PAPERLESS_FILENAME_FORMAT=&lt;format&gt;</code> <p>Changes the filenames paperless uses to store documents in the media directory. See File name handling for details.</p> <p>Default is none, which disables this feature.</p> <code>PAPERLESS_FILENAME_FORMAT_REMOVE_NONE=&lt;bool&gt;</code> <p>Tells paperless to replace placeholders in <code>PAPERLESS_FILENAME_FORMAT</code> that would resolve to 'none' to be omitted from the resulting filename. This also holds true for directory names. See File name handling for details.</p> <p>Defaults to <code>false</code> which disables this feature.</p> <code>PAPERLESS_LOGGING_DIR=&lt;path&gt;</code> <p>This is where paperless will store log files.</p> <p>Defaults to <code>PAPERLESS_DATA_DIR/log/</code>.</p> <code>PAPERLESS_NLTK_DIR=&lt;path&gt;</code> <p>This is where paperless will search for the data required for NLTK processing, if you are using it. If you are using the Docker image, this should not be changed, as the data is included in the image already.</p> <p>Previously, the location defaulted to <code>PAPERLESS_DATA_DIR/nltk</code>. Unless you are using this in a bare metal install or other setup, this folder is no longer needed and can be removed manually.</p> <p>Defaults to <code>/usr/share/nltk_data</code></p>"},{"location":"configuration/#logging","title":"Logging","text":"<code>PAPERLESS_LOGROTATE_MAX_SIZE=&lt;num&gt;</code> <p>Maximum file size for log files before they are rotated, in bytes.</p> <p>Defaults to 1 MiB.</p> <code>PAPERLESS_LOGROTATE_MAX_BACKUPS=&lt;num&gt;</code> <p>Number of rotated log files to keep.</p> <p>Defaults to 20.</p>"},{"location":"configuration/#hosting-and-security","title":"Hosting &amp; Security","text":"<code>PAPERLESS_SECRET_KEY=&lt;key&gt;</code> <p>Paperless uses this to make session tokens. If you expose paperless on the internet, you need to change this, since the default secret is well known.</p> <p>Use any sequence of characters. The more, the better. You don't need to remember this. Just face-roll your keyboard.</p> <p>Default is listed in the file <code>src/paperless/settings.py</code>.</p> <code>PAPERLESS_URL=&lt;url&gt;</code> <p>This setting can be used to set the three options below (ALLOWED_HOSTS, CORS_ALLOWED_HOSTS and CSRF_TRUSTED_ORIGINS). If the other options are set the values will be combined with this one. Do not include a trailing slash. E.g. https://paperless.domain.com</p> <p>Defaults to empty string, leaving the other settings unaffected.</p> <p>Note</p> <p>This value cannot contain a path (e.g. domain.com/path), even if you are installing paperless-ngx at a subpath.</p> <code>PAPERLESS_CSRF_TRUSTED_ORIGINS=&lt;comma-separated-list&gt;</code> <p>A list of trusted origins for unsafe requests (e.g. POST). As of Django 4.0 this is required to access the Django admin via the web. See https://docs.djangoproject.com/en/4.0/ref/settings/#csrf-trusted-origins</p> <p>Can also be set using PAPERLESS_URL (see above).</p> <p>Defaults to empty string, which does not add any origins to the trusted list.</p> <code>PAPERLESS_ALLOWED_HOSTS=&lt;comma-separated-list&gt;</code> <p>If you're planning on putting Paperless on the open internet, then you really should set this value to the domain name you're using. Failing to do so leaves you open to HTTP host header attacks: https://docs.djangoproject.com/en/3.1/topics/security/#host-header-validation</p> <p>Just remember that this is a comma-separated list, so \"example.com\" is fine, as is \"example.com,www.example.com\", but NOT \" example.com\" or \"example.com,\"</p> <p>Can also be set using PAPERLESS_URL (see above).</p> <p>If manually set, please remember to include \"localhost\". Otherwise docker healthcheck will fail.</p> <p>Defaults to \"*\", which is all hosts.</p> <code>PAPERLESS_CORS_ALLOWED_HOSTS=&lt;comma-separated-list&gt;</code> <p>You need to add your servers to the list of allowed hosts that can do CORS calls. Set this to your public domain name.</p> <p>Can also be set using PAPERLESS_URL (see above).</p> <p>Defaults to \"http://localhost:8000\".</p> <code>PAPERLESS_FORCE_SCRIPT_NAME=&lt;path&gt;</code> <p>To host paperless under a subpath url like example.com/paperless you set this value to /paperless. No trailing slash!</p> <p>Defaults to none, which hosts paperless at \"/\".</p> <code>PAPERLESS_STATIC_URL=&lt;path&gt;</code> <p>Override the STATIC_URL here. Unless you're hosting Paperless off a subdomain like /paperless/, you probably don't need to change this. If you do change it, be sure to include the trailing slash.</p> <p>Defaults to \"/static/\".</p> <p>Note</p> <p>When hosting paperless behind a reverse proxy like Traefik or Nginx at a subpath e.g. example.com/paperlessngx you will also need to set <code>PAPERLESS_FORCE_SCRIPT_NAME</code> (see above).</p> <code>PAPERLESS_AUTO_LOGIN_USERNAME=&lt;username&gt;</code> <p>Specify a username here so that paperless will automatically perform login with the selected user.</p> <p>Danger</p> <p>Do not use this when exposing paperless on the internet. There are no checks in place that would prevent you from doing this.</p> <p>Defaults to none, which disables this feature.</p> <code>PAPERLESS_ADMIN_USER=&lt;username&gt;</code> <p>If this environment variable is specified, Paperless automatically creates a superuser with the provided username at start. This is useful in cases where you can not run the <code>createsuperuser</code> command separately, such as Kubernetes or AWS ECS.</p> <p>Requires PAPERLESS_ADMIN_PASSWORD be set.</p> <p>Note</p> <p>This will not change an existing [super]user's password, nor will it recreate a user that already exists. You can leave this throughout the lifecycle of the containers.</p> <code>PAPERLESS_ADMIN_MAIL=&lt;email&gt;</code> <p>(Optional) Specify superuser email address. Only used when PAPERLESS_ADMIN_USER is set.</p> <p>Defaults to <code>root@localhost</code>.</p> <code>PAPERLESS_ADMIN_PASSWORD=&lt;password&gt;</code> <p>Only used when PAPERLESS_ADMIN_USER is set. This will be the password of the automatically created superuser.</p> <code>PAPERLESS_COOKIE_PREFIX=&lt;str&gt;</code> <p>Specify a prefix that is added to the cookies used by paperless to identify the currently logged in user. This is useful for when you're running two instances of paperless on the same host.</p> <p>After changing this, you will have to login again.</p> <p>Defaults to <code>\"\"</code>, which does not alter the cookie names.</p> <code>PAPERLESS_ENABLE_HTTP_REMOTE_USER=&lt;bool&gt;</code> <p>Allows authentication via HTTP_REMOTE_USER which is used by some SSO applications.</p> <p>Warning</p> <p>This will allow authentication by simply adding a <code>Remote-User: &lt;username&gt;</code> header to a request. Use with care! You especially *must:   ensure that any such header is not passed from your proxy server to paperless.</p> <p>If you're exposing paperless to the internet directly, do not use this.</p> <p>Also see the warning in the official documentation.</p> <p>Defaults to \"false\" which disables this feature.</p> <code>PAPERLESS_HTTP_REMOTE_USER_HEADER_NAME=&lt;str&gt;</code> <p>If \"PAPERLESS*ENABLE_HTTP_REMOTE_USER\" is enabled, this property allows to customize the name of the HTTP header from which the authenticated username is extracted. Values are in terms of HttpRequest.META. Thus, the configured value must start with <code>HTTP*</code> followed by the normalized actual header name.</p> <p>Defaults to \"HTTP_REMOTE_USER\".</p> <code>PAPERLESS_LOGOUT_REDIRECT_URL=&lt;str&gt;</code> <p>URL to redirect the user to after a logout. This can be used together with PAPERLESS_ENABLE_HTTP_REMOTE_USER to redirect the user back to the SSO application's logout page.</p> <p>Defaults to None, which disables this feature.</p>"},{"location":"configuration/#ocr","title":"OCR settings","text":"<p>Paperless uses OCRmyPDF for performing OCR on documents and images. Paperless uses sensible defaults for most settings, but all of them can be configured to your needs.</p> <code>PAPERLESS_OCR_LANGUAGE=&lt;lang&gt;</code> <p>Customize the language that paperless will attempt to use when parsing documents.</p> <p>It should be a 3-letter code, see the list of languages Tesseract supports.</p> <p>Set this to the language most of your documents are written in.</p> <p>This can be a combination of multiple languages such as <code>deu+eng</code>, in which case Tesseract will use whatever language matches best. Keep in mind that Tesseract uses much more CPU time with multiple languages enabled.</p> <p>Defaults to \"eng\".</p> <p>Note</p> <p>If your language contains a '-' such as chi-sim, you must use <code>chi_sim</code>.</p> <code>PAPERLESS_OCR_MODE=&lt;mode&gt;</code> <p>Tell paperless when and how to perform ocr on your documents. Four modes are available:</p> <ul> <li> <p><code>skip</code>: Paperless skips all pages and will perform ocr only on     pages where no text is present. This is the safest option.</p> </li> <li> <p><code>skip_noarchive</code>: In addition to skip, paperless won't create     an archived version of your documents when it finds any text in     them. This is useful if you don't want to have two     almost-identical versions of your digital documents in the media     folder. This is the fastest option.</p> </li> <li> <p><code>redo</code>: Paperless will OCR all pages of your documents and     attempt to replace any existing text layers with new text. This     will be useful for documents from scanners that already     performed OCR with insufficient results. It will also perform     OCR on purely digital documents.</p> <p>This option may fail on some documents that have features that cannot be removed, such as forms. In this case, the text from the document is used instead.</p> </li> <li> <p><code>force</code>: Paperless rasterizes your documents, converting any     text into images and puts the OCRed text on top. This works for     all documents, however, the resulting document may be     significantly larger and text won't appear as sharp when zoomed     in.</p> </li> </ul> <p>The default is <code>skip</code>, which only performs OCR when necessary and always creates archived documents.</p> <p>Read more about this in the OCRmyPDF documentation.</p> <code>PAPERLESS_OCR_CLEAN=&lt;mode&gt;</code> <p>Tells paperless to use <code>unpaper</code> to clean any input document before sending it to tesseract. This uses more resources, but generally results in better OCR results. The following modes are available:</p> <ul> <li><code>clean</code>: Apply unpaper.</li> <li><code>clean-final</code>: Apply unpaper, and use the cleaned images to     build the output file instead of the original images.</li> <li><code>none</code>: Do not apply unpaper.</li> </ul> <p>Defaults to <code>clean</code>.</p> <p>Note</p> <p><code>clean-final</code> is incompatible with ocr mode <code>redo</code>. When both <code>clean-final</code> and the ocr mode <code>redo</code> is configured, <code>clean</code> is used instead.</p> <code>PAPERLESS_OCR_DESKEW=&lt;bool&gt;</code> <p>Tells paperless to correct skewing (slight rotation of input images mainly due to improper scanning)</p> <p>Defaults to <code>true</code>, which enables this feature.</p> <p>Note</p> <p>Deskewing is incompatible with ocr mode <code>redo</code>. Deskewing will get disabled automatically if <code>redo</code> is used as the ocr mode.</p> <code>PAPERLESS_OCR_ROTATE_PAGES=&lt;bool&gt;</code> <p>Tells paperless to correct page rotation (90\u00b0, 180\u00b0 and 270\u00b0 rotation).</p> <p>If you notice that paperless is not rotating incorrectly rotated pages (or vice versa), try adjusting the threshold up or down (see below).</p> <p>Defaults to <code>true</code>, which enables this feature.</p> <code>PAPERLESS_OCR_ROTATE_PAGES_THRESHOLD=&lt;num&gt;</code> <p>Adjust the threshold for automatic page rotation by <code>PAPERLESS_OCR_ROTATE_PAGES</code>. This is an arbitrary value reported by tesseract. \"15\" is a very conservative value, whereas \"2\" is a very aggressive option and will often result in correctly rotated pages being rotated as well.</p> <p>Defaults to \"12\".</p> <code>PAPERLESS_OCR_OUTPUT_TYPE=&lt;type&gt;</code> <p>Specify the the type of PDF documents that paperless should produce.</p> <ul> <li><code>pdf</code>: Modify the PDF document as little as possible.</li> <li><code>pdfa</code>: Convert PDF documents into PDF/A-2b documents, which is     a subset of the entire PDF specification and meant for storing     documents long term.</li> <li><code>pdfa-1</code>, <code>pdfa-2</code>, <code>pdfa-3</code> to specify the exact version of     PDF/A you wish to use.</li> </ul> <p>If not specified, <code>pdfa</code> is used. Remember that paperless also keeps the original input file as well as the archived version.</p> <code>PAPERLESS_OCR_PAGES=&lt;num&gt;</code> <p>Tells paperless to use only the specified amount of pages for OCR. Documents with less than the specified amount of pages get OCR'ed completely.</p> <p>Specifying 1 here will only use the first page.</p> <p>When combined with <code>PAPERLESS_OCR_MODE=redo</code> or <code>PAPERLESS_OCR_MODE=force</code>, paperless will not modify any text it finds on excluded pages and copy it verbatim.</p> <p>Defaults to 0, which disables this feature and always uses all pages.</p> <code>PAPERLESS_OCR_IMAGE_DPI=&lt;num&gt;</code> <p>Paperless will OCR any images you put into the system and convert them into PDF documents. This is useful if your scanner produces images. In order to do so, paperless needs to know the DPI of the image. Most images from scanners will have this information embedded and paperless will detect and use that information. In case this fails, it uses this value as a fallback.</p> <p>Set this to the DPI your scanner produces images at.</p> <p>Default is none, which will automatically calculate image DPI so that the produced PDF documents are A4 sized.</p> <code>PAPERLESS_OCR_MAX_IMAGE_PIXELS=&lt;num&gt;</code> <p>Paperless will raise a warning when OCRing images which are over this limit and will not OCR images which are more than twice this limit. Note this does not prevent the document from being consumed, but could result in missing text content.</p> <p>If unset, will default to the value determined by Pillow.</p> <p>Note</p> <p>Increasing this limit could cause Paperless to consume additional resources when consuming a file. Be sure you have sufficient system resources.</p> <p>Warning</p> <p>The limit is intended to prevent malicious files from consuming system resources and causing crashes and other errors. Only increase this value if you are certain your documents are not malicious and you need the text which was not OCRed</p> <code>PAPERLESS_OCR_USER_ARGS=&lt;json&gt;</code> <p>OCRmyPDF offers many more options. Use this parameter to specify any additional arguments you wish to pass to OCRmyPDF. Since Paperless uses the API of OCRmyPDF, you have to specify these in a format that can be passed to the API. See the API reference of OCRmyPDF for valid parameters. All command line options are supported, but they use underscores instead of dashes.</p> <p>Warning</p> <p>Paperless has been tested to work with the OCR options provided above. There are many options that are incompatible with each other, so specifying invalid options may prevent paperless from consuming any documents.</p> <p>Specify arguments as a JSON dictionary. Keep note of lower case booleans and double quoted parameter names and strings. Examples:</p> <pre><code>{\"deskew\": true, \"optimize\": 3, \"unpaper_args\": \"--pre-rotate 90\"}\n</code></pre>"},{"location":"configuration/#tika","title":"Tika settings","text":"<p>Paperless can make use of Tika and Gotenberg for parsing and converting \"Office\" documents (such as \".doc\", \".xlsx\" and \".odt\"). Tika and Gotenberg are also needed to allow parsing of E-Mails (.eml).</p> <p>If you wish to use this, you must provide a Tika server and a Gotenberg server, configure their endpoints, and enable the feature.</p> <code>PAPERLESS_TIKA_ENABLED=&lt;bool&gt;</code> <p>Enable (or disable) the Tika parser.</p> <p>Defaults to false.</p> <code>PAPERLESS_TIKA_ENDPOINT=&lt;url&gt;</code> <p>Set the endpoint URL were Paperless can reach your Tika server.</p> <p>Defaults to \"http://localhost:9998\".</p> <code>PAPERLESS_TIKA_GOTENBERG_ENDPOINT=&lt;url&gt;</code> <p>Set the endpoint URL were Paperless can reach your Gotenberg server.</p> <p>Defaults to \"http://localhost:3000\".</p> <p>If you run paperless on docker, you can add those services to the docker-compose file (see the provided <code>docker-compose.sqlite-tika.yml</code> file for reference). The changes requires are as follows:</p> <pre><code>services:\n# ...\nwebserver:\n# ...\nenvironment:\n# ...\nPAPERLESS_TIKA_ENABLED: 1\nPAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000\nPAPERLESS_TIKA_ENDPOINT: http://tika:9998\n# ...\ngotenberg:\nimage: gotenberg/gotenberg:7.8\nrestart: unless-stopped\n# The gotenberg chromium route is used to convert .eml files. We do not\n# want to allow external content like tracking pixels or even javascript.\ncommand:\n- 'gotenberg'\n- '--chromium-disable-javascript=true'\n- '--chromium-allow-list=file:///tmp/.*'\ntika:\nimage: ghcr.io/paperless-ngx/tika:latest\nrestart: unless-stopped\n</code></pre> <p>Add the configuration variables to the environment of the webserver (alternatively put the configuration in the <code>docker-compose.env</code> file) and add the additional services below the webserver service. Watch out for indentation.</p> <p>Make sure to use the correct format <code>PAPERLESS_TIKA_ENABLED = 1</code> so python_dotenv can parse the statement correctly.</p>"},{"location":"configuration/#software_tweaks","title":"Software tweaks","text":"<code>PAPERLESS_TASK_WORKERS=&lt;num&gt;</code> <p>Paperless does multiple things in the background: Maintain the search index, maintain the automatic matching algorithm, check emails, consume documents, etc. This variable specifies how many things it will do in parallel.</p> <p>Defaults to 1</p> <code>PAPERLESS_THREADS_PER_WORKER=&lt;num&gt;</code> <p>Furthermore, paperless uses multiple threads when consuming documents to speed up OCR. This variable specifies how many pages paperless will process in parallel on a single document.</p> <p>Warning</p> <p>Ensure that the product</p> <p><code>PAPERLESS_TASK_WORKERS * PAPERLESS_THREADS_PER_WORKER</code></p> <p>does not exceed your CPU core count or else paperless will be extremely slow. If you want paperless to process many documents in parallel, choose a high worker count. If you want paperless to process very large documents faster, use a higher thread per worker count.</p> <p>The default is a balance between the two, according to your CPU core count, with a slight favor towards threads per worker:</p> CPU core count Workers Threads &gt; 1 &gt; 1 &gt; 1 &gt; 2 &gt; 2 &gt; 1 &gt; 4 &gt; 2 &gt; 2 &gt; 6 &gt; 2 &gt; 3 &gt; 8 &gt; 2 &gt; 4 &gt; 12 &gt; 3 &gt; 4 &gt; 16 &gt; 4 &gt; 4 <p>If you only specify PAPERLESS_TASK_WORKERS, paperless will adjust PAPERLESS_THREADS_PER_WORKER automatically.</p> <code>PAPERLESS_WORKER_TIMEOUT=&lt;num&gt;</code> <p>Machines with few cores or weak ones might not be able to finish OCR on large documents within the default 1800 seconds. So extending this timeout may prove to be useful on weak hardware setups.</p> <code>PAPERLESS_TIME_ZONE=&lt;timezone&gt;</code> <p>Set the time zone here. See https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-TIME_ZONE for details on how to set it.</p> <p>Defaults to UTC.</p> <code>PAPERLESS_ENABLE_NLTK=&lt;bool&gt;</code> <p>Enables or disables the advanced natural language processing used during automatic classification. If disabled, paperless will still perform some basic text pre-processing before matching.</p> <p>See also <code>PAPERLESS_NLTK_DIR</code>.</p> <p>Defaults to 1.</p> <code>PAPERLESS_EMAIL_TASK_CRON=&lt;cron expression&gt;</code> <p>Configures the scheduled email fetching frequency. The value should be a valid crontab(5) expression describing when to run.</p> <p>If set to the string \"disable\", no emails will be fetched automatically.</p> <p>Defaults to <code>*/10 * * * *</code> or every ten minutes.</p> <code>PAPERLESS_TRAIN_TASK_CRON=&lt;cron expression&gt;</code> <p>Configures the scheduled automatic classifier training frequency. The value should be a valid crontab(5) expression describing when to run.</p> <p>If set to the string \"disable\", the classifier will not be trained automatically.</p> <p>Defaults to <code>5 */1 * * *</code> or every hour at 5 minutes past the hour.</p> <code>PAPERLESS_INDEX_TASK_CRON=&lt;cron expression&gt;</code> <p>Configures the scheduled search index update frequency. The value should be a valid crontab(5) expression describing when to run.</p> <p>If set to the string \"disable\", the search index will not be automatically updated.</p> <p>Defaults to <code>0 0 * * *</code> or daily at midnight.</p> <code>PAPERLESS_SANITY_TASK_CRON=&lt;cron expression&gt;</code> <p>Configures the scheduled sanity checker frequency.</p> <p>If set to the string \"disable\", the sanity checker will not run automatically.</p> <p>Defaults to <code>30 0 * * sun</code> or Sunday at 30 minutes past midnight.</p> <code>PAPERLESS_ENABLE_COMPRESSION=&lt;bool&gt;</code> <p>Enables compression of the responses from the webserver.</p> <p>Defaults to 1, enabling compression.</p> <p>Note</p> <p>If you are using a proxy such as nginx, it is likely more efficient to enable compression in your proxy configuration rather than the webserver</p>"},{"location":"configuration/#polling","title":"Polling","text":"<code>PAPERLESS_CONSUMER_POLLING=&lt;num&gt;</code> <p>If paperless won't find documents added to your consume folder, it might not be able to automatically detect filesystem changes. In that case, specify a polling interval in seconds here, which will then cause paperless to periodically check your consumption directory for changes. This will also disable listening for file system changes with <code>inotify</code>.</p> <p>Defaults to 0, which disables polling and uses filesystem notifications.</p> <code>PAPERLESS_CONSUMER_POLLING_RETRY_COUNT=&lt;num&gt;</code> <p>If consumer polling is enabled, sets the number of times paperless will check for a file to remain unmodified.</p> <p>Defaults to 5.</p> <code>PAPERLESS_CONSUMER_POLLING_DELAY=&lt;num&gt;</code> <p>If consumer polling is enabled, sets the delay in seconds between each check (above) paperless will do while waiting for a file to remain unmodified.</p> <p>Defaults to 5.</p>"},{"location":"configuration/#inotify","title":"iNotify","text":"<code>PAPERLESS_CONSUMER_INOTIFY_DELAY=&lt;num&gt;</code> <p>Sets the time in seconds the consumer will wait for additional events from inotify before the consumer will consider a file ready and begin consumption. Certain scanners or network setups may generate multiple events for a single file, leading to multiple consumers working on the same file. Configure this to prevent that.</p> <p>Defaults to 0.5 seconds.</p> <code>PAPERLESS_CONSUMER_DELETE_DUPLICATES=&lt;bool&gt;</code> <p>When the consumer detects a duplicate document, it will not touch the original document. This default behavior can be changed here.</p> <p>Defaults to false.</p> <code>PAPERLESS_CONSUMER_RECURSIVE=&lt;bool&gt;</code> <p>Enable recursive watching of the consumption directory. Paperless will then pickup files from files in subdirectories within your consumption directory as well.</p> <p>Defaults to false.</p> <code>PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS=&lt;bool&gt;</code> <p>Set the names of subdirectories as tags for consumed files. E.g. <code>&lt;CONSUMPTION_DIR&gt;/foo/bar/file.pdf</code> will add the tags \"foo\" and \"bar\" to the consumed file. Paperless will create any tags that don't exist yet.</p> <p>This is useful for sorting documents with certain tags such as <code>car</code> or <code>todo</code> prior to consumption. These folders won't be deleted.</p> <p>PAPERLESS_CONSUMER_RECURSIVE must be enabled for this to work.</p> <p>Defaults to false.</p> <code>PAPERLESS_CONSUMER_ENABLE_BARCODES=&lt;bool&gt;</code> <p>Enables the scanning and page separation based on detected barcodes. This allows for scanning and adding multiple documents per uploaded file, which are separated by one or multiple barcode pages.</p> <p>For ease of use, it is suggested to use a standardized separation page, e.g. here.</p> <p>If no barcodes are detected in the uploaded file, no page separation will happen.</p> <p>The original document will be removed and the separated pages will be saved as pdf.</p> <p>Defaults to false.</p> <code>PAPERLESS_CONSUMER_BARCODE_TIFF_SUPPORT=&lt;bool&gt;</code> <p>Whether TIFF image files should be scanned for barcodes. This will automatically convert any TIFF image(s) to pdfs for later processing. This only has an effect, if PAPERLESS_CONSUMER_ENABLE_BARCODES has been enabled.</p> <p>Defaults to false.</p> <code>PAPERLESS_CONSUMER_BARCODE_STRING=PATCHT</code> <p>Defines the string to be detected as a separator barcode. If paperless is used with the PATCH-T separator pages, users shouldn't change this.</p> <p>Defaults to \"PATCHT\"</p> <code>PAPERLESS_CONSUMER_ENABLE_ASN_BARCODE=&lt;bool&gt;</code> <p>Enables the detection of barcodes in the scanned document and setting the ASN (archive serial number) if a properly formatted barcode is detected.</p> <p>The barcode must consist of a (configurable) prefix and the ASN to be set, for instance <code>ASN00123</code>.</p> <p>This option is compatible with barcode page separation, since pages will be split up before reading the ASN.</p> <p>If no ASN barcodes are detected in the uploaded file, no ASN will be set. If a barcode with an already existing ASN is detected, no ASN will be set either and a warning will be logged.</p> <p>Defaults to false.</p> <code>PAPERLESS_CONSUMER_ASN_BARCODE_PREFIX=ASN</code> <p>Defines the prefix that is used to identify a barcode as an ASN barcode.</p> <p>Defaults to \"ASN\"</p> <code>PAPERLESS_CONVERT_MEMORY_LIMIT=&lt;num&gt;</code> <p>On smaller systems, or even in the case of Very Large Documents, the consumer may explode, complaining about how it's \"unable to extend pixel cache\". In such cases, try setting this to a reasonably low value, like 32. The default is to use whatever is necessary to do everything without writing to disk, and units are in megabytes.</p> <p>For more information on how to use this value, you should search the web for \"MAGICK_MEMORY_LIMIT\".</p> <p>Defaults to 0, which disables the limit.</p> <code>PAPERLESS_CONVERT_TMPDIR=&lt;path&gt;</code> <p>Similar to the memory limit, if you've got a small system and your OS mounts /tmp as tmpfs, you should set this to a path that's on a physical disk, like /home/your_user/tmp or something. ImageMagick will use this as scratch space when crunching through very large documents.</p> <p>For more information on how to use this value, you should search the web for \"MAGICK_TMPDIR\".</p> <p>Default is none, which disables the temporary directory.</p> <code>PAPERLESS_POST_CONSUME_SCRIPT=&lt;filename&gt;</code> <p>After a document is consumed, Paperless can trigger an arbitrary script if you like. This script will be passed a number of arguments for you to work with. For more information, take a look at Post-consumption script.</p> <p>The default is blank, which means nothing will be executed.</p> <code>PAPERLESS_FILENAME_DATE_ORDER=&lt;format&gt;</code> <p>Paperless will check the document text for document date information. Use this setting to enable checking the document filename for date information. The date order can be set to any option as specified in https://dateparser.readthedocs.io/en/latest/settings.html#date-order. The filename will be checked first, and if nothing is found, the document text will be checked as normal.</p> <p>A date in a filename must have some separators (<code>.</code>, <code>,</code>, <code>-</code>, <code>/</code>, etc) for it to be parsed.</p> <p>Defaults to none, which disables this feature.</p> <code>PAPERLESS_NUMBER_OF_SUGGESTED_DATES=&lt;num&gt;</code> <p>Paperless searches an entire document for dates. The first date found will be used as the initial value for the created date. When this variable is greater than 0 (or left to it's default value), paperless will also suggest other dates found in the document, up to a maximum of this setting. Note that duplicates will be removed, which can result in fewer dates displayed in the frontend than this setting value.</p> <p>The task to find all dates can be time-consuming and increases with a higher (maximum) number of suggested dates and slower hardware.</p> <p>Defaults to 3. Set to 0 to disable this feature.</p> <code>PAPERLESS_THUMBNAIL_FONT_NAME=&lt;filename&gt;</code> <p>Paperless creates thumbnails for plain text files by rendering the content of the file on an image and uses a predefined font for that. This font can be changed here.</p> <p>Note that this won't have any effect on already generated thumbnails.</p> <p>Defaults to <code>/usr/share/fonts/liberation/LiberationSerif-Regular.ttf</code>.</p> <code>PAPERLESS_IGNORE_DATES=&lt;string&gt;</code> <p>Paperless parses a documents creation date from filename and file content. You may specify a comma separated list of dates that should be ignored during this process. This is useful for special dates (like date of birth) that appear in documents regularly but are very unlikely to be the documents creation date.</p> <p>The date is parsed using the order specified in PAPERLESS_DATE_ORDER</p> <p>Defaults to an empty string to not ignore any dates.</p> <code>PAPERLESS_DATE_ORDER=&lt;format&gt;</code> <p>Paperless will try to determine the document creation date from its contents. Specify the date format Paperless should expect to see within your documents.</p> <p>This option defaults to DMY which translates to day first, month second, and year last order. Characters D, M, or Y can be shuffled to meet the required order.</p> <code>PAPERLESS_CONSUMER_IGNORE_PATTERNS=&lt;json&gt;</code> <p>By default, paperless ignores certain files and folders in the consumption directory, such as system files created by the Mac OS or hidden folders some tools use to store data.</p> <p>This can be adjusted by configuring a custom json array with patterns to exclude.</p> <p>For example, <code>.DS_STORE/*</code> will ignore any files found in a folder named <code>.DS_STORE</code>, including <code>.DS_STORE/bar.pdf</code> and <code>foo/.DS_STORE/bar.pdf</code></p> <p>A pattern like <code>._*</code> will ignore anything starting with <code>._</code>, including: <code>._foo.pdf</code> and <code>._bar/foo.pdf</code></p> <p>Defaults to <code>[\".DS_STORE/*\", \"._*\", \".stfolder/*\", \".stversions/*\", \".localized/*\", \"desktop.ini\", \"@eaDir/*\"]</code>.</p>"},{"location":"configuration/#binaries","title":"Binaries","text":"<p>There are a few external software packages that Paperless expects to find on your system when it starts up. Unless you've done something creative with their installation, you probably won't need to edit any of these. However, if you've installed these programs somewhere where simply typing the name of the program doesn't automatically execute it (ie. the program isn't in your \\$PATH), then you'll need to specify the literal path for that program.</p> <code>PAPERLESS_CONVERT_BINARY=&lt;path&gt;</code> <p>Defaults to \"convert\".</p> <code>PAPERLESS_GS_BINARY=&lt;path&gt;</code> <p>Defaults to \"gs\".</p>"},{"location":"configuration/#docker","title":"Docker-specific options","text":"<p>These options don't have any effect in <code>paperless.conf</code>. These options adjust the behavior of the docker container. Configure these in <code>docker-compose.env</code>.</p> <code>PAPERLESS_WEBSERVER_WORKERS=&lt;num&gt;</code> <p>The number of worker processes the webserver should spawn. More worker processes usually result in the front end to load data much quicker. However, each worker process also loads the entire application into memory separately, so increasing this value will increase RAM usage.</p> <p>Defaults to 1.</p> <code>PAPERLESS_BIND_ADDR=&lt;ip address&gt;</code> <p>The IP address the webserver will listen on inside the container. There are special setups where you may need to configure this value to restrict the Ip address or interface the webserver listens on.</p> <p>Defaults to <code>[::]</code>, meaning all interfaces, including IPv6.</p> <code>PAPERLESS_PORT=&lt;port&gt;</code> <p>The port number the webserver will listen on inside the container. There are special setups where you may need this to avoid collisions with other services (like using podman with multiple containers in one pod).</p> <p>Don't change this when using Docker. To change the port the webserver is reachable outside of the container, instead refer to the \"ports\" key in <code>docker-compose.yml</code>.</p> <p>Defaults to 8000.</p> <code>USERMAP_UID=&lt;uid&gt;</code> <p>The ID of the paperless user in the container. Set this to your actual user ID on the host system, which you can get by executing</p> <pre><code>$ id -u\n</code></pre> <p>Paperless will change ownership on its folders to this user, so you need to get this right in order to be able to write to the consumption directory.</p> <p>Defaults to 1000.</p> <code>USERMAP_GID=&lt;gid&gt;</code> <p>The ID of the paperless Group in the container. Set this to your actual group ID on the host system, which you can get by executing</p> <pre><code>$ id -g\n</code></pre> <p>Paperless will change ownership on its folders to this group, so you need to get this right in order to be able to write to the consumption directory.</p> <p>Defaults to 1000.</p> <code>PAPERLESS_OCR_LANGUAGES=&lt;list&gt;</code> <p>Additional OCR languages to install. By default, paperless comes with English, German, Italian, Spanish and French. If your language is not in this list, install additional languages with this configuration option (find the right LangCodes):</p> <pre><code>PAPERLESS_OCR_LANGUAGES=tur ces\n</code></pre> <p>Make sure it's a space separated list when using several values.</p> <p>To actually use these languages, also set the default OCR language of paperless:</p> <pre><code>PAPERLESS_OCR_LANGUAGE=tur\n</code></pre> <p>Defaults to none, which does not install any additional languages.</p> <code>PAPERLESS_ENABLE_FLOWER=&lt;defined&gt;</code> <p>If this environment variable is defined, the Celery monitoring tool Flower will be started by the container.</p> <p>You can read more about this in the advanced documentation.</p>"},{"location":"configuration/#update-checking","title":"Update Checking","text":"<p><code>PAPERLESS_ENABLE_UPDATE_CHECK=&lt;bool&gt;</code></p> <p>Note</p> <p>This setting was deprecated in favor of a frontend setting after v1.9.2. A one-time migration is performed for users who have this setting set. This setting is always ignored if the corresponding frontend setting has been set.</p>"},{"location":"development/","title":"Development","text":"<p>This section describes the steps you need to take to start development on Paperless-ngx.</p> <p>Check out the source from GitHub. The repository is organized in the following way:</p> <ul> <li><code>main</code> always represents the latest release and will only see   changes when a new release is made.</li> <li><code>dev</code> contains the code that will be in the next release.</li> <li><code>feature-X</code> contain bigger changes that will be in some release, but   not necessarily the next one.</li> </ul> <p>When making functional changes to Paperless-ngx, always make your changes on the <code>dev</code> branch.</p> <p>Apart from that, the folder structure is as follows:</p> <ul> <li><code>docs/</code> - Documentation.</li> <li><code>src-ui/</code> - Code of the front end.</li> <li><code>src/</code> - Code of the back end.</li> <li><code>scripts/</code> - Various scripts that help with different parts of   development.</li> <li><code>docker/</code> - Files required to build the docker image.</li> </ul>"},{"location":"development/#contributing-to-paperless-ngx","title":"Contributing to Paperless-ngx","text":"<p>Maybe you've been using Paperless-ngx for a while and want to add a feature or two, or maybe you've come across a bug that you have some ideas how to solve. The beauty of open source software is that you can see what's wrong and help to get it fixed for everyone!</p> <p>Before contributing please review our code of conduct and other important information in the contributing guidelines.</p>"},{"location":"development/#code-formatting-with-pre-commit-hooks","title":"Code formatting with pre-commit hooks","text":"<p>To ensure a consistent style and formatting across the project source, the project utilizes Git <code>pre-commit</code> hooks to perform some formatting and linting before a commit is allowed. That way, everyone uses the same style and some common issues can be caught early on.</p> <p>Once installed, hooks will run when you commit. If the formatting isn't quite right or a linter catches something, the commit will be rejected. You'll need to look at the output and fix the issue. Some hooks, such as the Python formatting tool <code>black</code>, will format failing files, so all you need to do is <code>git add</code> those files again and retry your commit.</p>"},{"location":"development/#general-setup","title":"General setup","text":"<p>After you forked and cloned the code from GitHub you need to perform a first-time setup.</p> <p>Note</p> <p>Every command is executed directly from the root folder of the project unless specified otherwise.</p> <ol> <li> <p>Install prerequisites + pipenv as mentioned in     Bare metal route.</p> </li> <li> <p>Copy <code>paperless.conf.example</code> to <code>paperless.conf</code> and enable debug     mode within the file via <code>PAPERLESS_DEBUG=true</code>.</p> </li> <li> <p>Create <code>consume</code> and <code>media</code> directories:</p> <pre><code>$ mkdir -p consume media\n</code></pre> </li> <li> <p>Install the Python dependencies:</p> <pre><code>$ pipenv install --dev\n</code></pre> <p>Note</p> <p>Using a virtual environment is highly recommended. You can spawn one via <code>pipenv shell</code>. Make sure you're using Python 3.10.x or lower. Otherwise you might get issues with building dependencies. You can use pyenv to install a specific Python version.</p> </li> <li> <p>Install pre-commit hooks:</p> <pre><code>$ pre-commit install\n</code></pre> </li> <li> <p>Apply migrations and create a superuser for your development instance:</p> <pre><code># src/\n$ python3 manage.py migrate\n$ python3 manage.py createsuperuser\n</code></pre> </li> <li> <p>You can now either ...</p> <ul> <li> <p>install redis or</p> </li> <li> <p>use the included <code>scripts/start_services.sh</code> to use docker to fire   up a redis instance (and some other services such as tika,   gotenberg and a database server) or</p> </li> <li> <p>spin up a bare redis container</p> </li> </ul> <pre><code>$ docker run -d -p 6379:6379 --restart unless-stopped redis:latest\n</code></pre> </li> <li> <p>Continue with either back-end or front-end development \u2013 or both :-).</p> </li> </ol>"},{"location":"development/#back-end-development","title":"Back end development","text":"<p>The back end is a Django application. PyCharm as well as Visual Studio Code work well for development, but you can use whatever you want.</p> <p>Configure the IDE to use the <code>src/</code>-folder as the base source folder. Configure the following launch configurations in your IDE:</p> <ul> <li><code>python3 manage.py runserver</code></li> <li><code>python3 manage.py document_consumer</code></li> <li><code>celery --app paperless worker -l DEBUG</code> (or any other log level)</li> </ul> <p>To start them all:</p> <pre><code># src/\n$ python3 manage.py runserver &amp; \\\npython3 manage.py document_consumer &amp; \\\ncelery --app paperless worker -l DEBUG\n</code></pre> <p>You might need the front end to test your back end code. This assumes that you have AngularJS installed on your system. Go to the Front end development section for further details. To build the front end once use this commmand:</p> <pre><code># src-ui/\n$ npm install\n$ ng build --configuration production\n</code></pre>"},{"location":"development/#testing","title":"Testing","text":"<ul> <li>Run <code>pytest</code> in the <code>src/</code> directory to execute all tests. This also   generates a HTML coverage report. When runnings test, <code>paperless.conf</code>   is loaded as well. However, the tests rely on the default   configuration. This is not ideal. But for now, make sure no settings   except for DEBUG are overridden when testing.</li> </ul> <p>Note</p> <p>The line length rule E501 is generally useful for getting multiple   source files next to each other on the screen. However, in some   cases, its just not possible to make some lines fit, especially   complicated IF cases. Append <code># noqa: E501</code> to disable this check   for certain lines.</p>"},{"location":"development/#front-end-development","title":"Front end development","text":"<p>The front end is built using AngularJS. In order to get started, you need Node.js (version 14.15+) and <code>npm</code>.</p> <p>Note</p> <p>The following commands are all performed in the <code>src-ui</code>-directory. You will need a running back end (including an active session) to connect to the back end API. To spin it up refer to the commands under the section above.</p> <ol> <li>Install the Angular CLI. You might need sudo privileges    to perform this command:</li> </ol> <pre><code>$ npm install -g @angular/cli\n</code></pre> <ol> <li> <p>Make sure that it's on your path.</p> </li> <li> <p>Install all neccessary modules:</p> </li> </ol> <pre><code>$ npm install\n</code></pre> <ol> <li>You can launch a development server by running:</li> </ol> <pre><code>$ ng serve\n</code></pre> <p>This will automatically update whenever you save. However, in-place    compilation might fail on syntax errors, in which case you need to    restart it.</p> <p>By default, the development server is available on <code>http://localhost:4200/</code> and is configured to access the API at    <code>http://localhost:8000/api/</code>, which is the default of the backend. If you enabled <code>DEBUG</code> on the back end, several security overrides for allowed hosts, CORS and X-Frame-Options are in place so that the front end behaves exactly as in production.</p>"},{"location":"development/#testing-and-code-style","title":"Testing and code style","text":"<ul> <li>The front end code (.ts, .html, .scss) use <code>prettier</code> for code   formatting via the Git <code>pre-commit</code> hooks which run automatically on   commit. See above for installation instructions. You can also run this via the CLI with a   command such as</li> </ul> <pre><code>$ git ls-files -- '*.ts' | xargs pre-commit run prettier --files\n</code></pre> <ul> <li>Front end testing uses jest and cypress. There is currently a need   for significantly more front end tests. Unit tests and e2e tests,   respectively, can be run non-interactively with:</li> </ul> <pre><code>$ ng test\n$ npm run e2e:ci\n</code></pre> <ul> <li> <p>Cypress also includes a UI which can be run with:</p> <pre><code>$ ./node_modules/.bin/cypress open\n</code></pre> </li> <li> <p>In order to build the front end and serve it as part of Django, execute:</p> </li> </ul> <pre><code>$ ng build --configuration production\n</code></pre> <p>This will build the front end and put it in a location from which the   Django server will serve it as static content. This way, you can verify   that authentication is working.</p>"},{"location":"development/#localization","title":"Localization","text":"<p>Paperless-ngx is available in many different languages. Since Paperless-ngx consists both of a Django application and an AngularJS front end, both these parts have to be translated separately.</p>"},{"location":"development/#front-end-localization","title":"Front end localization","text":"<ul> <li>The AngularJS front end does localization according to the Angular   documentation.</li> <li>The source language of the project is \"en_US\".</li> <li>The source strings end up in the file <code>src-ui/messages.xlf</code>.</li> <li>The translated strings need to be placed in the   <code>src-ui/src/locale/</code> folder.</li> <li>In order to extract added or changed strings from the source files,   call <code>ng xi18n --ivy</code>.</li> </ul> <p>Adding new languages requires adding the translated files in the <code>src-ui/src/locale/</code> folder and adjusting a couple files.</p> <ol> <li> <p>Adjust <code>src-ui/angular.json</code>:</p> <pre><code>\"i18n\": {\n\"sourceLocale\": \"en-US\",\n\"locales\": {\n\"de\": \"src/locale/messages.de.xlf\",\n\"nl-NL\": \"src/locale/messages.nl_NL.xlf\",\n\"fr\": \"src/locale/messages.fr.xlf\",\n\"en-GB\": \"src/locale/messages.en_GB.xlf\",\n\"pt-BR\": \"src/locale/messages.pt_BR.xlf\",\n\"language-code\": \"language-file\"\n}\n}\n</code></pre> </li> <li> <p>Add the language to the available options in     <code>src-ui/src/app/services/settings.service.ts</code>:</p> <pre><code>getLanguageOptions(): LanguageOption[] {\nreturn [\n{code: \"en-us\", name: $localize`English (US)`, englishName: \"English (US)\", dateInputFormat: \"mm/dd/yyyy\"},\n{code: \"en-gb\", name: $localize`English (GB)`, englishName: \"English (GB)\", dateInputFormat: \"dd/mm/yyyy\"},\n{code: \"de\", name: $localize`German`, englishName: \"German\", dateInputFormat: \"dd.mm.yyyy\"},\n{code: \"nl\", name: $localize`Dutch`, englishName: \"Dutch\", dateInputFormat: \"dd-mm-yyyy\"},\n{code: \"fr\", name: $localize`French`, englishName: \"French\", dateInputFormat: \"dd/mm/yyyy\"},\n{code: \"pt-br\", name: $localize`Portuguese (Brazil)`, englishName: \"Portuguese (Brazil)\", dateInputFormat: \"dd/mm/yyyy\"}\n// Add your new language here\n]\n}\n</code></pre> <p><code>dateInputFormat</code> is a special string that defines the behavior of the date input fields and absolutely needs to contain \"dd\", \"mm\" and \"yyyy\".</p> </li> <li> <p>Import and register the Angular data for this locale in     <code>src-ui/src/app/app.module.ts</code>:</p> <pre><code>import localeDe from '@angular/common/locales/de'\nregisterLocaleData(localeDe)\n</code></pre> </li> </ol>"},{"location":"development/#back-end-localization","title":"Back end localization","text":"<p>A majority of the strings that appear in the back end appear only when the admin is used. However, some of these are still shown on the front end (such as error messages).</p> <ul> <li>The django application does localization according to the Django   documentation.</li> <li>The source language of the project is \"en_US\".</li> <li>Localization files end up in the folder <code>src/locale/</code>.</li> <li>In order to extract strings from the application, call   <code>python3 manage.py makemessages -l en_US</code>. This is important after   making changes to translatable strings.</li> <li>The message files need to be compiled for them to show up in the   application. Call <code>python3 manage.py compilemessages</code> to do this.   The generated files don't get committed into git, since these are   derived artifacts. The build pipeline takes care of executing this   command.</li> </ul> <p>Adding new languages requires adding the translated files in the <code>src/locale/</code>-folder and adjusting the file <code>src/paperless/settings.py</code> to include the new language:</p> <pre><code>LANGUAGES = [\n(\"en-us\", _(\"English (US)\")),\n(\"en-gb\", _(\"English (GB)\")),\n(\"de\", _(\"German\")),\n(\"nl-nl\", _(\"Dutch\")),\n(\"fr\", _(\"French\")),\n(\"pt-br\", _(\"Portuguese (Brazil)\")),\n# Add language here.\n]\n</code></pre>"},{"location":"development/#building-the-documentation","title":"Building the documentation","text":"<p>The documentation is built using material-mkdocs, see their documentation. If you want to build the documentation locally, this is how you do it:</p> <ol> <li> <p>Have an active pipenv shell (<code>pipenv shell</code>) and install Python dependencies:</p> <pre><code>$ pipenv install --dev\n</code></pre> </li> <li> <p>Build the documentation</p> <pre><code>$ mkdocs build --config-file mkdocs.yml\n</code></pre> <p>alternatively...</p> </li> <li> <p>Serve the documentation. This will spin up a     copy of the documentation at http://127.0.0.1:8000     that will automatically refresh everytime you change     something.</p> <pre><code>$ mkdocs serve\n</code></pre> </li> </ol>"},{"location":"development/#building-the-docker-image","title":"Building the Docker image","text":"<p>The docker image is primarily built by the GitHub actions workflow, but it can be faster when developing to build and tag an image locally.</p> <p>To provide the build arguments automatically, build the image using the helper script <code>build-docker-image.sh</code>.</p> <p>Building the docker image from source:</p> <pre><code>./build-docker-image.sh Dockerfile -t &lt;your-tag&gt;\n</code></pre>"},{"location":"development/#extending-paperless-ngx","title":"Extending Paperless-ngx","text":"<p>Paperless-ngx does not have any fancy plugin systems and will probably never have. However, some parts of the application have been designed to allow easy integration of additional features without any modification to the base code.</p>"},{"location":"development/#making-custom-parsers","title":"Making custom parsers","text":"<p>Paperless-ngx uses parsers to add documents. A parser is responsible for:</p> <ul> <li>Retrieving the content from the original</li> <li>Creating a thumbnail</li> <li>optional: Retrieving a created date from the original</li> <li>optional: Creainge an archived document from the original</li> </ul> <p>Custom parsers can be added to Paperless-ngx to support more file types. In order to do that, you need to write the parser itself and announce its existence to Paperless-ngx.</p> <p>The parser itself must extend <code>documents.parsers.DocumentParser</code> and must implement the methods <code>parse</code> and <code>get_thumbnail</code>. You can provide your own implementation to <code>get_date</code> if you don't want to rely on Paperless-ngx' default date guessing mechanisms.</p> <pre><code>class MyCustomParser(DocumentParser):\ndef parse(self, document_path, mime_type):\n# This method does not return anything. Rather, you should assign\n# whatever you got from the document to the following fields:\n# The content of the document.\nself.text = \"content\"\n# Optional: path to a PDF document that you created from the original.\nself.archive_path = os.path.join(self.tempdir, \"archived.pdf\")\n# Optional: \"created\" date of the document.\nself.date = get_created_from_metadata(document_path)\ndef get_thumbnail(self, document_path, mime_type):\n# This should return the path to a thumbnail you created for this\n# document.\nreturn os.path.join(self.tempdir, \"thumb.webp\")\n</code></pre> <p>If you encounter any issues during parsing, raise a <code>documents.parsers.ParseError</code>.</p> <p>The <code>self.tempdir</code> directory is a temporary directory that is guaranteed to be empty and removed after consumption finished. You can use that directory to store any intermediate files and also use it to store the thumbnail / archived document.</p> <p>After that, you need to announce your parser to Paperless-ngx. You need to connect a handler to the <code>document_consumer_declaration</code> signal. Have a look in the file <code>src/paperless_tesseract/apps.py</code> on how that's done. The handler is a method that returns information about your parser:</p> <pre><code>def myparser_consumer_declaration(sender, **kwargs):\nreturn {\n\"parser\": MyCustomParser,\n\"weight\": 0,\n\"mime_types\": {\n\"application/pdf\": \".pdf\",\n\"image/jpeg\": \".jpg\",\n}\n}\n</code></pre> <ul> <li><code>parser</code> is a reference to a class that extends <code>DocumentParser</code>.</li> <li><code>weight</code> is used whenever two or more parsers are able to parse a   file: The parser with the higher weight wins. This can be used to   override the parsers provided by Paperless-ngx.</li> <li><code>mime_types</code> is a dictionary. The keys are the mime types your   parser supports and the value is the default file extension that   Paperless-ngx should use when storing files and serving them for   download. We could guess that from the file extensions, but some   mime types have many extensions associated with them and the Python   methods responsible for guessing the extension do not always return   the same value.</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#whats-the-general-plan-for-paperless-ngx","title":"What's the general plan for Paperless-ngx?","text":"<p>A: While Paperless-ngx is already considered largely \"feature-complete\" it is a community-driven project and development will be guided in this way. New features can be submitted via GitHub discussions and \"up-voted\" by the community but this is not a guarantee the feature will be implemented. This project will always be open to collaboration in the form of PRs, ideas etc.</p>"},{"location":"faq/#im-using-docker-where-are-my-documents","title":"I'm using docker. Where are my documents?","text":"<p>A: Your documents are stored inside the docker volume <code>paperless_media</code>. Docker manages this volume automatically for you. It is a persistent storage and will persist as long as you don't explicitly delete it. The actual location depends on your host operating system. On Linux, chances are high that this location is</p> <pre><code>/var/lib/docker/volumes/paperless_media/_data\n</code></pre> <p>Warning</p> <p>Do not mess with this folder. Don't change permissions and don't move files around manually. This folder is meant to be entirely managed by docker and paperless.</p>"},{"location":"faq/#lets-say-i-want-to-switch-tools-in-a-year-can-i-easily-move-to-other-systems","title":"Let's say I want to switch tools in a year. Can I easily move to other systems?","text":"<p>A: Your documents are stored as plain files inside the media folder. You can always drag those files out of that folder to use them elsewhere. Here are a couple notes about that.</p> <ul> <li>Paperless-ngx never modifies your original documents. It keeps   checksums of all documents and uses a scheduled sanity checker to   check that they remain the same.</li> <li>By default, paperless uses the internal ID of each document as its   filename. This might not be very convenient for export. However, you   can adjust the way files are stored in paperless by   configuring the filename format.</li> <li>The exporter is   another easy way to get your files out of paperless with reasonable   file names.</li> </ul>"},{"location":"faq/#what-file-types-does-paperless-ngx-support","title":"What file types does paperless-ngx support?","text":"<p>A: Currently, the following files are supported:</p> <ul> <li>PDF documents, PNG images, JPEG images, TIFF images, GIF images and   WebP images are processed with OCR and converted into PDF documents.</li> <li>Plain text documents are supported as well and are added verbatim to   paperless.</li> <li>With the optional Tika integration enabled (see Tika configuration,   Paperless also supports various Office documents (.docx, .doc, odt,   .ppt, .pptx, .odp, .xls, .xlsx, .ods).</li> </ul> <p>Paperless-ngx determines the type of a file by inspecting its content. The file extensions do not matter.</p>"},{"location":"faq/#will-paperless-ngx-run-on-raspberry-pi","title":"Will paperless-ngx run on Raspberry Pi?","text":"<p>A: The short answer is yes. I've tested it on a Raspberry Pi 3 B. The long answer is that certain parts of Paperless will run very slow, such as the OCR. On Raspberry Pi, try to OCR documents before feeding them into paperless so that paperless can reuse the text. The web interface is a lot snappier, since it runs in your browser and paperless has to do much less work to serve the data.</p> <p>Note</p> <p>You can adjust some of the settings so that paperless uses less processing power. See setup for details.</p>"},{"location":"faq/#how-do-i-install-paperless-ngx-on-raspberry-pi","title":"How do I install paperless-ngx on Raspberry Pi?","text":"<p>A: Docker images are available for armv7 and arm64 hardware, so just follow the docker-compose instructions. Apart from more required disk space compared to a bare metal installation, docker comes with close to zero overhead, even on Raspberry Pi.</p> <p>If you decide to got with the bare metal route, be aware that some of the python requirements do not have precompiled packages for ARM / ARM64. Installation of these will require additional development libraries and compilation will take a long time.</p>"},{"location":"faq/#how-do-i-run-this-on-unraid","title":"How do I run this on Unraid?","text":"<p>A: Paperless-ngx is available as community app in Unraid. Uli Fahrer created a container template for that.</p>"},{"location":"faq/#how-do-i-run-this-on-my-toaster","title":"How do I run this on my toaster?","text":"<p>A: I honestly don't know! As for all other devices that might be able to run paperless, you're a bit on your own. If you can't run the docker image, the documentation has instructions for bare metal installs. I'm running paperless on an i3 processor from 2015 or so. This is also what I use to test new releases with. Apart from that, I also have a Raspberry Pi, which I occasionally build the image on and see if it works.</p>"},{"location":"faq/#how-do-i-proxy-this-with-nginx","title":"How do I proxy this with NGINX?","text":"<p>A: See here.</p>"},{"location":"faq/#how-do-i-get-websocket-support-with-apache-mod_wsgi","title":"How do I get WebSocket support with Apache mod_wsgi?","text":"<p>A: <code>mod_wsgi</code> by itself does not support ASGI. Paperless will continue to work with WSGI, but certain features such as status notifications about document consumption won't be available.</p> <p>If you want to continue using <code>mod_wsgi</code>, you will have to run an ASGI-enabled web server as well that processes WebSocket connections, and configure Apache to redirect WebSocket connections to this server. Multiple options for ASGI servers exist:</p> <ul> <li><code>gunicorn</code> with <code>uvicorn</code> as the worker implementation (the default   of paperless)</li> <li><code>daphne</code> as a standalone server, which is the reference   implementation for ASGI.</li> <li><code>uvicorn</code> as a standalone server</li> </ul>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#installation","title":"Installation","text":"<p>You can go multiple routes to setup and run Paperless:</p> <ul> <li>Use the easy install docker script</li> <li>Pull the image from Docker Hub</li> <li>Build the Docker image yourself</li> <li>Install Paperless directly on your system manually (bare metal)</li> </ul> <p>The Docker routes are quick &amp; easy. These are the recommended routes. This configures all the stuff from the above automatically so that it just works and uses sensible defaults for all configuration options. Here you find a cheat-sheet for docker beginners: CLI Basics</p> <p>The bare metal route is complicated to setup but makes it easier should you want to contribute some code back. You need to configure and run the above mentioned components yourself.</p>"},{"location":"setup/#docker_script","title":"Docker using the Installation Script","text":"<p>Paperless provides an interactive installation script. This script will ask you for a couple configuration options, download and create the necessary configuration files, pull the docker image, start paperless and create your user account. This script essentially performs all the steps described in Docker setup automatically.</p> <ol> <li> <p>Make sure that docker and docker-compose are installed.</p> </li> <li> <p>Download and run the installation script:</p> <pre><code>$ bash -c \"$(curl -L https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/main/install-paperless-ngx.sh)\"\n</code></pre> </li> </ol>"},{"location":"setup/#docker_hub","title":"From GHCR / Docker Hub","text":"<ol> <li> <p>Login with your user and create a folder in your home-directory to have a place for your     configuration files and consumption directory.</p> <pre><code>$ mkdir -v ~/paperless-ngx\n</code></pre> </li> <li> <p>Go to the /docker/compose directory on the project     page     and download one of the <code>docker-compose.*.yml</code> files,     depending on which database backend you want to use. Rename this     file to <code>docker-compose.yml</code>. If you want to enable     optional support for Office documents, download a file with     <code>-tika</code> in the file name. Download the     <code>docker-compose.env</code> file and the <code>.env</code> file as well and store them     in the same directory.</p> <p>Tip</p> <p>For new installations, it is recommended to use PostgreSQL as the database backend.</p> </li> <li> <p>Install Docker and     docker-compose.</p> <p>Warning</p> <p>If you want to use the included <code>docker-compose.*.yml</code> file, you need to have at least Docker version 17.09.0 and docker-compose version 1.17.0. To check do: <code>docker-compose -v</code> or <code>docker -v</code></p> <p>See the Docker installation guide on how to install the current version of Docker for your operating system or Linux distribution of choice. To get the latest version of docker-compose, follow the docker-compose installation guide if your package repository doesn't include it.</p> </li> <li> <p>Modify <code>docker-compose.yml</code> to your preferences. You may want to     change the path to the consumption directory. Find the line that     specifies where to mount the consumption directory:</p> <pre><code>- ./consume:/usr/src/paperless/consume\n</code></pre> <p>Replace the part BEFORE the colon with a local directory of your choice:</p> <pre><code>- /home/jonaswinkler/paperless-inbox:/usr/src/paperless/consume\n</code></pre> <p>Don't change the part after the colon or paperless wont find your documents.</p> <p>You may also need to change the default port that the webserver will use from the default (8000):</p> <pre><code>ports:\n- 8000:8000\n</code></pre> <p>Replace the part BEFORE the colon with a port of your choice:</p> <pre><code>ports:\n- 8010:8000\n</code></pre> <p>Don't change the part after the colon or edit other lines that refer to port 8000. Modifying the part before the colon will map requests on another port to the webserver running on the default port.</p> <p>Rootless</p> <p>If you want to run Paperless as a rootless container, you will need to do the following in your <code>docker-compose.yml</code>:</p> <ul> <li>set the <code>user</code> running the container to map to the <code>paperless</code>   user in the container. This value (<code>user_id</code> below), should be   the same id that <code>USERMAP_UID</code> and <code>USERMAP_GID</code> are set to in   the next step. See <code>USERMAP_UID</code> and <code>USERMAP_GID</code> here.</li> </ul> <p>Your entry for Paperless should contain something like:</p> <pre><code>webserver:\n  image: ghcr.io/paperless-ngx/paperless-ngx:latest\n  user: &lt;user_id&gt;\n</code></pre> </li> <li> <p>Modify <code>docker-compose.env</code>, following the comments in the file. The     most important change is to set <code>USERMAP_UID</code> and <code>USERMAP_GID</code> to     the uid and gid of your user on the host system. Use <code>id -u</code> and     <code>id -g</code> to get these.</p> <p>This ensures that both the docker container and you on the host machine have write access to the consumption directory. If your UID and GID on the host system is 1000 (the default for the first normal user on most systems), it will work out of the box without any modifications. <code>id \"username\"</code> to check.</p> <p>Note</p> <p>You can copy any setting from the file <code>paperless.conf.example</code> and paste it here. Have a look at configuration to see what's available.</p> <p>Note</p> <p>You can utilize Docker secrets for configuration settings by appending <code>_FILE</code> to configuration values. For example <code>PAPERLESS_DBUSER</code> can be set using <code>PAPERLESS_DBUSER_FILE=/var/run/secrets/password.txt</code>.</p> <p>Warning</p> <p>Some file systems such as NFS network shares don't support file system notifications with <code>inotify</code>. When storing the consumption directory on such a file system, paperless will not pick up new files with the default configuration. You will need to use <code>PAPERLESS_CONSUMER_POLLING</code>, which will disable inotify. See here.</p> </li> <li> <p>Run <code>docker-compose pull</code>, followed by <code>docker-compose up -d</code>. This     will pull the image, create and start the necessary containers.</p> </li> <li> <p>To be able to login, you will need a super user. To create it,     execute the following command:</p> <pre><code>$ docker-compose run --rm webserver createsuperuser\n</code></pre> <p>This will prompt you to set a username, an optional e-mail address and finally a password (at least 8 characters).</p> </li> <li> <p>The default <code>docker-compose.yml</code> exports the webserver on your local     port</p> <p>8000. If you did not change this, you should now be able to visit your Paperless instance at <code>http://127.0.0.1:8000</code> or your servers IP-Address:8000. Use the login credentials you have created with the previous step.</p> </li> </ol>"},{"location":"setup/#docker_build","title":"Build the Docker image yourself","text":"<ol> <li> <p>Clone the entire repository of paperless:</p> <pre><code>git clone https://github.com/paperless-ngx/paperless-ngx\n</code></pre> <p>The master branch always reflects the latest stable version.</p> </li> <li> <p>Copy one of the <code>docker/compose/docker-compose.*.yml</code> to     <code>docker-compose.yml</code> in the root folder, depending on which database     backend you want to use. Copy <code>docker-compose.env</code> into the project     root as well.</p> </li> <li> <p>In the <code>docker-compose.yml</code> file, find the line that instructs     docker-compose to pull the paperless image from Docker Hub:</p> <pre><code>webserver:\nimage: ghcr.io/paperless-ngx/paperless-ngx:latest\n</code></pre> <p>and replace it with a line that instructs docker-compose to build the image from the current working directory instead:</p> <pre><code>webserver:\nbuild:\ncontext: .\nargs:\nQPDF_VERSION: x.y.x\nPIKEPDF_VERSION: x.y.z\nPSYCOPG2_VERSION: x.y.z\nJBIG2ENC_VERSION: 0.29\n</code></pre> <p>Note</p> <p>You should match the build argument versions to the version for the release you have checked out. These are pre-built images with certain, more updated software. If you want to build these images your self, that is possible, but beyond the scope of these steps.</p> </li> <li> <p>Follow steps 3 to 8 of Docker Setup. When asked to run     <code>docker-compose pull</code> to pull the image, do</p> <pre><code>$ docker-compose build\n</code></pre> <p>instead to build the image.</p> </li> </ol>"},{"location":"setup/#bare_metal","title":"Bare Metal Route","text":"<p>Paperless runs on linux only. The following procedure has been tested on a minimal installation of Debian/Buster, which is the current stable release at the time of writing. Windows is not and will never be supported.</p> <ol> <li> <p>Install dependencies. Paperless requires the following packages.</p> <ul> <li><code>python3</code> 3.8, 3.9</li> <li><code>python3-pip</code></li> <li><code>python3-dev</code></li> <li><code>default-libmysqlclient-dev</code> for MariaDB</li> <li><code>fonts-liberation</code> for generating thumbnails for plain text   files</li> <li><code>imagemagick</code> &gt;= 6 for PDF conversion</li> <li><code>gnupg</code> for handling encrypted documents</li> <li><code>libpq-dev</code> for PostgreSQL</li> <li><code>libmagic-dev</code> for mime type detection</li> <li><code>mariadb-client</code> for MariaDB compile time</li> <li><code>mime-support</code> for mime type detection</li> <li><code>libzbar0</code> for barcode detection</li> <li><code>poppler-utils</code> for barcode detection</li> </ul> <p>Use this list for your preferred package management:</p> <pre><code>python3 python3-pip python3-dev imagemagick fonts-liberation gnupg libpq-dev default-libmysqlclient-dev libmagic-dev mime-support libzbar0 poppler-utils\n</code></pre> <p>These dependencies are required for OCRmyPDF, which is used for text recognition.</p> <ul> <li><code>unpaper</code></li> <li><code>ghostscript</code></li> <li><code>icc-profiles-free</code></li> <li><code>qpdf</code></li> <li><code>liblept5</code></li> <li><code>libxml2</code></li> <li><code>pngquant</code> (suggested for certain PDF image optimizations)</li> <li><code>zlib1g</code></li> <li><code>tesseract-ocr</code> &gt;= 4.0.0 for OCR</li> <li><code>tesseract-ocr</code> language packs (<code>tesseract-ocr-eng</code>,   <code>tesseract-ocr-deu</code>, etc)</li> </ul> <p>Use this list for your preferred package management:</p> <pre><code>unpaper ghostscript icc-profiles-free qpdf liblept5 libxml2 pngquant zlib1g tesseract-ocr\n</code></pre> <p>On Raspberry Pi, these libraries are required as well:</p> <ul> <li><code>libatlas-base-dev</code></li> <li><code>libxslt1-dev</code></li> </ul> <p>You will also need <code>build-essential</code>, <code>python3-setuptools</code> and <code>python3-wheel</code> for installing some of the python dependencies.</p> </li> <li> <p>Install <code>redis</code> &gt;= 6.0 and configure it to start automatically.</p> </li> <li> <p>Optional. Install <code>postgresql</code> and configure a database, user and     password for paperless. If you do not wish to use PostgreSQL,     MariaDB and SQLite are available as well.</p> <p>Note</p> <p>On bare-metal installations using SQLite, ensure the JSON1 extension is enabled. This is usually the case, but not always.</p> </li> <li> <p>Create a system user with a new home folder under which you wish     to run paperless.</p> <pre><code>adduser paperless --system --home /opt/paperless --group\n</code></pre> </li> <li> <p>Get the release archive from     https://github.com/paperless-ngx/paperless-ngx/releases for example with</p> <pre><code>curl -O -L https://github.com/paperless-ngx/paperless-ngx/releases/download/v1.10.2/paperless-ngx-v1.10.2.tar.xz\n</code></pre> <p>Extract the archive with</p> <pre><code>tar -xf paperless-ngx-v1.10.2.tar.xz\n</code></pre> <p>and copy the contents to the home folder of the user you created before (<code>/opt/paperless</code>).</p> <p>Optional: If you cloned the git repo, you will have to compile the frontend yourself, see here and use the <code>build</code> step, not <code>serve</code>.</p> </li> <li> <p>Configure paperless. See configuration for details.     Edit the included <code>paperless.conf</code> and adjust the settings to your     needs. Required settings for getting     paperless running are:</p> <ul> <li><code>PAPERLESS_REDIS</code> should point to your redis server, such as   . <li><code>PAPERLESS_DBENGINE</code> optional, and should be one of <code>postgres</code>,   <code>mariadb</code>, or <code>sqlite</code></li> <li><code>PAPERLESS_DBHOST</code> should be the hostname on which your   PostgreSQL server is running. Do not configure this to use   SQLite instead. Also configure port, database name, user and   password as necessary.</li> <li><code>PAPERLESS_CONSUMPTION_DIR</code> should point to a folder which   paperless should watch for documents. You might want to have   this somewhere else. Likewise, <code>PAPERLESS_DATA_DIR</code> and   <code>PAPERLESS_MEDIA_ROOT</code> define where paperless stores its data.   If you like, you can point both to the same directory.</li> <li><code>PAPERLESS_SECRET_KEY</code> should be a random sequence of   characters. It's used for authentication. Failure to do so   allows third parties to forge authentication credentials.</li> <li><code>PAPERLESS_URL</code> if you are behind a reverse proxy. This should   point to your domain. Please see   configuration for more   information.</li> <p>Many more adjustments can be made to paperless, especially the OCR part. The following options are recommended for everyone:</p> <ul> <li>Set <code>PAPERLESS_OCR_LANGUAGE</code> to the language most of your   documents are written in.</li> <li>Set <code>PAPERLESS_TIME_ZONE</code> to your local time zone.</li> </ul> <li> <p>Create the following directories if they are missing:</p> <ul> <li><code>/opt/paperless/media</code></li> <li><code>/opt/paperless/data</code></li> <li><code>/opt/paperless/consume</code></li> </ul> <p>Adjust as necessary if you configured different folders. Ensure that the paperless user has write permissions for every one of these folders with</p> <pre><code>ls -l -d /opt/paperless/media\n</code></pre> <p>If needed, change the owner with</p> <pre><code>sudo chown paperless:paperless /opt/paperless/media\nsudo chown paperless:paperless /opt/paperless/data\nsudo chown paperless:paperless /opt/paperless/consume\n</code></pre> </li> <li> <p>Install python requirements from the <code>requirements.txt</code> file. It is     up to you if you wish to use a virtual environment or not. First you should update your pip, so it gets the actual packages.</p> <pre><code>sudo -Hu paperless pip3 install -r requirements.txt\n</code></pre> <p>This will install all python dependencies in the home directory of the new paperless user.</p> </li> <li> <p>Go to <code>/opt/paperless/src</code>, and execute the following commands:</p> <pre><code># This creates the database schema.\nsudo -Hu paperless python3 manage.py migrate\n\n# This creates your first paperless user\nsudo -Hu paperless python3 manage.py createsuperuser\n</code></pre> </li> <li> <p>Optional: Test that paperless is working by executing</p> <pre><code># Manually starts the webserver\nsudo -Hu paperless python3 manage.py runserver\n</code></pre> <p>and pointing your browser to http://localhost:8000 if accessing from the same devices on which paperless is installed. If accessing from another machine, set up systemd services. You may need to set <code>PAPERLESS_DEBUG=true</code> in order for the development server to work normally in your browser.</p> <p>Warning</p> <p>This is a development server which should not be used in production. It is not audited for security and performance is inferior to production ready web servers.</p> <p>Tip</p> <p>This will not start the consumer. Paperless does this in a separate process.</p> </li> <li> <p>Setup systemd services to run paperless automatically. You may use     the service definition files included in the <code>scripts</code> folder as a     starting point.</p> <p>Paperless needs the <code>webserver</code> script to run the webserver, the <code>consumer</code> script to watch the input folder, <code>taskqueue</code> for the background workers used to handle things like document consumption and the <code>scheduler</code> script to run tasks such as email checking at certain times .</p> <p>Note</p> <p>The <code>socket</code> script enables <code>gunicorn</code> to run on port 80 without root privileges. For this you need to uncomment the <code>Require=paperless-webserver.socket</code> in the <code>webserver</code> script and configure <code>gunicorn</code> to listen on port 80 (see <code>paperless/gunicorn.conf.py</code>).</p> <p>You may need to adjust the path to the <code>gunicorn</code> executable. This will be installed as part of the python dependencies, and is either located in the <code>bin</code> folder of your virtual environment, or in <code>~/.local/bin/</code> if no virtual environment is used.</p> <p>These services rely on redis and optionally the database server, but don't need to be started in any particular order. The example files depend on redis being started. If you use a database server, you should add additional dependencies.</p> <p>Warning</p> <p>The included scripts run a <code>gunicorn</code> standalone server, which is fine for running paperless. It does support SSL, however, the documentation of GUnicorn states that you should use a proxy server in front of gunicorn instead.</p> <p>For instructions on how to use nginx for that, see the instructions below.</p> <p>Warning</p> <p>If celery won't start (check with <code>sudo systemctl status paperless-task-queue.service</code> for paperless-task-queue.service and paperless-scheduler.service ) you need to change the path in the files. Example: <code>ExecStart=/opt/paperless/.local/bin/celery --app paperless worker --loglevel INFO</code></p> </li> <li> <p>Optional: Install a samba server and make the consumption folder     available as a network share.</p> </li> <li> <p>Configure ImageMagick to allow processing of PDF documents. Most     distributions have this disabled by default, since PDF documents can     contain malware. If you don't do this, paperless will fall back to     ghostscript for certain steps such as thumbnail generation.</p> <p>Edit <code>/etc/ImageMagick-6/policy.xml</code> and adjust</p> <pre><code>&lt;policy domain=\"coder\" rights=\"none\" pattern=\"PDF\" /&gt;\n</code></pre> <p>to</p> <pre><code>&lt;policy domain=\"coder\" rights=\"read|write\" pattern=\"PDF\" /&gt;\n</code></pre> </li> <li> <p>Optional: Install the     jbig2enc     encoder. This will reduce the size of generated PDF documents.     You'll most likely need to compile this by yourself, because this     software has been patented until around 2017 and binary packages are     not available for most distributions.</p> </li> <li> <p>Optional: If using the NLTK machine learning processing (see     <code>PAPERLESS_ENABLE_NLTK</code> in configuration for details),     download the NLTK data for the Snowball     Stemmer, Stopwords and Punkt tokenizer to your     <code>PAPERLESS_DATA_DIR/nltk</code>. Refer to the NLTK     instructions for details on how to     download the data.</p> </li>"},{"location":"setup/#migrating-to-paperless-ngx","title":"Migrating to Paperless-ngx","text":"<p>Migration is possible both from Paperless-ng or directly from the 'original' Paperless.</p>"},{"location":"setup/#migrating-from-paperless-ng","title":"Migrating from Paperless-ng","text":"<p>Paperless-ngx is meant to be a drop-in replacement for Paperless-ng and thus upgrading should be trivial for most users, especially when using docker. However, as with any major change, it is recommended to take a full backup first. Once you are ready, simply change the docker image to point to the new source. E.g. if using Docker Compose, edit <code>docker-compose.yml</code> and change:</p> <pre><code>image: jonaswinkler/paperless-ng:latest\n</code></pre> <p>to</p> <pre><code>image: ghcr.io/paperless-ngx/paperless-ngx:latest\n</code></pre> <p>and then run <code>docker-compose up -d</code> which will pull the new image recreate the container. That's it!</p> <p>Users who installed with the bare-metal route should also update their Git clone to point to <code>https://github.com/paperless-ngx/paperless-ngx</code>, e.g. using the command <code>git remote set-url origin https://github.com/paperless-ngx/paperless-ngx</code> and then pull the lastest version.</p>"},{"location":"setup/#migrating-from-paperless","title":"Migrating from Paperless","text":"<p>At its core, paperless-ngx is still paperless and fully compatible. However, some things have changed under the hood, so you need to adapt your setup depending on how you installed paperless.</p> <p>This setup describes how to update an existing paperless Docker installation. The important things to keep in mind are as follows:</p> <ul> <li>Read the changelog and   take note of breaking changes.</li> <li>You should decide if you want to stick with SQLite or want to   migrate your database to PostgreSQL. See documentation   for details on   how to move your data from SQLite to PostgreSQL. Both work fine with   paperless. However, if you already have a database server running   for other services, you might as well use it for paperless as well.</li> <li>The task scheduler of paperless, which is used to execute periodic   tasks such as email checking and maintenance, requires a   redis message broker instance. The   docker-compose route takes care of that.</li> <li>The layout of the folder structure for your documents and data   remains the same, so you can just plug your old docker volumes into   paperless-ngx and expect it to find everything where it should be.</li> </ul> <p>Migration to paperless-ngx is then performed in a few simple steps:</p> <ol> <li> <p>Stop paperless.</p> <pre><code>$ cd /path/to/current/paperless\n$ docker-compose down\n</code></pre> </li> <li> <p>Do a backup for two purposes: If something goes wrong, you still     have your data. Second, if you don't like paperless-ngx, you can     switch back to paperless.</p> </li> <li> <p>Download the latest release of paperless-ngx. You can either go with     the docker-compose files from     here     or clone the repository to build the image yourself (see     above). You can     either replace your current paperless folder or put paperless-ngx in     a different location.</p> <p>Warning</p> <p>Paperless-ngx includes a <code>.env</code> file. This will set the project name for docker compose to <code>paperless</code>, which will also define the name of the volumes by paperless-ngx. However, if you experience that paperless-ngx is not using your old paperless volumes, verify the names of your volumes with</p> <pre><code>$ docker volume ls | grep _data\n</code></pre> <p>and adjust the project name in the <code>.env</code> file so that it matches the name of the volumes before the <code>_data</code> part.</p> </li> <li> <p>Download the <code>docker-compose.sqlite.yml</code> file to     <code>docker-compose.yml</code>. If you want to switch to PostgreSQL, do that     after you migrated your existing SQLite database.</p> </li> <li> <p>Adjust <code>docker-compose.yml</code> and <code>docker-compose.env</code> to your needs.     See Docker setup details on     which edits are advised.</p> </li> <li> <p>Update paperless.</p> </li> <li> <p>In order to find your existing documents with the new search     feature, you need to invoke a one-time operation that will create     the search index:</p> <pre><code>$ docker-compose run --rm webserver document_index reindex\n</code></pre> <p>This will migrate your database and create the search index. After that, paperless will take care of maintaining the index by itself.</p> </li> <li> <p>Start paperless-ngx.</p> <pre><code>$ docker-compose up -d\n</code></pre> <p>This will run paperless in the background and automatically start it on system boot.</p> </li> <li> <p>Paperless installed a permanent redirect to <code>admin/</code> in your     browser. This redirect is still in place and prevents access to the     new UI. Clear your browsing cache in order to fix this.</p> </li> <li> <p>Optionally, follow the instructions below to migrate your existing     data to PostgreSQL.</p> </li> </ol>"},{"location":"setup/#migrating-from-linuxserverio-docker-image","title":"Migrating from LinuxServer.io Docker Image","text":"<p>As with any upgrades and large changes, it is highly recommended to create a backup before starting. This assumes the image was running using Docker Compose, but the instructions are translatable to Docker commands as well.</p> <ol> <li>Stop and remove the paperless container</li> <li>If using an external database, stop the container</li> <li>Update Redis configuration     a) If <code>REDIS_URL</code> is already set, change it to <code>PAPERLESS_REDIS</code>     and continue to step 4.     b) Otherwise, in the <code>docker-compose.yml</code> add a new service for     Redis, following the example compose     files     c) Set the environment variable <code>PAPERLESS_REDIS</code> so it points to     the new Redis container</li> <li>Update user mapping     a) If set, change the environment variable <code>PUID</code> to <code>USERMAP_UID</code>     b) If set, change the environment variable <code>PGID</code> to <code>USERMAP_GID</code></li> <li>Update configuration paths     a) Set the environment variable <code>PAPERLESS_DATA_DIR</code> to <code>/config</code></li> <li>Update media paths     a) Set the environment variable <code>PAPERLESS_MEDIA_ROOT</code> to     <code>/data/media</code></li> <li>Update timezone     a) Set the environment variable <code>PAPERLESS_TIME_ZONE</code> to the same     value as <code>TZ</code></li> <li>Modify the <code>image:</code> to point to     <code>ghcr.io/paperless-ngx/paperless-ngx:latest</code> or a specific version     if preferred.</li> <li>Start the containers as before, using <code>docker-compose</code>.</li> </ol>"},{"location":"setup/#sqlite_to_psql","title":"Moving data from SQLite to PostgreSQL or MySQL/MariaDB","text":"<p>Moving your data from SQLite to PostgreSQL or MySQL/MariaDB is done via executing a series of django management commands as below. The commands below use PostgreSQL, but are applicable to MySQL/MariaDB with the</p> <p>Warning</p> <p>Make sure that your SQLite database is migrated to the latest version. Starting paperless will make sure that this is the case. If your try to load data from an old database schema in SQLite into a newer database schema in PostgreSQL, you will run into trouble.</p> <p>Warning</p> <p>On some database fields, PostgreSQL enforces predefined limits on maximum length, whereas SQLite does not. The fields in question are the title of documents (128 characters), names of document types, tags and correspondents (128 characters), and filenames (1024 characters). If you have data in these fields that surpasses these limits, migration to PostgreSQL is not possible and will fail with an error.</p> <p>Warning</p> <p>MySQL is case insensitive by default, treating values like \"Name\" and \"NAME\" as identical. See MySQL caveats for details.</p> <p>Warning</p> <p>MySQL also enforces limits on maximum lengths, but does so differently than PostgreSQL.  It may not be possible to migrate to MySQL due to this.</p> <p>Warning</p> <p>Using mariadb version 10.4+ is recommended. Using the <code>utf8mb3</code> character set on an older system may fix issues that can arise while setting up Paperless-ngx but <code>utf8mb3</code> can cause issues with consumption (where <code>utf8mb4</code> does not).</p> <ol> <li> <p>Stop paperless, if it is running.</p> </li> <li> <p>Tell paperless to use PostgreSQL:</p> <p>a) With docker, copy the provided <code>docker-compose.postgres.yml</code> file to <code>docker-compose.yml</code>. Remember to adjust the consumption directory, if necessary. b) Without docker, configure the database in your <code>paperless.conf</code> file. See configuration for details.</p> </li> <li> <p>Open a shell and initialize the database:</p> <p>a) With docker, run the following command to open a shell within the paperless container:</p> <pre><code>``` shell-session\n$ cd /path/to/paperless\n$ docker-compose run --rm webserver /bin/bash\n```\n\nThis will launch the container and initialize the PostgreSQL\ndatabase.\n</code></pre> <p>b) Without docker, remember to activate any virtual environment, switch to the <code>src</code> directory and create the database schema:</p> <pre><code>``` shell-session\n$ cd /path/to/paperless/src\n$ python3 manage.py migrate\n```\n\nThis will not copy any data yet.\n</code></pre> </li> <li> <p>Dump your data from SQLite:</p> <pre><code>$ python3 manage.py dumpdata --database=sqlite --exclude=contenttypes --exclude=auth.Permission &gt; data.json\n</code></pre> </li> <li> <p>Load your data into PostgreSQL:</p> <pre><code>$ python3 manage.py loaddata data.json\n</code></pre> </li> <li> <p>If operating inside Docker, you may exit the shell now.</p> <pre><code>$ exit\n</code></pre> </li> <li> <p>Start paperless.</p> </li> </ol>"},{"location":"setup/#moving-back-to-paperless","title":"Moving back to Paperless","text":"<p>Lets say you migrated to Paperless-ngx and used it for a while, but decided that you don't like it and want to move back (If you do, send me a mail about what part you didn't like!), you can totally do that with a few simple steps.</p> <p>Paperless-ngx modified the database schema slightly, however, these changes can be reverted while keeping your current data, so that your current data will be compatible with original Paperless. Thumbnails were also changed from PNG to WEBP format and will need to be re-generated.</p> <p>Execute this:</p> <pre><code>$ cd /path/to/paperless\n$ docker-compose run --rm webserver migrate documents 0023\n</code></pre> <p>Or without docker:</p> <pre><code>$ cd /path/to/paperless/src\n$ python3 manage.py migrate documents 0023\n</code></pre> <p>After regenerating thumbnails, you'll need to clear your cookies (Paperless-ngx comes with updated dependencies that do cookie-processing differently) and probably your cache as well.</p>"},{"location":"setup/#less-powerful-devices","title":"Considerations for less powerful devices","text":"<p>Paperless runs on Raspberry Pi. However, some things are rather slow on the Pi and configuring some options in paperless can help improve performance immensely:</p> <ul> <li>Stick with SQLite to save some resources.</li> <li>Consider setting <code>PAPERLESS_OCR_PAGES</code> to 1, so that paperless will   only OCR the first page of your documents. In most cases, this page   contains enough information to be able to find it.</li> <li><code>PAPERLESS_TASK_WORKERS</code> and <code>PAPERLESS_THREADS_PER_WORKER</code> are   configured to use all cores. The Raspberry Pi models 3 and up have 4   cores, meaning that paperless will use 2 workers and 2 threads per   worker. This may result in sluggish response times during   consumption, so you might want to lower these settings (example: 2   workers and 1 thread to always have some computing power left for   other tasks).</li> <li>Keep <code>PAPERLESS_OCR_MODE</code> at its default value <code>skip</code> and consider   OCR'ing your documents before feeding them into paperless. Some   scanners are able to do this! You might want to even specify   <code>skip_noarchive</code> to skip archive file generation for already ocr'ed   documents entirely.</li> <li>If you want to perform OCR on the device, consider using   <code>PAPERLESS_OCR_CLEAN=none</code>. This will speed up OCR times and use   less memory at the expense of slightly worse OCR results.</li> <li>If using docker, consider setting <code>PAPERLESS_WEBSERVER_WORKERS</code> to</li> <li>This will save some memory.</li> <li>Consider setting <code>PAPERLESS_ENABLE_NLTK</code> to false, to disable the   more advanced language processing, which can take more memory and   processing time.</li> </ul> <p>For details, refer to configuration.</p> <p>Note</p> <p>Updating the automatic matching algorithm takes quite a bit of time. However, the update mechanism checks if your data has changed before doing the heavy lifting. If you experience the algorithm taking too much cpu time, consider changing the schedule in the admin interface to daily. You can also manually invoke the task by changing the date and time of the next run to today/now.</p> <p>The actual matching of the algorithm is fast and works on Raspberry Pi as well as on any other device.</p>"},{"location":"setup/#nginx","title":"Using nginx as a reverse proxy","text":"<p>If you want to expose paperless to the internet, you should hide it behind a reverse proxy with SSL enabled.</p> <p>In addition to the usual configuration for SSL, the following configuration is required for paperless to operate:</p> <pre><code>http {\n# Adjust as required. This is the maximum size for file uploads.\n# The default value 1M might be a little too small.\nclient_max_body_size 10M;\nserver {\nlocation / {\n# Adjust host and port as required.\nproxy_pass http://localhost:8000/;\n# These configuration options are required for WebSockets to work.\nproxy_http_version 1.1;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Host $server_name;\nadd_header P3P 'CP=\"\"'; # may not be required in all setups\n}\n}\n}\n</code></pre> <p>The <code>PAPERLESS_URL</code> configuration variable is also required when using a reverse proxy. Please refer to the hosting and security docs.</p> <p>Also read this, towards the end of the section.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#no-files-are-added-by-the-consumer","title":"No files are added by the consumer","text":"<p>Check for the following issues:</p> <ul> <li> <p>Ensure that the directory you're putting your documents in is the   folder paperless is watching. With docker, this setting is performed   in the <code>docker-compose.yml</code> file. Without docker, look at the   <code>CONSUMPTION_DIR</code> setting. Don't adjust this setting if you're   using docker.</p> </li> <li> <p>Ensure that redis is up and running. Paperless does its task   processing asynchronously, and for documents to arrive at the task   processor, it needs redis to run.</p> </li> <li> <p>Ensure that the task processor is running. Docker does this   automatically. Manually invoke the task processor by executing</p> </li> </ul> <pre><code>$ celery --app paperless worker\n</code></pre> <ul> <li> <p>Look at the output of paperless and inspect it for any errors.</p> </li> <li> <p>Go to the admin interface, and check if there are failed tasks. If   so, the tasks will contain an error message.</p> </li> </ul>"},{"location":"troubleshooting/#consumer-warns-ocr-for-xx-failed","title":"Consumer warns <code>OCR for XX failed</code>","text":"<p>If you find the OCR accuracy to be too low, and/or the document consumer warns that <code>OCR for XX failed, but we're going to stick with what we've got since FORGIVING_OCR is enabled</code>, then you might need to install the Tesseract language files marching your document's languages.</p> <p>As an example, if you are running Paperless-ngx from any Ubuntu or Debian box, and your documents are written in Spanish you may need to run:</p> <pre><code>apt-get install -y tesseract-ocr-spa\n</code></pre>"},{"location":"troubleshooting/#consumer-fails-to-pickup-any-new-files","title":"Consumer fails to pickup any new files","text":"<p>If you notice that the consumer will only pickup files in the consumption directory at startup, but won't find any other files added later, you will need to enable filesystem polling with the configuration option <code>PAPERLESS_CONSUMER_POLLING</code>, see `here.</p> <p>This will disable listening to filesystem changes with inotify and paperless will manually check the consumption directory for changes instead.</p>"},{"location":"troubleshooting/#paperless-always-redirects-to-admin","title":"Paperless always redirects to /admin","text":"<p>You probably had the old paperless installed at some point. Paperless installed a permanent redirect to /admin in your browser, and you need to clear your browsing data / cache to fix that.</p>"},{"location":"troubleshooting/#operation-not-permitted","title":"Operation not permitted","text":"<p>You might see errors such as:</p> <pre><code>chown: changing ownership of '../export': Operation not permitted\n</code></pre> <p>The container tries to set file ownership on the listed directories. This is required so that the user running paperless inside docker has write permissions to these folders. This happens when pointing these directories to NFS shares, for example.</p> <p>Ensure that <code>chown</code> is possible on these directories.</p>"},{"location":"troubleshooting/#classifier-error-no-training-data-available","title":"Classifier error: No training data available","text":"<p>This indicates that the Auto matching algorithm found no documents to learn from. This may have two reasons:</p> <ul> <li>You don't use the Auto matching algorithm: The error can be safely   ignored in this case.</li> <li>You are using the Auto matching algorithm: The classifier explicitly   excludes documents with Inbox tags. Verify that there are documents   in your archive without inbox tags. The algorithm will only learn   from documents not in your inbox.</li> </ul>"},{"location":"troubleshooting/#userwarning-in-sklearn-on-every-single-document","title":"UserWarning in sklearn on every single document","text":"<p>You may encounter warnings like this:</p> <pre><code>/usr/local/lib/python3.7/site-packages/sklearn/base.py:315:\nUserWarning: Trying to unpickle estimator CountVectorizer from version 0.23.2 when using version 0.24.0.\nThis might lead to breaking code or invalid results. Use at your own risk.\n</code></pre> <p>This happens when certain dependencies of paperless that are responsible for the auto matching algorithm are updated. After updating these, your current training data might not be compatible anymore. This can be ignored in most cases. This warning will disappear automatically when paperless updates the training data.</p> <p>If you want to get rid of the warning or actually experience issues with automatic matching, delete the file <code>classification_model.pickle</code> in the data directory and let paperless recreate it.</p>"},{"location":"troubleshooting/#504-server-error-gateway-timeout-when-adding-office-documents","title":"504 Server Error: Gateway Timeout when adding Office documents","text":"<p>You may experience these errors when using the optional TIKA integration:</p> <pre><code>requests.exceptions.HTTPError: 504 Server Error: Gateway Timeout for url: http://gotenberg:3000/forms/libreoffice/convert\n</code></pre> <p>Gotenberg is a server that converts Office documents into PDF documents and has a default timeout of 30 seconds. When conversion takes longer, Gotenberg raises this error.</p> <p>You can increase the timeout by configuring a command flag for Gotenberg (see also here). If using docker-compose, this is achieved by the following configuration change in the <code>docker-compose.yml</code> file:</p> <pre><code># The gotenberg chromium route is used to convert .eml files. We do not\n# want to allow external content like tracking pixels or even javascript.\ncommand:\n- 'gotenberg'\n- '--chromium-disable-javascript=true'\n- '--chromium-allow-list=file:///tmp/.*'\n- '--api-timeout=60'\n</code></pre>"},{"location":"troubleshooting/#permission-denied-errors-in-the-consumption-directory","title":"Permission denied errors in the consumption directory","text":"<p>You might encounter errors such as:</p> <pre><code>The following error occured while consuming document.pdf: [Errno 13] Permission denied: '/usr/src/paperless/src/../consume/document.pdf'\n</code></pre> <p>This happens when paperless does not have permission to delete files inside the consumption directory. Ensure that <code>USERMAP_UID</code> and <code>USERMAP_GID</code> are set to the user id and group id you use on the host operating system, if these are different from <code>1000</code>. See Docker setup.</p> <p>Also ensure that you are able to read and write to the consumption directory on the host.</p>"},{"location":"troubleshooting/#oserror-errno-19-no-such-device-when-consuming-files","title":"OSError: [Errno 19] No such device when consuming files","text":"<p>If you experience errors such as:</p> <pre><code>File \"/usr/local/lib/python3.7/site-packages/whoosh/codec/base.py\", line 570, in open_compound_file\nreturn CompoundStorage(dbfile, use_mmap=storage.supports_mmap)\nFile \"/usr/local/lib/python3.7/site-packages/whoosh/filedb/compound.py\", line 75, in __init__\nself._source = mmap.mmap(fileno, 0, access=mmap.ACCESS_READ)\nOSError: [Errno 19] No such device\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\nFile \"/usr/local/lib/python3.7/site-packages/django_q/cluster.py\", line 436, in worker\nres = f(*task[\"args\"], **task[\"kwargs\"])\nFile \"/usr/src/paperless/src/documents/tasks.py\", line 73, in consume_file\noverride_tag_ids=override_tag_ids)\nFile \"/usr/src/paperless/src/documents/consumer.py\", line 271, in try_consume_file\nraise ConsumerError(e)\n</code></pre> <p>Paperless uses a search index to provide better and faster full text searching. This search index is stored inside the <code>data</code> folder. The search index uses memory-mapped files (mmap). The above error indicates that paperless was unable to create and open these files.</p> <p>This happens when you're trying to store the data directory on certain file systems (mostly network shares) that don't support memory-mapped files.</p>"},{"location":"troubleshooting/#web-ui-stuck-at-loading","title":"Web-UI stuck at \"Loading...\"","text":"<p>This might have multiple reasons.</p> <ol> <li> <p>If you built the docker image yourself or deployed using the bare     metal route, make sure that there are files in     <code>&lt;paperless-root&gt;/static/frontend/&lt;lang-code&gt;/</code>. If there are no     files, make sure that you executed <code>collectstatic</code> successfully,     either manually or as part of the docker image build.</p> <p>If the front end is still missing, make sure that the front end is compiled (files present in <code>src/documents/static/frontend</code>). If it is not, you need to compile the front end yourself or download the release archive instead of cloning the repository.</p> </li> <li> <p>Check the output of the web server. You might see errors like this:</p> <pre><code>[2021-01-25 10:08:04 +0000] [40] [ERROR] Socket error processing request.\nTraceback (most recent call last):\nFile \"/usr/local/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 134, in handle\n    self.handle_request(listener, req, client, addr)\nFile \"/usr/local/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 190, in handle_request\n    util.reraise(*sys.exc_info())\nFile \"/usr/local/lib/python3.7/site-packages/gunicorn/util.py\", line 625, in reraise\n    raise value\nFile \"/usr/local/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 178, in handle_request\n    resp.write_file(respiter)\nFile \"/usr/local/lib/python3.7/site-packages/gunicorn/http/wsgi.py\", line 396, in write_file\n    if not self.sendfile(respiter):\nFile \"/usr/local/lib/python3.7/site-packages/gunicorn/http/wsgi.py\", line 386, in sendfile\n    sent += os.sendfile(sockno, fileno, offset + sent, count)\nOSError: [Errno 22] Invalid argument\n</code></pre> <p>To fix this issue, add</p> <pre><code>SENDFILE=0\n</code></pre> <p>to your <code>docker-compose.env</code> file.</p> </li> </ol>"},{"location":"troubleshooting/#error-while-reading-metadata","title":"Error while reading metadata","text":"<p>You might find messages like these in your log files:</p> <pre><code>[WARNING] [paperless.parsing.tesseract] Error while reading metadata\n</code></pre> <p>This indicates that paperless failed to read PDF metadata from one of your documents. This happens when you open the affected documents in paperless for editing. Paperless will continue to work, and will simply not show the invalid metadata.</p>"},{"location":"troubleshooting/#consumer-fails-with-a-filenotfounderror","title":"Consumer fails with a FileNotFoundError","text":"<p>You might find messages like these in your log files:</p> <pre><code>[ERROR] [paperless.consumer] Error while consuming document SCN_0001.pdf: FileNotFoundError: [Errno 2] No such file or directory: '/tmp/ocrmypdf.io.yhk3zbv0/origin.pdf'\nTraceback (most recent call last):\n  File \"/app/paperless/src/paperless_tesseract/parsers.py\", line 261, in parse\n    ocrmypdf.ocr(**args)\n  File \"/usr/local/lib/python3.8/dist-packages/ocrmypdf/api.py\", line 337, in ocr\n    return run_pipeline(options=options, plugin_manager=plugin_manager, api=True)\n  File \"/usr/local/lib/python3.8/dist-packages/ocrmypdf/_sync.py\", line 385, in run_pipeline\n    exec_concurrent(context, executor)\n  File \"/usr/local/lib/python3.8/dist-packages/ocrmypdf/_sync.py\", line 302, in exec_concurrent\n    pdf = post_process(pdf, context, executor)\n  File \"/usr/local/lib/python3.8/dist-packages/ocrmypdf/_sync.py\", line 235, in post_process\n    pdf_out = metadata_fixup(pdf_out, context)\n  File \"/usr/local/lib/python3.8/dist-packages/ocrmypdf/_pipeline.py\", line 798, in metadata_fixup\n    with pikepdf.open(context.origin) as original, pikepdf.open(working_file) as pdf:\n  File \"/usr/local/lib/python3.8/dist-packages/pikepdf/_methods.py\", line 923, in open\n    pdf = Pdf._open(\nFileNotFoundError: [Errno 2] No such file or directory: '/tmp/ocrmypdf.io.yhk3zbv0/origin.pdf'\n</code></pre> <p>This probably indicates paperless tried to consume the same file twice. This can happen for a number of reasons, depending on how documents are placed into the consume folder. If paperless is using inotify (the default) to check for documents, try adjusting the inotify configuration. If polling is enabled, try adjusting the polling configuration.</p>"},{"location":"troubleshooting/#consumer-fails-waiting-for-file-to-remain-unmodified","title":"Consumer fails waiting for file to remain unmodified.","text":"<p>You might find messages like these in your log files:</p> <pre><code>[ERROR] [paperless.management.consumer] Timeout while waiting on file /usr/src/paperless/src/../consume/SCN_0001.pdf to remain unmodified.\n</code></pre> <p>This indicates paperless timed out while waiting for the file to be completely written to the consume folder. Adjusting polling configuration values should resolve the issue.</p> <p>Note</p> <p>The user will need to manually move the file out of the consume folder and back in, for the initial failing file to be consumed.</p>"},{"location":"troubleshooting/#consumer-fails-reporting-os-reports-file-as-busy-still","title":"Consumer fails reporting \"OS reports file as busy still\".","text":"<p>You might find messages like these in your log files:</p> <pre><code>[WARNING] [paperless.management.consumer] Not consuming file /usr/src/paperless/src/../consume/SCN_0001.pdf: OS reports file as busy still\n</code></pre> <p>This indicates paperless was unable to open the file, as the OS reported the file as still being in use. To prevent a crash, paperless did not try to consume the file. If paperless is using inotify (the default) to check for documents, try adjusting the inotify configuration. If polling is enabled, try adjusting the polling configuration.</p> <p>Note</p> <p>The user will need to manually move the file out of the consume folder and back in, for the initial failing file to be consumed.</p>"},{"location":"troubleshooting/#log-reports-creating-paperlesstask-failed","title":"Log reports \"Creating PaperlessTask failed\".","text":"<p>You might find messages like these in your log files:</p> <pre><code>[ERROR] [paperless.management.consumer] Creating PaperlessTask failed: db locked\n</code></pre> <p>You are likely using an sqlite based installation, with an increased number of workers and are running into sqlite's concurrency limitations. Uploading or consuming multiple files at once results in many workers attempting to access the database simultaneously.</p> <p>Consider changing to the PostgreSQL database if you will be processing many documents at once often. Otherwise, try tweaking the <code>PAPERLESS_DB_TIMEOUT</code> setting to allow more time for the database to unlock. This may have minor performance implications.</p>"},{"location":"troubleshooting/#gunicorn-fails-to-start-with-is-not-a-valid-port-number","title":"gunicorn fails to start with \"is not a valid port number\"","text":"<p>You are likely running using Kubernetes, which automatically creates an environment variable named <code>${serviceName}_PORT</code>. This is the same environment variable which is used by Paperless to optionally change the port gunicorn listens on.</p> <p>To fix this, set <code>PAPERLESS_PORT</code> again to your desired port, or the default of 8000.</p>"},{"location":"usage/","title":"Usage Overview","text":"<p>Paperless is an application that manages your personal documents. With the help of a document scanner (see the scanners wiki), paperless transforms your unwieldy physical document binders into a searchable archive and provides many utilities for finding and managing your documents.</p>"},{"location":"usage/#terms-and-definitions","title":"Terms and definitions","text":"<p>Paperless essentially consists of two different parts for managing your documents:</p> <ul> <li>The consumer watches a specified folder and adds all documents in   that folder to paperless.</li> <li>The web server provides a UI that you use to manage and search for   your scanned documents.</li> </ul> <p>Each document has a couple of fields that you can assign to them:</p> <ul> <li>A Document is a piece of paper that sometimes contains valuable   information.</li> <li>The correspondent of a document is the person, institution or   company that a document either originates from, or is sent to.</li> <li>A tag is a label that you can assign to documents. Think of labels   as more powerful folders: Multiple documents can be grouped together   with a single tag, however, a single document can also have multiple   tags. This is not possible with folders. The reason folders are not   implemented in paperless is simply that tags are much more versatile   than folders.</li> <li>A document type is used to demarcate the type of a document such   as letter, bank statement, invoice, contract, etc. It is used to   identify what a document is about.</li> <li>The date added of a document is the date the document was scanned   into paperless. You cannot and should not change this date.</li> <li>The date created of a document is the date the document was   initially issued. This can be the date you bought a product, the   date you signed a contract, or the date a letter was sent to you.</li> <li>The archive serial number (short: ASN) of a document is the   identifier of the document in your physical document binders. See   recommended workflow below.</li> <li>The content of a document is the text that was OCR'ed from the   document. This text is fed into the search engine and is used for   matching tags, correspondents and document types.</li> </ul>"},{"location":"usage/#adding-documents-to-paperless","title":"Adding documents to paperless","text":"<p>Once you've got Paperless setup, you need to start feeding documents into it. When adding documents to paperless, it will perform the following operations on your documents:</p> <ol> <li>OCR the document, if it has no text. Digital documents usually have     text, and this step will be skipped for those documents.</li> <li>Paperless will create an archivable PDF/A document from your     document. If this document is coming from your scanner, it will have     embedded selectable text.</li> <li>Paperless performs automatic matching of tags, correspondents and     types on the document before storing it in the database.</li> </ol> <p>Tip</p> <p>This process can be configured to fit your needs. If you don't want paperless to create archived versions for digital documents, you can configure that by configuring <code>PAPERLESS_OCR_MODE=skip_noarchive</code>. Please read the relevant section in the documentation.</p> <p>Note</p> <p>No matter which options you choose, Paperless will always store the original document that it found in the consumption directory or in the mail and will never overwrite that document. Archived versions are stored alongside the original versions.</p>"},{"location":"usage/#the-consumption-directory","title":"The consumption directory","text":"<p>The primary method of getting documents into your database is by putting them in the consumption directory. The consumer waits patiently, looking for new additions to this directory. When it finds them, the consumer goes about the process of parsing them with the OCR, indexing what it finds, and storing it in the media directory.</p> <p>Getting stuff into this directory is up to you. If you're running Paperless on your local computer, you might just want to drag and drop files there, but if you're running this on a server and want your scanner to automatically push files to this directory, you'll need to setup some sort of service to accept the files from the scanner. Typically, you're looking at an FTP server like Proftpd or a Windows folder share with Samba.</p>"},{"location":"usage/#web-ui-upload","title":"Web UI Upload","text":"<p>The dashboard has a file drop field to upload documents to paperless. Simply drag a file onto this field or select a file with the file dialog. Multiple files are supported.</p> <p>You can also upload documents on any other page of the web UI by dragging-and-dropping files into your browser window.</p>"},{"location":"usage/#usage-mobile_upload","title":"Mobile upload","text":"<p>The mobile app over at https://github.com/qcasey/paperless_share allows Android users to share any documents with paperless. This can be combined with any of the mobile scanning apps out there, such as Office Lens.</p> <p>Furthermore, there is the Paperless App as well, which not only has document upload, but also document browsing and download features.</p> <p>Another option is Paperless Mobile, an Android app that supports document upload, scanning, management of labels and more.</p>"},{"location":"usage/#usage-email","title":"IMAP (Email)","text":"<p>You can tell paperless-ngx to consume documents from your email accounts. This is a very flexible and powerful feature, if you regularly received documents via mail that you need to archive. The mail consumer can be configured via the frontend settings (/settings/mail) in the following manner:</p> <ol> <li>Define e-mail accounts.</li> <li>Define mail rules for your account.</li> </ol> <p>These rules perform the following:</p> <ol> <li>Connect to the mail server.</li> <li>Fetch all matching mails (as defined by folder, maximum age and the     filters)</li> <li>Check if there are any consumable attachments.</li> <li>If so, instruct paperless to consume the attachments and optionally     use the metadata provided in the rule for the new document.</li> <li>If documents were consumed from a mail, the rule action is performed     on that mail.</li> </ol> <p>Paperless will completely ignore mails that do not match your filters. It will also only perform the action on mails that it has consumed documents from.</p> <p>The actions all ensure that the same mail is not consumed twice by different means. These are as follows:</p> <ul> <li>Delete: Immediately deletes mail that paperless has consumed   documents from. Use with caution.</li> <li>Mark as read: Mark consumed mail as read. Paperless will not   consume documents from already read mails. If you read a mail before   paperless sees it, it will be ignored.</li> <li>Flag: Sets the 'important' flag on mails with consumed   documents. Paperless will not consume flagged mails.</li> <li>Move to folder: Moves consumed mails out of the way so that   paperless wont consume them again.</li> <li> <p>Add custom Tag: Adds a custom tag to mails with consumed   documents (the IMAP standard calls these \"keywords\"). Paperless   will not consume mails already tagged. Not all mail servers support   this feature!</p> </li> <li> <p>Apple Mail support: Apple Mail clients allow differently colored tags. For this to work use <code>apple:&lt;color&gt;</code> (e.g. apple:green) as a custom tag. Available colors are red, orange, yellow, blue, green, violet and grey.</p> </li> </ul> <p>Warning</p> <p>The mail consumer will perform these actions on all mails it has consumed documents from. Keep in mind that the actual consumption process may fail for some reason, leaving you with missing documents in paperless.</p> <p>Note</p> <p>With the correct set of rules, you can completely automate your email documents. Create rules for every correspondent you receive digital documents from and paperless will read them automatically. The default action \"mark as read\" is pretty tame and will not cause any damage or data loss whatsoever.</p> <p>You can also setup a special folder in your mail account for paperless and use your favorite mail client to move to be consumed mails into that folder automatically or manually and tell paperless to move them to yet another folder after consumption. It's up to you.</p> <p>Note</p> <p>When defining a mail rule with a folder, you may need to try different characters to define how the sub-folders are separated. Common values include \".\", \"/\" or \"|\", but this varies by the mail server. Check the documentation for your mail server. In the event of an error fetching mail from a certain folder, check the Paperless logs. When a folder is not located, Paperless will attempt to list all folders found in the account to the Paperless logs.</p> <p>Note</p> <p>Paperless will process the rules in the order defined in the admin page.</p> <p>You can define catch-all rules and have them executed last to consume any documents not matched by previous rules. Such a rule may assign an \"Unknown mail document\" tag to consumed documents so you can inspect them further.</p> <p>Paperless is set up to check your mails every 10 minutes. This can be configured via <code>PAPERLESS_EMAIL_TASK_CRON</code> (see software tweaks)</p>"},{"location":"usage/#rest-api","title":"REST API","text":"<p>You can also submit a document using the REST API, see POSTing documents for details.</p>"},{"location":"usage/#basic-searching","title":"Best practices","text":"<p>Paperless offers a couple tools that help you organize your document collection. However, it is up to you to use them in a way that helps you organize documents and find specific documents when you need them. This section offers a couple ideas for managing your collection.</p> <p>Document types allow you to classify documents according to what they are. You can define types such as \"Receipt\", \"Invoice\", or \"Contract\". If you used to collect all your receipts in a single binder, you can recreate that system in paperless by defining a document type, assigning documents to that type and then filtering by that type to only see all receipts.</p> <p>Not all documents need document types. Sometimes its hard to determine what the type of a document is or it is hard to justify creating a document type that you only need once or twice. This is okay. As long as the types you define help you organize your collection in the way you want, paperless is doing its job.</p> <p>Tags can be used in many different ways. Think of tags are more versatile folders or binders. If you have a binder for documents related to university / your car or health care, you can create these binders in paperless by creating tags and assigning them to relevant documents. Just as with documents, you can filter the document list by tags and only see documents of a certain topic.</p> <p>With physical documents, you'll often need to decide which folder the document belongs to. The advantage of tags over folders and binders is that a single document can have multiple tags. A physical document cannot magically appear in two different folders, but with tags, this is entirely possible.</p> <p>Tip</p> <p>This can be used in many different ways. One example: Imagine you're working on a particular task, such as signing up for university. Usually you'll need to collect a bunch of different documents that are already sorted into various folders. With the tag system of paperless, you can create a new group of documents that are relevant to this task without destroying the already existing organization. When you're done with the task, you could delete the tag again, which would be equal to sorting documents back into the folder they belong into. Or keep the tag, up to you.</p> <p>All of the logic above applies to correspondents as well. Attach them to documents if you feel that they help you organize your collection.</p> <p>When you've started organizing your documents, create a couple saved views for document collections you regularly access. This is equal to having labeled physical binders on your desk, except that these saved views are dynamic and simply update themselves as you add documents to the system.</p> <p>Here are a couple examples of tags and types that you could use in your collection.</p> <ul> <li>An <code>inbox</code> tag for newly added documents that you haven't manually   edited yet.</li> <li>A tag <code>car</code> for everything car related (repairs, registration,   insurance, etc)</li> <li>A tag <code>todo</code> for documents that you still need to do something with,   such as reply, or perform some task online.</li> <li>A tag <code>bank account x</code> for all bank statement related to that   account.</li> <li>A tag <code>mail</code> for anything that you added to paperless via its mail   processing capabilities.</li> <li>A tag <code>missing_metadata</code> when you still need to add some metadata to   a document, but can't or don't want to do this right now.</li> </ul>"},{"location":"usage/#basic-usage_searching","title":"Searching","text":"<p>Paperless offers an extensive searching mechanism that is designed to allow you to quickly find a document you're looking for (for example, that thing that just broke and you bought a couple months ago, that contract you signed 8 years ago).</p> <p>When you search paperless for a document, it tries to match this query against your documents. Paperless will look for matching documents by inspecting their content, title, correspondent, type and tags. Paperless returns a scored list of results, so that documents matching your query better will appear further up in the search results.</p> <p>By default, paperless returns only documents which contain all words typed in the search bar. However, paperless also offers advanced search syntax if you want to drill down the results further.</p> <p>Matching documents with logical expressions:</p> <pre><code>shopname AND (product1 OR product2)\n</code></pre> <p>Matching specific tags, correspondents or types:</p> <pre><code>type:invoice tag:unpaid\ncorrespondent:university certificate\n</code></pre> <p>Matching dates:</p> <pre><code>created:[2005 to 2009]\nadded:yesterday\nmodified:today\n</code></pre> <p>Matching inexact words:</p> <pre><code>produ*name\n</code></pre> <p>Note</p> <p>Inexact terms are hard for search indexes. These queries might take a while to execute. That's why paperless offers auto complete and query correction.</p> <p>All of these constructs can be combined as you see fit. If you want to learn more about the query language used by paperless, paperless uses Whoosh's default query language. Head over to Whoosh query language. For details on what date parsing utilities are available, see Date parsing.</p>"},{"location":"usage/#usage-recommended-workflow","title":"The recommended workflow","text":"<p>Once you have familiarized yourself with paperless and are ready to use it for all your documents, the recommended workflow for managing your documents is as follows. This workflow also takes into account that some documents have to be kept in physical form, but still ensures that you get all the advantages for these documents as well.</p> <p>The following diagram shows how easy it is to manage your documents.</p> <p></p>"},{"location":"usage/#preparations-in-paperless","title":"Preparations in paperless","text":"<ul> <li>Create an inbox tag that gets assigned to all new documents.</li> <li>Create a TODO tag.</li> </ul>"},{"location":"usage/#processing-of-the-physical-documents","title":"Processing of the physical documents","text":"<p>Keep a physical inbox. Whenever you receive a document that you need to archive, put it into your inbox. Regularly, do the following for all documents in your inbox:</p> <ol> <li>For each document, decide if you need to keep the document in     physical form. This applies to certain important documents, such as     contracts and certificates.</li> <li>If you need to keep the document, write a running number on the     document before scanning, starting at one and counting upwards. This     is the archive serial number, or ASN in short.</li> <li>Scan the document.</li> <li>If the document has an ASN assigned, store it in a single binder,     sorted by ASN. Don't order this binder in any other way.</li> <li>If the document has no ASN, throw it away. Yay!</li> </ol> <p>Tip</p> <p>Instead of writing a number on the document by hand, you may also prepare a spool of labels with barcodes with an ascending serial number, that are formatted like <code>ASN00001</code>. This also enables Paperless to automatically parse and process the ASN (if enabled in the config), so that you don't need to manually assign it.</p> <p>Over time, you will notice that your physical binder will fill up. If it is full, label the binder with the range of ASNs in this binder (i.e., \"Documents 1 to 343\"), store the binder in your cellar or elsewhere, and start a new binder.</p> <p>The idea behind this process is that you will never have to use the physical binders to find a document. If you need a specific physical document, you may find this document by:</p> <ol> <li>Searching in paperless for the document.</li> <li>Identify the ASN of the document, since it appears on the scan.</li> <li>Grab the relevant document binder and get the document. This is easy     since they are sorted by ASN.</li> </ol>"},{"location":"usage/#processing-of-documents-in-paperless","title":"Processing of documents in paperless","text":"<p>Once you have scanned in a document, proceed in paperless as follows.</p> <ol> <li>If the document has an ASN, assign the ASN to the document.</li> <li>Assign a correspondent to the document (i.e., your employer, bank,     etc) This isn't strictly necessary but helps in finding a document     when you need it.</li> <li>Assign a document type (i.e., invoice, bank statement, etc) to the     document This isn't strictly necessary but helps in finding a     document when you need it.</li> <li>Assign a proper title to the document (the name of an item you     bought, the subject of the letter, etc)</li> <li>Check that the date of the document is correct. Paperless tries to     read the date from the content of the document, but this fails     sometimes if the OCR is bad or multiple dates appear on the     document.</li> <li>Remove inbox tags from the documents.</li> </ol> <p>Tip</p> <p>You can setup manual matching rules for your correspondents and tags and paperless will assign them automatically. After consuming a couple documents, you can even ask paperless to learn when to assign tags and correspondents by itself. For details on this feature, see advanced matching.</p>"},{"location":"usage/#task-management","title":"Task management","text":"<p>Some documents require attention and require you to act on the document. You may take two different approaches to handle these documents based on how regularly you intend to scan documents and use paperless.</p> <ul> <li>If you scan and process your documents in paperless regularly,   assign a TODO tag to all scanned documents that you need to process.   Create a saved view on the dashboard that shows all documents with   this tag.</li> <li>If you do not scan documents regularly and use paperless solely for   archiving, create a physical todo box next to your physical inbox   and put documents you need to process in the TODO box. When you   performed the task associated with the document, move it to the   inbox.</li> </ul>"},{"location":"usage/#architecture","title":"Architecture","text":"<p>Paperless-ngx consists of the following components:</p> <ul> <li>The webserver: This serves the administration pages, the API,   and the new frontend. This is the main tool you'll be using to interact   with paperless. You may start the webserver directly with</li> </ul> <pre><code>$ cd /path/to/paperless/src/\n$ gunicorn -c ../gunicorn.conf.py paperless.wsgi\n</code></pre> <p>or by any other means such as Apache <code>mod_wsgi</code>.</p> <ul> <li>The consumer: This is what watches your consumption folder for   documents. However, the consumer itself does not really consume your   documents. Now it notifies a task processor that a new file is ready   for consumption. I suppose it should be named differently. This was   also used to check your emails, but that's now done elsewhere as   well.</li> </ul> <p>Start the consumer with the management command <code>document_consumer</code>:</p> <pre><code>$ cd /path/to/paperless/src/\n$ python3 manage.py document_consumer\n</code></pre> <ul> <li>The task processor: Paperless relies on Celery - Distributed   Task Queue for doing   most of the heavy lifting. This is a task queue that accepts tasks   from multiple sources and processes these in parallel. It also comes   with a scheduler that executes certain commands periodically.</li> </ul> <p>This task processor is responsible for:</p> <ul> <li>Consuming documents. When the consumer finds new documents, it     notifies the task processor to start a consumption task.</li> <li>The task processor also performs the consumption of any     documents you upload through the web interface.</li> <li>Consuming emails. It periodically checks your configured     accounts for new emails and notifies the task processor to     consume the attachment of an email.</li> <li>Maintaining the search index and the automatic matching     algorithm. These are things that paperless needs to do from time     to time in order to operate properly.</li> </ul> <p>This allows paperless to process multiple documents from your   consumption folder in parallel! On a modern multi core system, this   makes the consumption process with full OCR blazingly fast.</p> <p>The task processor comes with a built-in admin interface that you   can use to check whenever any of the tasks fail and inspect the   errors (i.e., wrong email credentials, errors during consuming a   specific file, etc).</p> <ul> <li> <p>A redis message broker: This is a really   lightweight service that is responsible for getting the tasks from   the webserver and the consumer to the task scheduler. These run in a   different process (maybe even on different machines!), and   therefore, this is necessary.</p> </li> <li> <p>Optional: A database server. Paperless supports PostgreSQL, MariaDB   and SQLite for storing its data.</p> </li> </ul>"}]}